settings
{
	main
	{
		Description: "Practice Field: Expanse is a tool for practicing against dummy bots. (Now with Custom AI for all heroes!)"
	}

	lobby
	{
		Allow Players Who Are In Queue: Yes
		Data Center Preference: USA - Central
		Max Spectators: 4
		Max Team 2 Players: 0
		Return To Lobby: Never
	}

	modes
	{
		Skirmish
		{
			enabled maps
			{
				Workshop Expanse
			}
		}

		General
		{
			Game Mode Start: Immediately
			Hero Limit: Off
			Respawn Time Scalar: 0%
			Spawn Health Packs: Disabled
		}
	}

	heroes
	{
		General
		{
			Ultimate Generation: 200%

			Wrecking Ball
			{
				Jump Vertical Speed: 300%
			}
		}
	}
}

variables
{
	global:
		0: longRangeHeroes
		1: mediumRangeHeroes
		2: shortRangeHeroes
		3: veryShortRangeHeroes
		4: playerZoneRadiusDefault
		5: globalDifficulty
		6: playerBubbleRadius
		7: globalKillQuota
		8: projectileHeroes
		9: programmerName
		10: twitchURL
		11: longDistance
		12: mediumDistance
		13: shortDistance
		14: veryShortDistance
		15: githubURL
		17: moveDirStrafe
		19: moveDirForwardsNoStrafe
		20: moveDirBackwardsNoStrafe
		21: moveDirAll
		22: moveDirForwards
		23: moveDirBackwards
		24: version
		25: largePlayerZoneHeroes
		26: difficultyEasy
		27: difficultyMedium
		28: difficultyHard
		29: difficultyAIRealistic
		30: difficultyAIHard
		31: difficulty0_Name
		32: difficulty1_Name
		33: difficulty2_Name
		34: difficulty3_Name
		35: difficulty4_Name
		36: globalDifficultyName
		37: heroTypeName_Tank
		38: heroTypeName_Damage
		39: heroTypeName_Support
		40: heroTypeName_All
		41: globalHeroType
		42: globalHeroTypeName
		43: facingDefault_Head
		44: facingDefault_Body
		45: facingDefault_Position
		46: facingDefault_Other
		47: difficultyAIEasy
		48: difficulty5_Name
        49: workshopCode

	player:
		0: player_InitSpawned
		1: player_Home
		2: player_1SecondCoolDown_Enabled
		3: player_ZoneRadius
		4: currentKillNumber
		5: player_KillQuota
		6: player_currentHero
		7: player_Difficulty
		8: hudTextInfo
		9: player_DamageDone
		11: showingInfoText
		13: hudTextInfo_i
		14: nextHero
		15: targetHelpIndicatorText
		16: player_HasMercy
        17: player_SelfHealAmount
		20: debugHUD
		21: debugHUD_i
		22: debugHUD_enabled
		25: doomfistPunchDamage
		26: player_EnemyDistanceModifier
		27: player_EnemyDistanceMax
		28: skyMenu1
		29: skyMenu2
		30: skyMenu3
		31: skyMenu4
		32: skyMenu0
		33: index
		34: botAI_FacingCapMin
		35: doomfistPunchCharge
		36: mccreeDeadeyeCharge
		37: mccreeDeadeyeRate
		38: mccreeDeadeyeUse
		39: playerMercyEffectBeam
		40: botAI_ThrottleDir
		41: botAI_FacingCapMax
		42: botAI_Enabled
		46: botAI_MoveWASD_Enabled
		47: botAI_OptimalDistance
		48: playerMercyEffectSphere
		49: botAI_MoveCrouch_Enabled
		50: botAI_MoveJump_Enabled
		52: botAI_Cooldown_Ability1
		54: botAI_Cooldown_Ability3
		55: botAI_UseTime_Ability1
		56: botAI_UseTime_Ability2
		57: botAI_UseTime_Ability3
		58: botAI_Resource_1
		59: botAI_Resource_2
		60: botAI_Resource_3
		61: botAI_CanUseAbilities
		62: botAI_CanAttack
		63: botAI_Anchor_Position
		64: botAI_Anchor_DriftMax
		65: botAI_Anchor_Enabled
		66: player_Mercy_Heal_ID
		67: player_Mercy_Damage_ID
		68: player_Mercy_isHealing
		69: player_Mercy_HUD
		70: player_DamageModDealt_ID
		71: player_DamageModReceived_ID
		72: botAI_FacingPadMin
		73: botAI_FacingPadMax
		74: botAI_Facing_FlickPoint
		79: botAI_Facing_Base
		80: botAI_FacingDefault
		81: botAI_Throttle_StrafeDistanceMod
		82: botAI_Hero_Ashe_DynamitePosition
		83: botAI_Hero_Reinhardt_ChargePos
		84: player_CurrentHeroGroup
		85: player_DifficultyName
		86: botAI_ProjectileSpeed_Primary
		87: player_CurrentHeroGroupName
        88: botAI_FacingAngleModifier
}

subroutines
{
	0: nextHero
	1: previousHero
	2: teleportEnemy
	3: resetBot
	4: resetProgress
	5: botAI_Crouch
	6: setEnemyDistanceModifier
	7: botAI_Jump
	8: botAI_Facing_FlickIn
	9: player_SetDifficulty
	10: botAI_WASD
	11: botAI_Facing_Body
	12: botAI_Facing_Head
	13: botAI_AIMode_Enable
	14: infoToggle
	15: botAI_Facing_Position
	16: botAI_AIMode_Disable
	17: botAI_MoveTowardsAnchor
	22: botAI_Facing_FlickOut
	23: cycleHeroType
	24: botAI_Facing_Head_Projectile
	25: botAI_Facing_Stop
	26: botAI_Throttle_Stop
	27: botAI_Facing_Reset
	28: botAI_Facing_Other
}

rule("Info")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Global.version = Custom String("v0.999-pre-release-beta.8");
        Global.workshopCode = Custom String("5DPKQ");
		Global.programmerName = Custom String("Snow#15707");
		Global.twitchURL = Custom String("twitch.tv/SnowwwLuna");
		Global.githubURL = Custom String("https://github.com/SnowRoberge/Practice-Field-Expanse");
	}
}

rule("Global Define")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Global.longDistance = 65;
		Global.mediumDistance = 50;
		Global.shortDistance = 35;
		Global.veryShortDistance = 20;
		Global.playerZoneRadiusDefault = 20;
		Global.playerBubbleRadius = 80;
		Global.difficultyEasy = 0;
		Global.difficultyMedium = 1;
		Global.difficultyHard = 2;
		Global.difficultyAIEasy = 3;
		Global.difficultyAIRealistic = 4;
		Global.difficultyAIHard = 5;
		Global.difficulty0_Name = Custom String("Easy");
		Global.difficulty1_Name = Custom String("Medium");
		Global.difficulty2_Name = Custom String("Hard");
		Global.difficulty3_Name = Custom String("AI Easy");
		Global.difficulty4_Name = Custom String("AI Realistic");
		Global.difficulty5_Name = Custom String("AI Hard");
		Global.heroTypeName_Tank = Custom String("Tank");
		Global.heroTypeName_Damage = Custom String("Damage");
		Global.heroTypeName_Support = Custom String("Support");
		Global.heroTypeName_All = Custom String("All");
		Global.facingDefault_Body = 0;
		Global.facingDefault_Head = 1;
		Global.facingDefault_Position = 2;
		Global.facingDefault_Other = 3;
	}
}

rule("Global Direction Array Define")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Global.moveDirAll = Empty Array;
		Modify Global Variable(moveDirAll, Append To Array, Forward);
		Modify Global Variable(moveDirAll, Append To Array, Left);
		Modify Global Variable(moveDirAll, Append To Array, Right);
		Modify Global Variable(moveDirAll, Append To Array, Backward);
		Modify Global Variable(moveDirAll, Append To Array, Vector(1, 0, 1));
		Modify Global Variable(moveDirAll, Append To Array, Vector(-1, 0, 1));
		Modify Global Variable(moveDirAll, Append To Array, Vector(1, 0, -1));
		Modify Global Variable(moveDirAll, Append To Array, Vector(-1, 0, -1));
		Global.moveDirForwards = Empty Array;
		Modify Global Variable(moveDirForwards, Append To Array, Forward);
		Modify Global Variable(moveDirForwards, Append To Array, Left);
		Modify Global Variable(moveDirForwards, Append To Array, Right);
		Modify Global Variable(moveDirForwards, Append To Array, Vector(1, 0, 1));
		Modify Global Variable(moveDirForwards, Append To Array, Vector(-1, 0, 1));
		Global.moveDirBackwards = Empty Array;
		Modify Global Variable(moveDirBackwards, Append To Array, Left);
		Modify Global Variable(moveDirBackwards, Append To Array, Right);
		Modify Global Variable(moveDirBackwards, Append To Array, Backward);
		Modify Global Variable(moveDirBackwards, Append To Array, Vector(1, 0, -1));
		Modify Global Variable(moveDirBackwards, Append To Array, Vector(-1, 0, -1));
		Global.moveDirForwardsNoStrafe = Empty Array;
		Modify Global Variable(moveDirForwardsNoStrafe, Append To Array, Forward);
		Modify Global Variable(moveDirForwardsNoStrafe, Append To Array, Vector(1, 0, 1));
		Modify Global Variable(moveDirForwardsNoStrafe, Append To Array, Vector(-1, 0, 1));
		Global.moveDirBackwardsNoStrafe = Empty Array;
		Modify Global Variable(moveDirBackwardsNoStrafe, Append To Array, Backward);
		Modify Global Variable(moveDirBackwardsNoStrafe, Append To Array, Vector(1, 0, -1));
		Modify Global Variable(moveDirBackwardsNoStrafe, Append To Array, Vector(-1, 0, -1));
		Global.moveDirStrafe = Empty Array;
		Modify Global Variable(moveDirStrafe, Append To Array, Left);
		Modify Global Variable(moveDirStrafe, Append To Array, Right);
	}
}

rule("Global Hero Define")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Global.longRangeHeroes = Empty Array;
		Modify Global Variable(longRangeHeroes, Append To Array, Hero(Widowmaker));
		Global.mediumRangeHeroes = Empty Array;
		Modify Global Variable(mediumRangeHeroes, Append To Array, Hero(Ashe));
		Modify Global Variable(mediumRangeHeroes, Append To Array, Hero(Ana));
		Modify Global Variable(mediumRangeHeroes, Append To Array, Hero(Baptiste));
		Modify Global Variable(mediumRangeHeroes, Append To Array, Hero(Hanzo));
		Global.shortRangeHeroes = Empty Array;
		Modify Global Variable(shortRangeHeroes, Append To Array, Hero(McCree));
		Modify Global Variable(shortRangeHeroes, Append To Array, Hero(Echo));
		Modify Global Variable(shortRangeHeroes, Append To Array, Hero(Orisa));
		Modify Global Variable(shortRangeHeroes, Append To Array, Hero(Bastion));
		Modify Global Variable(shortRangeHeroes, Append To Array, Hero(Genji));
		Modify Global Variable(shortRangeHeroes, Append To Array, Hero(Junkrat));
		Modify Global Variable(shortRangeHeroes, Append To Array, Hero(Lúcio));
		Modify Global Variable(shortRangeHeroes, Append To Array, Hero(Mei));
		Modify Global Variable(shortRangeHeroes, Append To Array, Hero(Mercy));
		Modify Global Variable(shortRangeHeroes, Append To Array, Hero(Pharah));
		Modify Global Variable(shortRangeHeroes, Append To Array, Hero(Soldier: 76));
		Modify Global Variable(shortRangeHeroes, Append To Array, Hero(Sombra));
		Modify Global Variable(shortRangeHeroes, Append To Array, Hero(Torbjörn));
		Modify Global Variable(shortRangeHeroes, Append To Array, Hero(Zenyatta));
		Global.veryShortRangeHeroes = Empty Array;
		Modify Global Variable(veryShortRangeHeroes, Append To Array, Hero(Symmetra));
		Modify Global Variable(veryShortRangeHeroes, Append To Array, Hero(Tracer));
		Modify Global Variable(veryShortRangeHeroes, Append To Array, Hero(Winston));
		Modify Global Variable(veryShortRangeHeroes, Append To Array, Hero(Wrecking Ball));
		Modify Global Variable(veryShortRangeHeroes, Append To Array, Hero(Zarya));
		Modify Global Variable(veryShortRangeHeroes, Append To Array, Hero(Moira));
		Modify Global Variable(veryShortRangeHeroes, Append To Array, Hero(Sigma));
		Modify Global Variable(veryShortRangeHeroes, Append To Array, Hero(Reaper));
		Modify Global Variable(veryShortRangeHeroes, Append To Array, Hero(Reinhardt));
		Modify Global Variable(veryShortRangeHeroes, Append To Array, Hero(Brigitte));
		Modify Global Variable(veryShortRangeHeroes, Append To Array, Hero(D.Va));
		Modify Global Variable(veryShortRangeHeroes, Append To Array, Hero(Doomfist));
		Modify Global Variable(veryShortRangeHeroes, Append To Array, Hero(Roadhog));
		Global.projectileHeroes = Empty Array;
		Modify Global Variable(projectileHeroes, Append To Array, Hero(Ana));
		Modify Global Variable(projectileHeroes, Append To Array, Hero(Ashe));
		Modify Global Variable(projectileHeroes, Append To Array, Hero(Baptiste));
		Modify Global Variable(projectileHeroes, Append To Array, Hero(Bastion));
		Modify Global Variable(projectileHeroes, Append To Array, Hero(D.Va));
		Modify Global Variable(projectileHeroes, Append To Array, Hero(Echo));
		Modify Global Variable(projectileHeroes, Append To Array, Hero(Genji));
		Modify Global Variable(projectileHeroes, Append To Array, Hero(Hanzo));
		Modify Global Variable(projectileHeroes, Append To Array, Hero(Junkrat));
		Modify Global Variable(projectileHeroes, Append To Array, Hero(Lúcio));
		Modify Global Variable(projectileHeroes, Append To Array, Hero(McCree));
		Modify Global Variable(projectileHeroes, Append To Array, Hero(Mercy));
		Modify Global Variable(projectileHeroes, Append To Array, Hero(Orisa));
		Modify Global Variable(projectileHeroes, Append To Array, Hero(Pharah));
		Modify Global Variable(projectileHeroes, Append To Array, Hero(Reaper));
		Modify Global Variable(projectileHeroes, Append To Array, Hero(Roadhog));
		Modify Global Variable(projectileHeroes, Append To Array, Hero(Sigma));
		Modify Global Variable(projectileHeroes, Append To Array, Hero(Soldier: 76));
		Modify Global Variable(projectileHeroes, Append To Array, Hero(Sombra));
		Modify Global Variable(projectileHeroes, Append To Array, Hero(Torbjörn));
		Modify Global Variable(projectileHeroes, Append To Array, Hero(Tracer));
		Modify Global Variable(projectileHeroes, Append To Array, Hero(Widowmaker));
		Modify Global Variable(projectileHeroes, Append To Array, Hero(Wrecking Ball));
		Modify Global Variable(projectileHeroes, Append To Array, Hero(Zenyatta));
		Global.largePlayerZoneHeroes = Empty Array;
		Modify Global Variable(largePlayerZoneHeroes, Append To Array, Hero(Genji));
		Modify Global Variable(largePlayerZoneHeroes, Append To Array, Hero(Pharah));
		Modify Global Variable(largePlayerZoneHeroes, Append To Array, Hero(Echo));
		Modify Global Variable(largePlayerZoneHeroes, Append To Array, Hero(Mercy));
		Modify Global Variable(largePlayerZoneHeroes, Append To Array, Hero(Sombra));
		Modify Global Variable(largePlayerZoneHeroes, Append To Array, Hero(Doomfist));
		Modify Global Variable(largePlayerZoneHeroes, Append To Array, Hero(Wrecking Ball));
	}
}

rule("Global Settings")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Global.globalDifficulty = Global.difficultyAIRealistic;
		Global.globalDifficultyName = Global.difficulty4_Name;
		Global.globalHeroType = All Heroes;
		Global.globalHeroTypeName = Global.heroTypeName_All;
		Global.globalKillQuota = 4;
		Disable Built-In Game Mode Completion;
	}
}

rule("Player Init")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is Game In Progress == True;
		Has Spawned(Event Player) == True;
		Event Player.player_InitSpawned == False;
	}

	actions
	{
		"Initialize Variables"
		Event Player.player_DamageDone = 0;
		Event Player.currentKillNumber = 0;
		Event Player.player_currentHero = 0;
		Event Player.player_CurrentHeroGroup = Global.globalHeroType;
		Event Player.player_CurrentHeroGroupName = Global.globalHeroTypeName;
		Event Player.showingInfoText = False;
		Event Player.player_KillQuota = Global.globalKillQuota;
		Event Player.player_Difficulty = Global.globalDifficulty;
		Event Player.player_DifficultyName = Global.globalDifficultyName;
		Event Player.player_ZoneRadius = Global.playerZoneRadiusDefault;
		"Set Home Vector"
		If(Slot Of(Event Player) == 0);
			Event Player.player_Home = Vector(-380 + Global.playerBubbleRadius, 0, 380 - Global.playerBubbleRadius);
		Else If(Slot Of(Event Player) == 1);
			Event Player.player_Home = Vector(380 - Global.playerBubbleRadius, 0, -380 + Global.playerBubbleRadius);
		Else If(Slot Of(Event Player) == 2);
			Event Player.player_Home = Vector(380 - Global.playerBubbleRadius, 0, 380 - Global.playerBubbleRadius);
		Else If(Slot Of(Event Player) == 3);
			Event Player.player_Home = Vector(-380 + Global.playerBubbleRadius, 0, -380 + Global.playerBubbleRadius);
		Else If(Slot Of(Event Player) == 4);
			Event Player.player_Home = Vector(0, 0, 380 - Global.playerBubbleRadius);
		Else If(Slot Of(Event Player) == 5);
			Event Player.player_Home = Vector(0, 0, -380 + Global.playerBubbleRadius);
		End;
		Teleport(Event Player, Event Player.player_Home);
		"Create Player Bubble"
		Create Effect(All Players(All Teams), Sphere, Sky Blue, Event Player.player_Home, Global.playerBubbleRadius,
			Visible To Position and Radius);
		"Create Player Movement Zone"
		Create Effect(All Players(All Teams), Ring, Blue, Event Player.player_Home, Event Player.player_ZoneRadius,
			Visible To Position and Radius);
		"Create Maximum Enemy Distance Zone"
		Create Effect(All Players(All Teams), Ring, Red, Event Player.player_Home, Event Player.player_EnemyDistanceMax,
			Visible To Position and Radius);
		"Player initialization is complete"
		Event Player.player_InitSpawned = True;
		"Create Version Info Text"
		Create HUD Text(Event Player, Custom String(""), Custom String("Practice Field: Expanse", Global.version), Null, Left, -3, White,
			Green, White, Visible To and String, Default Visibility);
		Create HUD Text(Event Player, Custom String(""), Custom String("Version {0}, Created by {1}", Global.version,
			Global.programmerName), Null, Left, -2, White, Aqua, White, Visible To and String, Default Visibility);
        Create HUD Text(Event Player, Custom String(""), Custom String("Workshop Code: {0}", Global.workshopCode), Null, Left, -1.9, White, Orange, White, Visible To and String, Default Visibility);
		Create HUD Text(Event Player, Custom String(""), Custom String("Hold [CROUCH] and [RELOAD] to change heroes"), Null, Left, -1.800,
			White, White, White, Visible To and String, Default Visibility);
		Create HUD Text(Event Player, Custom String(""), Custom String(
			"Hold [{0}] and press [{1}] or [{2}] to cycle enemy hero", Button(Interact), Button(Primary Fire), Button(Secondary Fire)), Null, Left, -1.600, White, White, White,
			Visible To and String, Default Visibility);
		Create HUD Text(Event Player, Custom String(""), Custom String("Press [CROUCH] and [INTERACT] to show/hide info"), Null, Left,
			-0.900, White, White, White, Visible To and String, Default Visibility);
		Call Subroutine(infoToggle);
		Wait(10, Ignore Condition);
		If(Event Player.showingInfoText == True);
			Call Subroutine(infoToggle);
		End;
	}
}

rule("Bot Init")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Event Player.player_InitSpawned == True;
	}

	actions
	{
		Wait(0.250, Ignore Condition);
		Call Subroutine(resetProgress);
		Disable Built-In Game Mode Respawning(Players In Slot(Slot Of(Event Player), Team 2));
		"Setup difficulty"
		Call Subroutine(player_SetDifficulty);
	}
}

rule("Bot Destroy On Player Leave")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Entity Exists(Players In Slot(Slot Of(Event Player), Team 1)) == False;
		Is In Spawn Room(Players In Slot(Slot Of(Event Player), Team 1)) == False;
		Has Spawned(Players In Slot(Slot Of(Event Player), Team 1)) == False;
	}

	actions
	{
		Destroy Dummy Bot(Team 2, Slot Of(Event Player));
	}
}

rule("Bot Respawn")
{
	event
	{
		Player Died;
		Team 2;
		All;
	}

	conditions
	{
		Players In Slot(Slot Of(Event Player), Team 1).currentKillNumber < Players In Slot(Slot Of(Event Player), Team 1).player_KillQuota;
	}

	actions
	{
		Wait(0.250, Ignore Condition);
		Call Subroutine(teleportEnemy);
		Resurrect(Event Player);
		Stop Holding Button(Event Player, Primary Fire);
		Stop Holding Button(Event Player, Secondary Fire);
	}
}

rule("Bot Increment Kills")
{
	event
	{
		Player Dealt Final Blow;
		Team 2;
		All;
	}

	conditions
	{
		Is Game In Progress == True;
	}

	actions
	{
		Event Player.currentKillNumber += 1;
	}
}

rule("Bot BM")
{
	event
	{
		Player Dealt Final Blow;
		Team 2;
		All;
	}

	conditions
	{
		Is Game In Progress == True;
		Is Alive(Event Player) == True;
	}

	actions
	{
		Skip If(Random Real(0, 1) >= 0.350, 5);
		Wait(Random Real(0.750, 1.250), Ignore Condition);
		Skip If(Random Real(0, 1) >= 0.500, 2);
		Communicate(Event Player, Hello);
		Abort;
		Communicate(Event Player, Thanks);
	}
}

rule("Bot Hello")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is Game In Progress == True;
		Is Communicating(Event Player, Hello) == True;
		Is Alive(Event Player) == True;
	}

	actions
	{
		Wait(Random Real(0.900, 1.100), Ignore Condition);
		Communicate(Players In Slot(Slot Of(Event Player), Team 2), Hello);
	}
}

rule("HUD Kill Counter")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is Game In Progress == True;
	}

	actions
	{
		Create HUD Text(Event Player, Custom String("{0} Kills: {1} / {2}", Hero Icon String(
			Event Player.player_CurrentHeroGroup[Event Player.player_currentHero]), Event Player.currentKillNumber,
			Event Player.player_KillQuota), Null, Null, Right, -3, White, White, White, Visible To and String, Default Visibility);
		Create HUD Text(Event Player, Null, Custom String("{0} killed you {1} time(s).", Hero Of(Players In Slot(Slot Of(Event Player),
			Team 2)), Players In Slot(Slot Of(Event Player), Team 2).currentKillNumber), Null, Right, -2.900, White, White, Red,
			Visible To and String, Default Visibility);
		Create HUD Text(Event Player, Null, Custom String("Hero Type: {0}", Event Player.player_CurrentHeroGroupName), Null, Right, -2.200,
			White, White, White, Visible To and String, Default Visibility);
		Create HUD Text(Event Player, Custom String(""), Custom String("Hero {0} of {1}", 1 + Event Player.player_currentHero, Count Of(
			Event Player.player_CurrentHeroGroup)), Null, Right, -2, White, Yellow, White, Visible To and String, Default Visibility);
		Create HUD Text(Event Player, Null, Custom String("Next Hero: {0}", Hero Icon String(
			Event Player.player_CurrentHeroGroup[Event Player.nextHero])), Null, Right, -1, White, Aqua, White, Visible To and String,
			Default Visibility);
		Create HUD Text(Event Player, Null, Custom String("Difficulty: {0}", Event Player.player_DifficultyName), Null, Right, -0.900,
			White, Orange, White, Visible To and String, Default Visibility);
	}
}

rule("Increment Kills")
{
	event
	{
		Player Dealt Final Blow;
		Team 1;
		All;
	}

	conditions
	{
		Players In Slot(Slot Of(Event Player), Team 2) == Victim;
	}

	actions
	{
		Event Player.currentKillNumber += 1;
	}
}

rule("Next Hero")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is Game In Progress == True;
		Event Player.currentKillNumber == Event Player.player_KillQuota;
	}

	actions
	{
		Wait(0.250, Ignore Condition);
		Call Subroutine(nextHero);
	}
}

rule("Player Elimination Heal")
{
	event
	{
		Player Dealt Final Blow;
		Team 1;
		All;
	}

	conditions
	{
		Is Alive(Event Player) == True;
		Health(Event Player) != Max Health(Event Player);
		Event Player.player_HasMercy == False;
	}

	actions
	{
        If(Event Player.player_Difficulty == Global.difficultyAIEasy);
		    Start Heal Over Time(Event Player, Null, Random Real(3, 3.5), 50);
        Else If(Event Player.player_Difficulty == Global.difficultyAIRealistic);
            Start Heal Over Time(Event Player, Null, Random Real(2, 2.5), 50);
        Else If(Event Player.player_Difficulty == Global.difficultyAIHard);
            Start Heal Over Time(Event Player, Null, Random Real(1.5, 2), 50);
        End;
	}
}

rule("Player Damage Dealt Heal")
{
	event
	{
		Player Dealt Damage;
		Team 1;
		All;
	}

	conditions
	{
		Is Game In Progress == True;
		Is Alive(Event Player) == True;
		Health(Event Player) != Max Health(Event Player);
		Event Player.player_HasMercy == False;
	}

	actions
	{
		Wait(0.200, Ignore Condition);
		Event Player.player_DamageDone += Event Damage;
		Heal(Event Player, Event Player, Event Damage * Event Player.player_SelfHealAmount);
	}
}

rule("Reset Player At Home")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Distance Between(Event Player.player_Home, Event Player) > Event Player.player_ZoneRadius;
		Is Alive(Event Player) == True;
		Has Spawned(Event Player) == True;
	}

	actions
	{
		Play Effect(Event Player, Debuff Impact Sound, White, Event Player, 75);
		Play Effect(Event Player, Bad Pickup Effect, White, Event Player.player_Home, 1);
		If(Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 2), 20) == True);
			Teleport(Event Player, Event Player.player_Home);
			Wait(0.016, Ignore Condition);
			Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Eye Position(Players In Slot(Slot Of(Event Player),
				Team 2))), Angle Between Vectors(Facing Direction Of(Event Player), Direction Towards(Eye Position(Event Player), Eye Position(
				Players In Slot(Slot Of(Event Player), Team 2)))) * 5, To World, None);
			Wait(0.200, Ignore Condition);
			Stop Facing(Event Player);
		Else;
			Teleport(Event Player, Event Player.player_Home);
		End;
		Teleport(Event Player, Event Player.player_Home);
	}
}

rule("Reset Enemy Position Non AI Difficulty")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Is Game In Progress == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1).player_Home) >= Players In Slot(Slot Of(
			Event Player), Team 1).player_EnemyDistanceMax;
		Event Player.player_Difficulty < Global.difficultyAIEasy;
	}

	actions
	{
		"Flip 180"
		Set Facing(Event Player, Vector(0, Y Component Of(Facing Direction Of(Event Player)), -1), To Player);
	}
}

rule("Hero Defines Long Range")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Array Contains(Global.longRangeHeroes, Hero Of(Event Player)) == True;
	}

	actions
	{
		Event Player.player_EnemyDistanceMax = Global.longDistance;
		Call Subroutine(setEnemyDistanceModifier);
		Event Player.player_ZoneRadius = Global.playerZoneRadiusDefault;
	}
}

rule("Hero Defines Medium Range")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Array Contains(Global.mediumRangeHeroes, Hero Of(Event Player)) == True;
	}

	actions
	{
		Event Player.player_EnemyDistanceMax = Global.mediumDistance;
		Call Subroutine(setEnemyDistanceModifier);
		Event Player.player_ZoneRadius = Global.playerZoneRadiusDefault;
	}
}

rule("Hero Defines Short Range")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Array Contains(Global.shortRangeHeroes, Hero Of(Event Player)) == True;
	}

	actions
	{
		Event Player.player_EnemyDistanceMax = Global.shortDistance;
		Call Subroutine(setEnemyDistanceModifier);
		Event Player.player_ZoneRadius = Global.playerZoneRadiusDefault;
		If(Array Contains(Global.largePlayerZoneHeroes, Hero Of(Event Player)));
			Event Player.player_ZoneRadius = Event Player.player_EnemyDistanceMax;
		End;
	}
}

rule("Hero Defines Very Short Range")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Array Contains(Global.veryShortRangeHeroes, Hero Of(Event Player)) == True;
	}

	actions
	{
		Event Player.player_EnemyDistanceMax = Global.veryShortDistance;
		Call Subroutine(setEnemyDistanceModifier);
		Event Player.player_ZoneRadius = Event Player.player_EnemyDistanceMax;
	}
}

rule("Player Change Heroes")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Crouch) == True;
		Is Button Held(Event Player, Reload) == True;
	}

	actions
	{
		Wait(0.250, Abort When False);
		Small Message(Event Player, Custom String("Continue holding to change heroes..."));
		Set Status(Event Player, Null, Phased Out, 1);
		Wait(0.500, Abort When False);
		disabled For Player Variable(Event Player, index, 0, Count Of(All Heroes), 1);
		disabled Preload Hero(Event Player, All Heroes[Event Player.index]);
		disabled End;
		Set Player Allowed Heroes(Event Player, Remove From Array(All Heroes, Hero Of(Event Player)));
		Wait(1, Ignore Condition);
		Reset Player Hero Availability(Event Player);
	}
}

rule("Subroutine: teleportEnemy")
{
	event
	{
		Subroutine;
		teleportEnemy;
	}

	actions
	{
		Set Invisible(Players In Slot(Slot Of(Event Player), Team 2), All);
		Set Facing(Players In Slot(Slot Of(Event Player), Team 2), Vector(Random Real(-1, 1), Random Real(-0.500, 0.500), Random Real(-1,
			1)), To Player);
		If(Players In Slot(Slot Of(Event Player), Team 1).player_Difficulty < Global.difficultyAIEasy);
			Teleport(Players In Slot(Slot Of(Event Player), Team 2), Direction From Angles(Random Integer(1, 360), 0) * Random Integer(
				Players In Slot(Slot Of(Event Player), Team 1).currentKillNumber * Players In Slot(Slot Of(Event Player), Team 1)
				.player_EnemyDistanceModifier, (Players In Slot(Slot Of(Event Player), Team 1).currentKillNumber + 1) * Players In Slot(
				Slot Of(Event Player), Team 1).player_EnemyDistanceModifier) + Players In Slot(Slot Of(Event Player), Team 1).player_Home);
		Else;
			Teleport(Players In Slot(Slot Of(Event Player), Team 2), Direction From Angles(Random Integer(1, 360), 0) * Random Integer(0,
				Players In Slot(Slot Of(Event Player), Team 1).player_EnemyDistanceMax) + Players In Slot(Slot Of(Event Player), Team 1)
				.player_Home);
		End;
		Wait(0.250, Ignore Condition);
		"Don't play sound effect if using menu."
		Skip If(Is In View Angle(Players In Slot(Slot Of(Event Player), Team 1), Players In Slot(Slot Of(Event Player), Team 1).skyMenu4,
			20), 3);
		Skip If(Is In View Angle(Players In Slot(Slot Of(Event Player), Team 1), Players In Slot(Slot Of(Event Player), Team 1).skyMenu2,
			20), 2);
		Play Effect(Players In Slot(Slot Of(Event Player), Team 1), Buff Impact Sound, White, Players In Slot(Slot Of(Event Player),
			Team 2), 180);
		Play Effect(Players In Slot(Slot Of(Event Player), Team 1), Bad Pickup Effect, White, Players In Slot(Slot Of(Event Player),
			Team 2), 1);
		Set Invisible(Players In Slot(Slot Of(Event Player), Team 2), None);
	}
}

rule("Subroutine: setEnemyDistanceModifier")
{
	event
	{
		Subroutine;
		setEnemyDistanceModifier;
	}

	actions
	{
		Players In Slot(Slot Of(Event Player), Team 1).player_EnemyDistanceModifier = Players In Slot(Slot Of(Event Player), Team 1)
			.player_EnemyDistanceMax / Players In Slot(Slot Of(Event Player), Team 1).player_KillQuota;
	}
}

rule("Subroutine: resetBot")
{
	event
	{
		Subroutine;
		resetBot;
	}

	actions
	{
		If(Players In Slot(Slot Of(Event Player), Team 1).player_Difficulty >= Global.difficultyAIEasy);
			Call Subroutine(botAI_AIMode_Disable);
			Players In Slot(Slot Of(Event Player), Team 2).botAI_UseTime_Ability1 = 0;
			Players In Slot(Slot Of(Event Player), Team 2).botAI_UseTime_Ability2 = 0;
			Players In Slot(Slot Of(Event Player), Team 2).botAI_UseTime_Ability3 = 0;
			Players In Slot(Slot Of(Event Player), Team 2).botAI_Resource_1 = 0;
			Players In Slot(Slot Of(Event Player), Team 2).botAI_Resource_2 = 0;
			Players In Slot(Slot Of(Event Player), Team 2).botAI_Resource_3 = 0;
			Event Player.botAI_Throttle_StrafeDistanceMod = 5;
		End;
		Stop Holding Button(Players In Slot(Slot Of(Event Player), Team 2), Primary Fire);
		Stop Holding Button(Players In Slot(Slot Of(Event Player), Team 2), Secondary Fire);
		Stop Holding Button(Players In Slot(Slot Of(Event Player), Team 2), Crouch);
		Stop Holding Button(Players In Slot(Slot Of(Event Player), Team 2), Jump);
		Stop Holding Button(Players In Slot(Slot Of(Event Player), Team 2), Ability 1);
		Stop Holding Button(Players In Slot(Slot Of(Event Player), Team 2), Ability 2);
		Stop Holding Button(Players In Slot(Slot Of(Event Player), Team 2), Reload);
		Stop Holding Button(Players In Slot(Slot Of(Event Player), Team 2), Ultimate);
		Allow Button(Players In Slot(Slot Of(Event Player), Team 2), Primary Fire);
		Allow Button(Players In Slot(Slot Of(Event Player), Team 2), Secondary Fire);
		Allow Button(Players In Slot(Slot Of(Event Player), Team 2), Crouch);
		Allow Button(Players In Slot(Slot Of(Event Player), Team 2), Jump);
		Allow Button(Players In Slot(Slot Of(Event Player), Team 2), Ability 1);
		Allow Button(Players In Slot(Slot Of(Event Player), Team 2), Ability 2);
		Allow Button(Players In Slot(Slot Of(Event Player), Team 2), Reload);
		Allow Button(Players In Slot(Slot Of(Event Player), Team 2), Ultimate);
		Stop Throttle In Direction(Players In Slot(Slot Of(Event Player), Team 2));
		Call Subroutine(botAI_Facing_Stop);
		If(Entity Exists(Players In Slot(Slot Of(Event Player), Team 2)));
			Set Invisible(Players In Slot(Slot Of(Event Player), Team 2), All);
			Start Forcing Player To Be Hero(Players In Slot(Slot Of(Event Player), Team 2), Players In Slot(Slot Of(Event Player), Team 1)
				.player_CurrentHeroGroup[Players In Slot(Slot Of(Event Player), Team 1).player_currentHero]);
		Else;
			Create Dummy Bot(Players In Slot(Slot Of(Event Player), Team 1).player_CurrentHeroGroup[Players In Slot(Slot Of(Event Player),
				Team 1).player_currentHero], Team 2, Slot Of(Event Player), Vector(0, 0, 0), Vector(0, 0, 0));
			Set Invisible(Players In Slot(Slot Of(Event Player), Team 2), All);
		End;
	}
}

rule("Subroutine: resetProgress")
{
	event
	{
		Subroutine;
		resetProgress;
	}

	actions
	{
		Heal(Players In Slot(Slot Of(Event Player), Team 1), Null, Max Health(Players In Slot(Slot Of(Event Player), Team 1)));
		Players In Slot(Slot Of(Event Player), Team 1).currentKillNumber = 0;
		Players In Slot(Slot Of(Event Player), Team 2).currentKillNumber = 0;
		Players In Slot(Slot Of(Event Player), Team 1).player_currentHero = 0;
		Players In Slot(Slot Of(Event Player), Team 1).nextHero = Players In Slot(Slot Of(Event Player), Team 1).player_currentHero + 1;
		Call Subroutine(resetBot);
		Call Subroutine(teleportEnemy);
	}
}

rule("Subroutine: nextHero")
{
	event
	{
		Subroutine;
		nextHero;
	}

	actions
	{
		If(Health(Players In Slot(Slot Of(Event Player), Team 1)) != Max Health(Players In Slot(Slot Of(Event Player), Team 1)));
			Heal(Players In Slot(Slot Of(Event Player), Team 1), Null, Max Health(Players In Slot(Slot Of(Event Player), Team 1)));
		End;
		Players In Slot(Slot Of(Event Player), Team 1).currentKillNumber = 0;
		Players In Slot(Slot Of(Event Player), Team 2).currentKillNumber = 0;
		If(Players In Slot(Slot Of(Event Player), Team 1).player_currentHero == Count Of(Event Player.player_CurrentHeroGroup) - 1);
			Call Subroutine(resetProgress);
		Else;
			Players In Slot(Slot Of(Event Player), Team 1).player_currentHero = Players In Slot(Slot Of(Event Player), Team 1).nextHero;
			If(Players In Slot(Slot Of(Event Player), Team 1).player_currentHero == Count Of(Players In Slot(Slot Of(Event Player), Team 1)
				.player_CurrentHeroGroup) - 1);
				Players In Slot(Slot Of(Event Player), Team 1).nextHero = 0;
			Else;
				Players In Slot(Slot Of(Event Player), Team 1).nextHero = Players In Slot(Slot Of(Event Player), Team 1).player_currentHero + 1;
			End;
			Call Subroutine(resetBot);
			Call Subroutine(teleportEnemy);
		End;
	}
}

rule("Subroutine: previousHero")
{
	event
	{
		Subroutine;
		previousHero;
	}

	actions
	{
		Heal(Players In Slot(Slot Of(Event Player), Team 1), Null, Max Health(Players In Slot(Slot Of(Event Player), Team 1)));
		Players In Slot(Slot Of(Event Player), Team 1).currentKillNumber = 0;
		Players In Slot(Slot Of(Event Player), Team 2).currentKillNumber = 0;
		If(Players In Slot(Slot Of(Event Player), Team 1).player_currentHero == 0);
			Players In Slot(Slot Of(Event Player), Team 1).player_currentHero = Count Of(Players In Slot(Slot Of(Event Player), Team 1).player_CurrentHeroGroup) - 1;
			Players In Slot(Slot Of(Event Player), Team 1).nextHero = 0;
		Else;
			Players In Slot(Slot Of(Event Player), Team 1).player_currentHero -= 1;
			Players In Slot(Slot Of(Event Player), Team 1).nextHero = Players In Slot(Slot Of(Event Player), Team 1).player_currentHero + 1;
		End;
		Call Subroutine(resetBot);
		Call Subroutine(teleportEnemy);
	}
}

rule("Skip Hero Forward")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Interact) == True;
		Is Button Held(Event Player, Primary Fire) == True;
	}

	actions
	{
		Call Subroutine(nextHero);
	}
}

rule("Skip Hero Backwards")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Interact) == True;
		Is Button Held(Event Player, Secondary Fire) == True;
	}

	actions
	{
		Call Subroutine(previousHero);
	}
}

rule("Disable Primary Secondary Skip")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Interact) == True;
		Has Spawned(Event Player) == True;
	}

	actions
	{
		Disallow Button(Event Player, Primary Fire);
		Disallow Button(Event Player, Secondary Fire);
		Wait(0.500, Ignore Condition);
		Loop If Condition Is True;
		Allow Button(Event Player, Primary Fire);
		Allow Button(Event Player, Secondary Fire);
	}
}

rule("Special Rule: Remech D.Va")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		D.Va;
	}

	conditions
	{
		Is Game In Progress == True;
		Ultimate Charge Percent(Event Player) == 100;
		Is In Alternate Form(Event Player) == True;
	}

	actions
	{
		Wait(0.100, Ignore Condition);
		Press Button(Event Player, Ultimate);
	}
}

rule("Special Rule: In Air Bug")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is In Air(Event Player) == True;
		Hero Of(Event Player) != Hero(Pharah);
		Hero Of(Event Player) != Hero(Sigma);
		Hero Of(Event Player) != Hero(Mercy);
		Hero Of(Event Player) != Hero(Echo);
	}

	actions
	{
		Wait(5, Abort When False);
		Set Status(Event Player, Null, Knocked Down, 0.250);
		Teleport(Event Player, Event Player.player_Home);
	}
}

rule("Special Rule: Doomfist Rocket Punch Start")
{
	event
	{
		Ongoing - Each Player;
		All;
		Doomfist;
	}

	conditions
	{
		Is Firing Secondary(Event Player) == True;
		Is Alive(Event Player) == True;
	}

	actions
	{
		Event Player.doomfistPunchCharge = Total Time Elapsed;
		Event Player.doomfistPunchDamage = 0;
	}
}

rule("Special Rule: Doomfist Rocket Punch Stop")
{
	event
	{
		Ongoing - Each Player;
		All;
		Doomfist;
	}

	conditions
	{
		Is Firing Secondary(Event Player) == False;
		Is Alive(Event Player) == True;
		Event Player.doomfistPunchCharge != 0;
	}

	actions
	{
		Event Player.doomfistPunchDamage = (Total Time Elapsed - Event Player.doomfistPunchCharge) / 1.400 * 100.750 + 49.250;
		If(Event Player.doomfistPunchDamage > 150);
			Event Player.doomfistPunchDamage = 150;
		End;
		Small Message(Event Player, Event Player.doomfistPunchDamage);
	}
}

rule("Special Rule: Doomfist Rocket Punch Damage")
{
	event
	{
		Ongoing - Each Player;
		All;
		Doomfist;
	}

	conditions
	{
		Has Status(Players In Slot(Slot Of(Event Player), Opposite Team Of(Team Of(Event Player))), Stunned) == True;
		Distance Between(Players In Slot(Slot Of(Event Player), Opposite Team Of(Team Of(Event Player))), Players In Slot(Slot Of(
			Event Player), Team 1).player_Home) >= Players In Slot(Slot Of(Event Player), Team 1).player_ZoneRadius - 1;
	}

	actions
	{
		Apply Impulse(Players In Slot(Slot Of(Event Player), Opposite Team Of(Team Of(Event Player))), Direction Towards(Players In Slot(
			Slot Of(Event Player), Opposite Team Of(Team Of(Event Player))), Event Player), 1, To World, Cancel Contrary Motion);
		Damage(Players In Slot(Slot Of(Event Player), Opposite Team Of(Team Of(Event Player))), Event Player,
			Event Player.doomfistPunchDamage);
		Event Player.doomfistPunchCharge = 0;
		Event Player.doomfistPunchDamage = 0;
	}
}

rule("Info Toggle")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is Game In Progress == True;
		Is Button Held(Event Player, Interact) == True;
		Is Button Held(Event Player, Crouch) == True;
	}

	actions
	{
		Call Subroutine(infoToggle);
	}
}

rule("Player Joined")
{
	event
	{
		Player Joined Match;
		Team 1;
		All;
	}

	conditions
	{
		Is Game In Progress == True;
		Event Player.player_InitSpawned == True;
	}

	actions
	{
		Destroy Dummy Bot(Team 2, Slot Of(Event Player));
		Event Player.player_InitSpawned = False;
		If(Event Player.showingInfoText == True);
			Call Subroutine(infoToggle);
		End;
	}
}

rule("Target Help Indicator")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is Game In Progress == True;
		Has Spawned(Event Player) == True;
		Is Alive(Event Player) == True;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Opposite Team Of(Team Of(Event Player))), 90) == False;
		Event Player.player_Difficulty <= Global.difficultyHard;
		Y Component Of(Facing Direction Of(Event Player)) <= 0.500;
	}

	actions
	{
		Wait(4, Abort When False);
		Play Effect(Event Player, Debuff Impact Sound, White, Players In Slot(Slot Of(Event Player), Opposite Team Of(Team Of(
			Event Player))), 200);
		Big Message(Event Player, Custom String("Turn Around!"));
		Create In-World Text(Event Player, Custom String("TARGET!"), Players In Slot(Slot Of(Event Player), Opposite Team Of(Team Of(
			Event Player))), 4, Do Not Clip, Visible To Position and String, Yellow, Default Visibility);
		Event Player.targetHelpIndicatorText = Last Text ID;
		Wait(3, Ignore Condition);
		Destroy In-World Text(Event Player.targetHelpIndicatorText);
		Loop If Condition Is True;
	}
}

rule("Sky Menu Generate")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is Game In Progress == True;
		Event Player.player_InitSpawned == True;
	}

	actions
	{
		Event Player.skyMenu0 = Event Player.player_Home + Vector(0, 45, 0);
		Event Player.skyMenu1 = Event Player.player_Home + Vector(15, 45, 0);
		Event Player.skyMenu2 = Event Player.player_Home + Vector(-15, 45, 0);
		Event Player.skyMenu3 = Event Player.player_Home + Vector(0, 45, 15);
		Event Player.skyMenu4 = Event Player.player_Home + Vector(0, 45, -15);
		Create Effect(Event Player, Sphere, White, Event Player.skyMenu0, 1, Visible To Position and Radius);
		Create Effect(Event Player, Sphere, White, Event Player.skyMenu1, 1, Visible To Position and Radius);
		Create Effect(Event Player, Sphere, White, Event Player.skyMenu2, 1, Visible To Position and Radius);
		Create Effect(Event Player, Sphere, White, Event Player.skyMenu3, 1, Visible To Position and Radius);
		Create Effect(Event Player, Sphere, White, Event Player.skyMenu4, 1, Visible To Position and Radius);
		Create In-World Text(Event Player, Custom String("Decrease Difficulty (Current: {0})", Event Player.player_DifficultyName),
			Event Player.skyMenu1, 1, Clip Against Surfaces, Visible To Position and String, White, Default Visibility);
		Create In-World Text(Event Player, Custom String("Increase Difficulty (Current: {0})", Event Player.player_DifficultyName),
			Event Player.skyMenu3, 1, Clip Against Surfaces, Visible To Position and String, White, Default Visibility);
		Create In-World Text(Event Player, Custom String("Decrease Kill Quota (Current: {0})", Event Player.player_KillQuota),
			Event Player.skyMenu2, 1, Clip Against Surfaces, Visible To Position and String, White, Default Visibility);
		Create In-World Text(Event Player, Custom String("Increase Kill Quota (Current: {0})", Event Player.player_KillQuota),
			Event Player.skyMenu4, 1, Clip Against Surfaces, Visible To Position and String, White, Default Visibility);
		Create In-World Text(Event Player, Custom String("Cycle Hero Type (Current: {0})", Event Player.player_CurrentHeroGroupName),
			Event Player.skyMenu0, 1, Clip Against Surfaces, Visible To Position and String, White, Default Visibility);
	}
}

rule("Sky Menu Looking At")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is In View Angle(Event Player, Event Player.skyMenu0, 28) == True;
		Is Alive(Event Player) == True;
		Y Component Of(Position Of(Players In Slot(Slot Of(Event Player), Team 2))) < 5;
	}

	actions
	{
		Wait(0.300, Abort When False);
		Skip If(Has Status(Players In Slot(Slot Of(Event Player), Team 2), Phased Out), 1);
		Set Status(Event Player, Null, Phased Out, 2);
		Wait(1, Ignore Condition);
		Loop If Condition Is True;
		Clear Status(Event Player, Phased Out);
	}
}

rule("Sky Menu Increase Difficulty")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is Game In Progress == True;
		Is In View Angle(Event Player, Event Player.skyMenu3, 10) == True;
		Is Button Held(Event Player, Interact) == True;
		Event Player.player_Difficulty < Global.difficultyAIHard;
	}

	actions
	{
		Play Effect(Event Player, Explosion Sound, White, Event Player, 15);
		Event Player.player_Difficulty += 1;
		Wait(1.250, Restart When True);
		Call Subroutine(player_SetDifficulty);
	}
}

rule("Sky Menu Decrease Difficulty")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is Game In Progress == True;
		Is In View Angle(Event Player, Event Player.skyMenu1, 10) == True;
		Is Button Held(Event Player, Interact) == True;
		Event Player.player_Difficulty > Global.difficultyEasy;
	}

	actions
	{
		Play Effect(Event Player, Explosion Sound, White, Event Player, 15);
		Event Player.player_Difficulty -= 1;
		Wait(1.250, Restart When True);
		Call Subroutine(player_SetDifficulty);
	}
}

rule("Sky Menu Increase Kill Quota")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is Game In Progress == True;
		Is In View Angle(Event Player, Event Player.skyMenu4, 10) == True;
		Event Player.player_KillQuota < 30;
		Is Button Held(Event Player, Interact) == True;
	}

	actions
	{
		Play Effect(Event Player, Explosion Sound, White, Event Player, 15);
		Event Player.player_KillQuota += 2;
		Wait(1.500, Restart When True);
		Event Player.currentKillNumber = 0;
		Call Subroutine(setEnemyDistanceModifier);
	}
}

rule("Sky Menu Decrease Kill Quota")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is Game In Progress == True;
		Is In View Angle(Event Player, Event Player.skyMenu2, 10) == True;
		Event Player.player_KillQuota > 2;
		Is Button Held(Event Player, Interact) == True;
	}

	actions
	{
		Play Effect(Event Player, Explosion Sound, White, Event Player, 15);
		Event Player.player_KillQuota -= 2;
		Wait(1.500, Restart When True);
		Event Player.currentKillNumber = 0;
		Call Subroutine(setEnemyDistanceModifier);
	}
}

rule("Bot Subroutine: botAI_WASD")
{
	event
	{
		Subroutine;
		botAI_WASD;
	}

	actions
	{
		Start Throttle In Direction(Players In Slot(Slot Of(Event Player), Team 2), Players In Slot(Slot Of(Event Player), Team 2)
			.botAI_ThrottleDir, 1, To Player, Replace existing throttle, Direction and Magnitude);
		Wait(Random Real(0.100, 0.750), Ignore Condition);
	}
}

rule("Bot Subroutine: botAI_Crouch")
{
	event
	{
		Subroutine;
		botAI_Crouch;
	}

	actions
	{
		Wait(0.250, Ignore Condition);
		Skip If(Random Real(0, 1) > 0.200, 3);
		Stop Holding Button(Players In Slot(Slot Of(Event Player), Team 2), Crouch);
		Start Holding Button(Players In Slot(Slot Of(Event Player), Team 2), Crouch);
		Wait(Random Real(0.100, 0.500), Ignore Condition);
		Stop Holding Button(Players In Slot(Slot Of(Event Player), Team 2), Crouch);
	}
}

rule("Bot Subroutine: botAI_Jump")
{
	event
	{
		Subroutine;
		botAI_Jump;
	}

	actions
	{
		Skip If(Random Real(0, 1) > 0.200, 1);
		Press Button(Players In Slot(Slot Of(Event Player), Team 2), Jump);
		Wait(Random Real(0.100, 1.250), Ignore Condition);
	}
}

rule("Hard Mode WASD")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Event Player.player_Difficulty == Global.difficultyHard;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 2)) == True;
	}

	actions
	{
		Players In Slot(Slot Of(Event Player), Team 2).botAI_ThrottleDir = Random Value In Array(Global.moveDirAll);
		Start Rule(botAI_WASD, Do Nothing);
		Start Rule(botAI_Crouch, Do Nothing);
		Start Rule(botAI_Jump, Do Nothing);
		Wait(0.250, Ignore Condition);
		Loop If Condition Is True;
		Stop Throttle In Direction(Players In Slot(Slot Of(Event Player), Team 2));
		Stop Holding Button(Players In Slot(Slot Of(Event Player), Team 2), Crouch);
		Stop Holding Button(Players In Slot(Slot Of(Event Player), Team 2), Jump);
	}
}

rule("Normal Mode WASD")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Event Player.player_Difficulty == Global.difficultyMedium;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 2)) == True;
		Event Player.currentKillNumber >= Event Player.player_KillQuota / 2;
	}

	actions
	{
		Players In Slot(Slot Of(Event Player), Team 2).botAI_ThrottleDir = Random Value In Array(Global.moveDirForwards);
		Start Rule(botAI_WASD, Do Nothing);
		Start Rule(botAI_Crouch, Do Nothing);
		Start Rule(botAI_Jump, Do Nothing);
		Wait(0.250, Ignore Condition);
		Loop If Condition Is True;
		Stop Throttle In Direction(Players In Slot(Slot Of(Event Player), Team 2));
		Stop Holding Button(Players In Slot(Slot Of(Event Player), Team 2), Crouch);
		Stop Holding Button(Players In Slot(Slot Of(Event Player), Team 2), Jump);
	}
}

rule("Easy Mode WASD")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Event Player.player_Difficulty == Global.difficultyEasy;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 2)) == True;
		Event Player.currentKillNumber >= Event Player.player_KillQuota / 2;
	}

	actions
	{
		Start Throttle In Direction(Players In Slot(Slot Of(Event Player), Team 2), Forward, 1, To Player, Replace existing throttle,
			Direction and Magnitude);
		Wait(1, Ignore Condition);
		Loop If Condition Is True;
		Stop Throttle In Direction(Players In Slot(Slot Of(Event Player), Team 2));
	}
}

rule("AI Subroutine: botAI_MoveTowardsAnchor")
{
	event
	{
		Subroutine;
		botAI_MoveTowardsAnchor;
	}

	actions
	{
		Players In Slot(Slot Of(Event Player), Team 2).botAI_MoveWASD_Enabled = False;
		Start Throttle In Direction(Players In Slot(Slot Of(Event Player), Team 2), Direction Towards(Players In Slot(Slot Of(
			Event Player), Team 2), Players In Slot(Slot Of(Event Player), Team 2).botAI_Anchor_Position), 1, To World,
			Replace existing throttle, Direction and Magnitude);
		While(Distance Between(Players In Slot(Slot Of(Event Player), Team 2), Players In Slot(Slot Of(Event Player), Team 2)
			.botAI_Anchor_Position) > 0.500);
			Wait(0.500, Ignore Condition);
		End;
		Players In Slot(Slot Of(Event Player), Team 2).botAI_MoveWASD_Enabled = True;
	}
}

rule("AI Move Towards Anchor")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Event Player.botAI_Anchor_Enabled == True;
		Distance Between(Event Player, Event Player.botAI_Anchor_Position) > Event Player.botAI_Anchor_DriftMax;
	}

	actions
	{
		Start Rule(botAI_MoveTowardsAnchor, Do Nothing);
	}
}

rule("AI Move Around Anchor")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Event Player.botAI_Anchor_Enabled == True;
		Distance Between(Event Player, Event Player.botAI_Anchor_Position) <= Event Player.botAI_Anchor_DriftMax;
		disabled Event Player.botAI_MoveWASD_Enabled == True;
	}

	actions
	{
		Event Player.botAI_ThrottleDir = Random Value In Array(Global.moveDirAll);
		Call Subroutine(botAI_WASD);
		Loop If Condition Is True;
	}
}

rule("AI Subroutine: botAI_AIMode_Enable")
{
	event
	{
		Subroutine;
		botAI_AIMode_Enable;
	}

	actions
	{
		Wait(0.500, Abort When False);
		Players In Slot(Slot Of(Event Player), Team 2).botAI_MoveWASD_Enabled = True;
		Players In Slot(Slot Of(Event Player), Team 2).botAI_MoveCrouch_Enabled = True;
		Players In Slot(Slot Of(Event Player), Team 2).botAI_MoveJump_Enabled = True;
		Players In Slot(Slot Of(Event Player), Team 2).botAI_Enabled = True;
	}
}

rule("AI Subroutine: botAI_AIMode_Disable")
{
	event
	{
		Subroutine;
		botAI_AIMode_Disable;
	}

	actions
	{
		Players In Slot(Slot Of(Event Player), Team 2).botAI_Enabled = False;
		Players In Slot(Slot Of(Event Player), Team 2).botAI_MoveWASD_Enabled = False;
		Players In Slot(Slot Of(Event Player), Team 2).botAI_MoveCrouch_Enabled = False;
		Players In Slot(Slot Of(Event Player), Team 2).botAI_MoveJump_Enabled = False;
		Call Subroutine(botAI_Facing_Stop);
	}
}

rule("AI Subroutine: botAI_Throttle_Stop")
{
	event
	{
		Subroutine;
		botAI_Throttle_Stop;
	}

	actions
	{
		"Wait 2 frames before and after"
		Wait(0.033, Ignore Condition);
		Stop Throttle In Direction(Event Player);
		Wait(0.033, Ignore Condition);
	}
}

rule("AI Enable")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Event Player.botAI_Enabled == False;
		Players In Slot(Slot Of(Event Player), Team 1).player_Difficulty >= Global.difficultyAIEasy;
		Is In View Angle(Players In Slot(Slot Of(Event Player), Team 1), Event Player, 12.500) == True;
	}

	actions
	{
		Call Subroutine(botAI_AIMode_Enable);
	}
}

rule("AI Disable")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Players In Slot(Slot Of(Event Player), Team 1).player_Difficulty < Global.difficultyAIEasy;
	}

	actions
	{
		Call Subroutine(botAI_AIMode_Disable);
	}
}

rule("AI Aim Start")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Event Player.botAI_Enabled == True;
		Is Alive(Event Player) == True;
		Has Status(Event Player, Knocked Down) == False;
		Has Status(Event Player, Asleep) == False;
		Has Status(Event Player, Frozen) == False;
		Has Status(Event Player, Stunned) == False;
	}

	actions
	{
		Call Subroutine(botAI_Facing_Reset);
	}
}

rule("AI Aim Stop Status Knocked Down")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Is Alive(Event Player) == True;
		Has Status(Event Player, Knocked Down) == True;
	}

	actions
	{
		Call Subroutine(botAI_Facing_Stop);
	}
}

rule("AI Aim Stop Status Asleep")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Is Alive(Event Player) == True;
		Has Status(Event Player, Asleep) == True;
	}

	actions
	{
		Call Subroutine(botAI_Facing_Stop);
	}
}

rule("AI Aim Stop Status Frozen")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Is Alive(Event Player) == True;
		Has Status(Event Player, Frozen) == True;
	}

	actions
	{
		Call Subroutine(botAI_Facing_Stop);
	}
}

rule("AI Aim Stop Status Stunned")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Is Alive(Event Player) == True;
		Has Status(Event Player, Stunned) == True;
	}

	actions
	{
		Call Subroutine(botAI_Facing_Stop);
	}
}

rule("AI Attack Melee")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
        Event Player.botAI_Enabled == True;
        Event Player.botAI_CanAttack == True;
        Is Alive(Event Player) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) < 2.500;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 45) == True;
		Health(Players In Slot(Slot Of(Event Player), Team 1)) <= 30;
	}

	actions
	{
		Press Button(Event Player, Melee);
	}
}

rule("AI Rule Can Use Abilities")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Has Status(Event Player, Hacked) == False;
		Has Status(Event Player, Knocked Down) == False;
		Has Status(Event Player, Asleep) == False;
		Has Status(Event Player, Frozen) == False;
		Has Status(Event Player, Phased Out) == False;
		Has Status(Event Player, Stunned) == False;
        Is Alive(Event Player) == True;
        Event Player.botAI_Enabled == True;
	}

	actions
	{
		Event Player.botAI_CanUseAbilities = True;
	}
}

rule("AI Rule Can Attack")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Has Status(Event Player, Knocked Down) == False;
		Has Status(Event Player, Asleep) == False;
		Has Status(Event Player, Frozen) == False;
		Has Status(Event Player, Phased Out) == False;
		Has Status(Event Player, Stunned) == False;
        Is Alive(Event Player) == True;
        Event Player.botAI_Enabled == True;
	}

	actions
	{
		Event Player.botAI_CanAttack = True;
	}
}

rule("AI Rule Status Hacked")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Has Status(Event Player, Hacked) == True;
	}

	actions
	{
		Event Player.botAI_CanUseAbilities = False;
	}
}

rule("AI Rule Status Knocked Down")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Has Status(Event Player, Knocked Down) == True;
	}

	actions
	{
		Event Player.botAI_CanUseAbilities = False;
		Event Player.botAI_CanAttack = False;
	}
}

rule("AI Rule Status Asleep")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Has Status(Event Player, Asleep) == True;
	}

	actions
	{
		Event Player.botAI_CanUseAbilities = False;
		Event Player.botAI_CanAttack = False;
	}
}

rule("AI Rule Status Frozen")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Has Status(Event Player, Frozen) == True;
	}

	actions
	{
		Event Player.botAI_CanUseAbilities = False;
		Event Player.botAI_CanAttack = False;
	}
}

rule("AI Rule Status Phased Out")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Has Status(Event Player, Phased Out) == True;
	}

	actions
	{
		Event Player.botAI_CanUseAbilities = False;
		Event Player.botAI_CanAttack = False;
	}
}

rule("AI Rule Status Stunned")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Has Status(Event Player, Stunned) == True;
	}

	actions
	{
		Event Player.botAI_CanUseAbilities = False;
		Event Player.botAI_CanAttack = False;
	}
}

rule("AI Movement WASD Move Closer")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Event Player.botAI_Enabled == True;
		Event Player.botAI_MoveWASD_Enabled == True;
		Is Alive(Event Player) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) >= Event Player.botAI_OptimalDistance;
	}

	actions
	{
		If(Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1))
			> Event Player.botAI_OptimalDistance + Event Player.botAI_Throttle_StrafeDistanceMod);
			Event Player.botAI_ThrottleDir = Random Value In Array(Global.moveDirForwardsNoStrafe);
		Else;
			Event Player.botAI_ThrottleDir = Random Value In Array(Global.moveDirForwards);
		End;
		Call Subroutine(botAI_WASD);
		Loop If Condition Is True;
		Stop Throttle In Direction(Event Player);
	}
}

rule("AI Movement WASD Move Farther")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Event Player.botAI_Enabled == True;
		Event Player.botAI_MoveWASD_Enabled == True;
		Is Alive(Event Player) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) < Event Player.botAI_OptimalDistance;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1).player_Home) < Players In Slot(Slot Of(Event Player),
			Team 1).player_EnemyDistanceMax - 1;
	}

	actions
	{
		Event Player.botAI_ThrottleDir = Random Value In Array(Global.moveDirBackwards);
		Call Subroutine(botAI_WASD);
		Loop If Condition Is True;
		Stop Throttle In Direction(Event Player);
	}
}

rule("AI Movement WASD Optimal Distance Resize")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Event Player.botAI_Enabled == True;
		Event Player.botAI_MoveWASD_Enabled == True;
		Is Alive(Event Player) == True;
		Event Player.botAI_OptimalDistance > Players In Slot(Slot Of(Event Player), Team 1).player_EnemyDistanceMax - 1;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1).player_Home) > Players In Slot(Slot Of(Event Player),
			Team 1).player_EnemyDistanceMax - 1;
	}

	actions
	{
		Event Player.botAI_ThrottleDir = Random Value In Array(Global.moveDirForwards);
		Call Subroutine(botAI_WASD);
		Loop If Condition Is True;
		Stop Throttle In Direction(Event Player);
	}
}

rule("AI Movement Crouch")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Event Player.botAI_Enabled == True;
		Event Player.botAI_MoveCrouch_Enabled == True;
		Is Alive(Event Player) == True;
		Is In Air(Event Player) == False;
	}

	actions
	{
		Call Subroutine(botAI_Crouch);
		Loop If Condition Is True;
		Stop Holding Button(Event Player, Crouch);
	}
}

rule("AI Movement Jump")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Event Player.botAI_Enabled == True;
		Event Player.botAI_MoveJump_Enabled == True;
		Is Alive(Event Player) == True;
	}

	actions
	{
		Call Subroutine(botAI_Jump);
		Loop If Condition Is True;
		Stop Holding Button(Event Player, Jump);
	}
}

rule("AI Reaper General")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Reaper;
	}

	conditions
	{
		Is Game In Progress == True;
		Is Alive(Event Player) == True;
		Event Player.botAI_Enabled == True;
	}

	actions
	{
		Event Player.botAI_OptimalDistance = Random Real(3, 7);
		Event Player.botAI_FacingDefault = Global.facingDefault_Body;
	}
}

rule("AI Reaper Attack")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Reaper;
	}

	conditions
	{
		Event Player.botAI_Enabled == True;
		Is Using Ability 1(Event Player) == False;
		Event Player.botAI_CanAttack == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 20;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 15) == True;
	}

	actions
	{
		Skip If(Is Button Held(Event Player, Primary Fire), 1);
		Start Holding Button(Event Player, Primary Fire);
		Wait(0.500, Ignore Condition);
		Loop If Condition Is True;
		Stop Holding Button(Event Player, Primary Fire);
	}
}

rule("AI Reaper Wraith Form")
{
	event
	{
		Player Took Damage;
		Team 2;
		Reaper;
	}

	conditions
	{
		Event Player.botAI_Enabled == True;
		Event Player.botAI_CanUseAbilities == True;
		Health(Event Player) < 75;
		Ability Cooldown(Event Player, Button(Ability 1)) == 0;
	}

	actions
	{
		Press Button(Event Player, Ability 1);
		Wait(Random Real(2, 3), Ignore Condition);
		Press Button(Event Player, Primary Fire);
	}
}

rule("AI Reaper Death Blossom")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Reaper;
	}

	conditions
	{
		Event Player.botAI_Enabled == True;
		Event Player.botAI_CanUseAbilities == True;
		Ultimate Charge Percent(Event Player) == 100;
		Health(Players In Slot(Slot Of(Event Player), Team 1)) >= 100;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) < 8;
	}

	actions
	{
		Press Button(Event Player, Ultimate);
	}
}

rule("AI Tracer General")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Tracer;
	}

	conditions
	{
		Is Game In Progress == True;
		Is Alive(Event Player) == True;
		Event Player.botAI_Enabled == True;
	}

	actions
	{
		Event Player.botAI_OptimalDistance = Random Real(4.500, 6.500);
		Event Player.botAI_Resource_2 = 3;
		Event Player.botAI_Cooldown_Ability1 = 3;
		Event Player.botAI_FacingDefault = Global.facingDefault_Body;
	}
}

rule("AI Tracer Attack")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Tracer;
	}

	conditions
	{
		Event Player.botAI_Enabled == True;
		Event Player.botAI_CanAttack == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 23;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 15) == True;
	}

	actions
	{
		Skip If(Is Button Held(Event Player, Primary Fire), 1);
		Start Holding Button(Event Player, Primary Fire);
		Wait(0.250, Ignore Condition);
		Loop If Condition Is True;
		Stop Holding Button(Event Player, Primary Fire);
	}
}

rule("AI Tracer Blink")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Tracer;
	}

	conditions
	{
		Event Player.botAI_Enabled == True;
		Event Player.botAI_CanUseAbilities == True;
		Is Alive(Event Player) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 15;
		Is In View Angle(Players In Slot(Slot Of(Event Player), Team 1), Event Player, 10) == True;
		Event Player.botAI_Resource_2 >= 1;
	}

	actions
	{
		Skip If(Random Real(0, 1) > 0.750, 7);
		Event Player.botAI_MoveWASD_Enabled = False;
		Start Throttle In Direction(Event Player, Random Value In Array(Global.moveDirForwards), 1, To Player, Replace existing throttle,
			Direction and Magnitude);
		Wait(0.100, Ignore Condition);
		Press Button(Event Player, Ability 1);
		Event Player.botAI_UseTime_Ability1 = Total Time Elapsed;
		Event Player.botAI_Resource_2 -= 1;
		Event Player.botAI_MoveWASD_Enabled = True;
		Wait(Random Real(0.500, 3), Abort When False);
		Loop If Condition Is True;
	}
}

rule("AI Tracer Blink Recharge")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Tracer;
	}

	conditions
	{
		Event Player.botAI_Enabled == True;
		Event Player.botAI_Resource_2 < 3;
		Is Alive(Event Player) == True;
	}

	actions
	{
		Wait(Event Player.botAI_Cooldown_Ability1, Ignore Condition);
		Event Player.botAI_Resource_2 += 1;
		Loop If Condition Is True;
	}
}

rule("AI Tracer Recall")
{
	event
	{
		Player Took Damage;
		Team 2;
		Tracer;
	}

	conditions
	{
		Event Player.botAI_Enabled == True;
		Event Player.botAI_CanUseAbilities == True;
		Is Alive(Event Player) == True;
		Health(Event Player) < 70;
		Ability Cooldown(Event Player, Button(Ability 2)) == 0;
	}

	actions
	{
		disabled Skip If(Random Real(0, 1) >= 0.850, 1);
		Press Button(Event Player, Ability 2);
	}
}

rule("AI Tracer Pulse Bomb")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Tracer;
	}

	conditions
	{
		Event Player.botAI_Enabled == True;
		Event Player.botAI_CanUseAbilities == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Health(Players In Slot(Slot Of(Event Player), Team 1)) >= 100;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 4;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 5) == True;
		Ultimate Charge Percent(Event Player) == 100;
	}

	actions
	{
		Press Button(Event Player, Ultimate);
		Wait(0.150, Ignore Condition);
		If(Event Player.botAI_Resource_2 > 0);
			Start Throttle In Direction(Event Player, Random Value In Array(Global.moveDirBackwards), 1, To Player, Replace existing throttle,
				Direction and Magnitude);
			Wait(0.100, Ignore Condition);
			Press Button(Event Player, Ability 1);
			Event Player.botAI_Resource_2 -= 1;
			Stop Throttle In Direction(Event Player);
		End;
	}
}

rule("AI Mercy General")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Mercy;
	}

	conditions
	{
		Is Game In Progress == True;
		Is Alive(Event Player) == True;
		Event Player.botAI_Enabled == True;
	}

	actions
	{
		Event Player.botAI_OptimalDistance = Random Real(8, 12);
		Event Player.botAI_FacingDefault = Global.facingDefault_Body;
	}
}

rule("AI Mercy Attack")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Mercy;
	}

	conditions
	{
		Event Player.botAI_Enabled == True;
		Event Player.botAI_CanAttack == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 10) == True;
	}

	actions
	{
		Skip If(Is Button Held(Event Player, Primary Fire), 1);
		Start Holding Button(Event Player, Primary Fire);
		Wait(0.500, Ignore Condition);
		Loop If Condition Is True;
		Stop Holding Button(Event Player, Primary Fire);
	}
}

rule("AI Mercy Valkyrie Start")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Mercy;
	}

	conditions
	{
		Event Player.botAI_Enabled == True;
		Event Player.botAI_CanUseAbilities == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Ultimate Charge Percent(Event Player) == 100;
	}

	actions
	{
		Press Button(Event Player, Ultimate);
	}
}

rule("AI Mercy Valkyrie Movement")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Mercy;
	}

	conditions
	{
		Event Player.botAI_Enabled == True;
		Is Alive(Event Player) == True;
		Is Using Ultimate(Event Player) == True;
	}

	actions
	{
		Event Player.botAI_OptimalDistance = Random Real(12, 16);
		Event Player.botAI_MoveCrouch_Enabled = False;
		Event Player.botAI_MoveWASD_Enabled = False;
		Call Subroutine(botAI_Throttle_Stop);
		Call Subroutine(botAI_Facing_Stop);
		Start Facing(Event Player, Direction From Angles(0, Random Real(-90, -80)), Random Integer(270, 360), To World,
			Direction and Turn Rate);
		Start Throttle In Direction(Event Player, Vector(0, 0, 1), 1, To Player, Replace existing throttle, Direction and Magnitude);
		Wait(Random Real(0.500, 1.250), Ignore Condition);
		Call Subroutine(botAI_Facing_Reset);
		Start Throttle In Direction(Event Player, Vector(0, 0, -1), 1, To Player, Replace existing throttle, Direction and Magnitude);
		Wait(Random Real(0.500, 1.250), Ignore Condition);
		Event Player.botAI_MoveWASD_Enabled = True;
		While(Is Using Ultimate(Event Player) == True);
			Wait(0.500, Ignore Condition);
		End;
		Event Player.botAI_MoveCrouch_Enabled = True;
		Event Player.botAI_OptimalDistance = Random Real(8, 12);
	}
}

rule("AI Hanzo General")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Hanzo;
	}

	conditions
	{
		Is Game In Progress == True;
		Is Alive(Event Player) == True;
		Event Player.botAI_Enabled == True;
	}

	actions
	{
		Event Player.botAI_OptimalDistance = Random Real(15, 20);
		Event Player.botAI_ProjectileSpeed_Primary = 110;
		Event Player.botAI_FacingDefault = Global.facingDefault_Head;
	}
}

rule("AI Hanzo Attack")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Hanzo;
	}

	conditions
	{
		Event Player.botAI_Enabled == True;
		Event Player.botAI_CanAttack == True;
		Is Using Ability 2(Event Player) == False;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 15) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 40;
	}

	actions
	{
		Start Holding Button(Event Player, Primary Fire);
		Wait(Random Real(1.250, 1.750), Ignore Condition);
		Stop Holding Button(Event Player, Primary Fire);
		Loop If Condition Is True;
		Stop Holding Button(Event Player, Primary Fire);
	}
}

rule("AI Hanzo Sonic Arrow")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Hanzo;
	}

	conditions
	{
		Event Player.botAI_Enabled == True;
		Event Player.botAI_CanUseAbilities == True;
		Is Using Ability 2(Event Player) == False;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 10) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 20;
		Ability Cooldown(Event Player, Button(Ability 1)) == 0;
	}

	actions
	{
		Press Button(Event Player, Ability 1);
	}
}

rule("AI Hanzo Storm Arrows Start")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Hanzo;
	}

	conditions
	{
		Event Player.botAI_Enabled == True;
		Event Player.botAI_CanUseAbilities == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 15;
		Health(Players In Slot(Slot Of(Event Player), Team 1)) >= 100;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 15) == True;
		Ability Cooldown(Event Player, Button(Ability 2)) == 0;
	}

	actions
	{
		Press Button(Event Player, Ability 2);
	}
}

rule("AI Hanzo Storm Arrows Fire")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Hanzo;
	}

	conditions
	{
		Event Player.botAI_Enabled == True;
		Event Player.botAI_CanUseAbilities == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 7.500) == True;
		Is Using Ability 2(Event Player) == True;
	}

	actions
	{
		Press Button(Event Player, Primary Fire);
		Wait(0.350, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("AI Hanzo Dragonstrike")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Hanzo;
	}

	conditions
	{
		Event Player.botAI_Enabled == True;
		Event Player.botAI_CanUseAbilities == True;
		Is Using Ability 2(Event Player) == False;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 15) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 15;
		Ultimate Charge Percent(Event Player) == 100;
	}

	actions
	{
		Press Button(Event Player, Ultimate);
	}
}

rule("AI Torbjorn General")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Torbjörn;
	}

	conditions
	{
		Is Game In Progress == True;
		Is Alive(Event Player) == True;
		Event Player.botAI_Enabled == True;
	}

	actions
	{
		Event Player.botAI_OptimalDistance = Random Real(15, 20);
		Event Player.botAI_FacingDefault = Global.facingDefault_Head;
	}
}

rule("AI Torbjorn Attack Primary")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Torbjörn;
	}

	conditions
	{
		Event Player.botAI_Enabled == True;
		Event Player.botAI_CanAttack == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 40;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) > 10;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 15) == True;
		Is Using Ultimate(Event Player) == False;
	}

	actions
	{
		Skip If(Is Button Held(Event Player, Primary Fire), 1);
		Start Holding Button(Event Player, Primary Fire);
		Wait(0.600, Ignore Condition);
		Loop If Condition Is True;
		Stop Holding Button(Event Player, Primary Fire);
	}
}

rule("AI Torbjorn Attack Secondary")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Torbjörn;
	}

	conditions
	{
		Event Player.botAI_Enabled == True;
		Event Player.botAI_CanAttack == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 10;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 25) == True;
		Is Using Ultimate(Event Player) == False;
	}

	actions
	{
		Skip If(Is Button Held(Event Player, Secondary Fire), 1);
		Start Holding Button(Event Player, Secondary Fire);
		Wait(0.600, Ignore Condition);
		Loop If Condition Is True;
		Stop Holding Button(Event Player, Secondary Fire);
	}
}

rule("AI Torbjorn Deploy Turret")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Torbjörn;
	}

	conditions
	{
		Event Player.botAI_Enabled == True;
		Event Player.botAI_CanUseAbilities == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Is Using Ability 1(Event Player) == False;
		Ability Cooldown(Event Player, Button(Ability 1)) == 0;
	}

	actions
	{
		Call Subroutine(botAI_Facing_Stop);
		Start Facing(Event Player, Direction Towards(Event Player, Vector(Random Real(-5, 5), 0, Random Real(0, 1))), 360, To Player,
			None);
		Wait(0.250, Ignore Condition);
		Press Button(Event Player, Ability 1);
		Call Subroutine(botAI_Facing_Reset);
	}
}

rule("AI Torbjorn Overload")
{
	event
	{
		Player Took Damage;
		Team 2;
		Torbjörn;
	}

	conditions
	{
		Event Player.botAI_Enabled == True;
		Event Player.botAI_CanUseAbilities == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Health(Event Player) <= 90;
		Ability Cooldown(Event Player, Button(Ability 2)) == 0;
	}

	actions
	{
		Press Button(Event Player, Ability 2);
	}
}

rule("AI Torbjorn Molten Core")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Torbjörn;
	}

	conditions
	{
		Event Player.botAI_Enabled == True;
		Event Player.botAI_CanUseAbilities == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Ultimate Charge Percent(Event Player) == 100;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 25;
	}

	actions
	{
		Press Button(Event Player, Ultimate);
		For Player Variable(Event Player, index, 10, -2, -1);
			Call Subroutine(botAI_Facing_Stop);
			Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Position Of(Players In Slot(Slot Of(Event Player),
				Team 1)) + Vector(0, Event Player.index + 0.500, 0)), Random Real(270, 360), To World, Direction and Turn Rate);
			Wait(Random Real(0.150, 0.225), Ignore Condition);
			Press Button(Event Player, Primary Fire);
		End;
		Call Subroutine(botAI_Facing_Reset);
	}
}

rule("AI Reinhardt General")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Reinhardt;
	}

	conditions
	{
		Is Game In Progress == True;
		Is Alive(Event Player) == True;
		Event Player.botAI_Enabled == True;
	}

	actions
	{
		Event Player.botAI_OptimalDistance = Random Real(2.250, 4.500);
		Event Player.botAI_FacingDefault = Global.facingDefault_Body;
	}
}

rule("AI Reinhardt Attack")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Reinhardt;
	}

	conditions
	{
		Event Player.botAI_Enabled == True;
		Event Player.botAI_CanAttack == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 6;
		Is Button Held(Event Player, Secondary Fire) == False;
	}

	actions
	{
		Stop Holding Button(Event Player, Secondary Fire);
		Skip If(Is Button Held(Event Player, Primary Fire), 1);
		Start Holding Button(Event Player, Primary Fire);
		Wait(1, Ignore Condition);
		Loop If Condition Is True;
		Stop Holding Button(Event Player, Primary Fire);
	}
}

rule("AI Reinhardt Use Shield")
{
	event
	{
		Player Took Damage;
		Team 2;
		Reinhardt;
	}

	conditions
	{
		Event Player.botAI_Enabled == True;
		Event Player.botAI_CanUseAbilities == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Is In View Angle(Players In Slot(Slot Of(Event Player), Team 1), Event Player, 15) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) > 6;
		Has Status(Players In Slot(Slot Of(Event Player), Team 1), Knocked Down) == False;
	}

	actions
	{
		Wait(0.150, Abort When False);
		Skip If(Random Real(0, 1) > 0.750, 3);
		Start Holding Button(Event Player, Secondary Fire);
		Wait(Random Real(0.500, 3.500), Ignore Condition);
		Stop Holding Button(Event Player, Secondary Fire);
		Loop If Condition Is True;
		Stop Holding Button(Event Player, Secondary Fire);
	}
}

rule("AI Reinhardt Charge Start")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Reinhardt;
	}

	conditions
	{
		Event Player.botAI_Enabled == True;
		Event Player.botAI_CanUseAbilities == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 15) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 10;
		Health(Players In Slot(Slot Of(Event Player), Team 1)) >= 75;
		Y Component Of(Position Of(Players In Slot(Slot Of(Event Player), Team 1))) < 2;
		Y Component Of(Position Of(Event Player)) < 2;
		Ability Cooldown(Event Player, Button(Ability 1)) == 0;
	}

	actions
	{
		Event Player.botAI_Hero_Reinhardt_ChargePos = Position Of(Event Player);
		Press Button(Event Player, Ability 1);
	}
}

rule("AI Reinhardt Charge")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Reinhardt;
	}

	conditions
	{
		Is Alive(Event Player) == True;
		Is Using Ability 1(Event Player) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1).player_Home) >= Players In Slot(Slot Of(
			Event Player), Team 1).player_ZoneRadius - 2.5;
		Distance Between(Event Player.botAI_Hero_Reinhardt_ChargePos, Players In Slot(Slot Of(Event Player), Team 1).player_Home)
			< Players In Slot(Slot Of(Event Player), Team 1).player_ZoneRadius;
	}

	actions
	{
		Call Subroutine(botAI_Facing_Stop);
		Set Status(Event Player, Null, Stunned, 0.650);
		Apply Impulse(Event Player, Vector(0, 0, -1), 10, To Player, Cancel Contrary Motion);
		Apply Impulse(Players In Slot(Slot Of(Event Player), Team 1), Vector(0, 0, -1), 10, To Player, Cancel Contrary Motion);
		If(Has Status(Players In Slot(Slot Of(Event Player), Team 1), Stunned));
			Damage(Players In Slot(Slot Of(Event Player), Team 1), Event Player, 300);
		End;
		Wait(0.650, Ignore Condition);
		Call Subroutine(botAI_Facing_Reset);
	}
}

rule("Special Rule: Player Reinhardt Charge")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Reinhardt;
	}

	conditions
	{
		Is Alive(Event Player) == True;
		Is Using Ability 1(Event Player) == True;
		Distance Between(Event Player, Event Player.player_Home) >= Event Player.player_ZoneRadius - 2.5;
	}

	actions
	{
		Set Status(Event Player, Null, Stunned, 0.650);
		Apply Impulse(Event Player, Vector(0, 0, -1), 10, To Player, Cancel Contrary Motion);
		Apply Impulse(Players In Slot(Slot Of(Event Player), Team 2), Vector(0, 0, -1), 10, To Player, Cancel Contrary Motion);
		If(Has Status(Players In Slot(Slot Of(Event Player), Team 2), Stunned));
			Damage(Players In Slot(Slot Of(Event Player), Team 2), Event Player, 300);
		End;
	}
}

rule("AI Reinhardt Firestrike")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Reinhardt;
	}

	conditions
	{
		Event Player.botAI_Enabled == True;
		Event Player.botAI_CanUseAbilities == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 15) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 20;
		Ability Cooldown(Event Player, Button(Ability 2)) == 0;
	}

	actions
	{
		Stop Holding Button(Event Player, Secondary Fire);
		Wait(0.250, Ignore Condition);
		Call Subroutine(botAI_Facing_Stop);
		Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Position Of(Players In Slot(Slot Of(Event Player),
			Team 1)) + Vector(0, 0.750, 0)), Random Real(270, 360), To World, Direction and Turn Rate);
		Wait(0.250, Ignore Condition);
		Press Button(Event Player, Ability 2);
		Wait(0.600, Ignore Condition);
		Call Subroutine(botAI_Facing_Reset);
	}
}

rule("AI Reinhardt Earthshatter")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Reinhardt;
	}

	conditions
	{
		Event Player.botAI_Enabled == True;
		Event Player.botAI_CanUseAbilities == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Ultimate Charge Percent(Event Player) == 100;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 25) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 17.500;
		Health(Players In Slot(Slot Of(Event Player), Team 1)) >= 100;
		Health(Event Player) >= 100;
		Is On Ground(Event Player) == True;
		Is On Ground(Players In Slot(Slot Of(Event Player), Team 1)) == True;
	}

	actions
	{
		Disallow Button(Event Player, Secondary Fire);
		Press Button(Event Player, Ultimate);
		Wait(0.950, Ignore Condition);
		If(Has Status(Players In Slot(Slot Of(Event Player), Team 1), Knocked Down));
			Event Player.botAI_Throttle_StrafeDistanceMod = 0;
			Event Player.botAI_MoveCrouch_Enabled = False;
			If(Ability Cooldown(Event Player, Button(Ability 1)) == 0);
				Press Button(Event Player, Ability 1);
			End;
			Wait(2.500, Ignore Condition);
			Event Player.botAI_Throttle_StrafeDistanceMod = 5;
			Event Player.botAI_MoveCrouch_Enabled = True;
		End;
		Allow Button(Event Player, Secondary Fire);
	}
}

rule("AI Pharah General")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Pharah;
	}

	conditions
	{
		Is Game In Progress == True;
		Is Alive(Event Player) == True;
		Event Player.botAI_Enabled == True;
	}

	actions
	{
		Event Player.botAI_OptimalDistance = Random Real(9, 12);
		Event Player.botAI_Throttle_StrafeDistanceMod = 10;
		Event Player.botAI_FacingDefault = Global.facingDefault_Position;
	}
}

rule("AI Pharah Hover Jets")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Pharah;
	}

	conditions
	{
		Event Player.botAI_Enabled == True;
		Event Player.botAI_CanUseAbilities == True;
		Is Alive(Event Player) == True;
	}

	actions
	{
		Start Holding Button(Event Player, Secondary Fire);
		Wait(Random Real(0.500, 1.500), Ignore Condition);
		Stop Holding Button(Event Player, Secondary Fire);
		Wait(Random Real(0.500, 1.500), Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("AI Pharah Attack")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Pharah;
	}

	conditions
	{
		Event Player.botAI_Enabled == True;
		Event Player.botAI_CanAttack == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 35;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 7.500) == True;
	}

	actions
	{
		Press Button(Event Player, Primary Fire);
		Wait(0.750, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("AI Pharah Jump Jet")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Pharah;
	}

	conditions
	{
		Event Player.botAI_Enabled == True;
		Event Player.botAI_CanUseAbilities == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Ability Cooldown(Event Player, Button(Ability 1)) == 0;
	}

	actions
	{
		Press Button(Event Player, Ability 1);
	}
}

rule("AI Pharah Concussive Blast")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Pharah;
	}

	conditions
	{
		Event Player.botAI_Enabled == True;
		Event Player.botAI_CanUseAbilities == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 15) == True;
		Ability Cooldown(Event Player, Button(Ability 2)) == 0;
	}

	actions
	{
		Press Button(Event Player, Ability 2);
	}
}

rule("AI Pharah Barrage")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Pharah;
	}

	conditions
	{
		Event Player.botAI_Enabled == True;
		Event Player.botAI_CanUseAbilities == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Ultimate Charge Percent(Event Player) == 100;
		Y Component Of(Position Of(Event Player)) >= 4;
		Y Component Of(Position Of(Event Player)) <= 12;
		Health(Players In Slot(Slot Of(Event Player), Team 1)) >= 125;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 12;
	}

	actions
	{
		Press Button(Event Player, Ultimate);
	}
}

rule("AI Winston General")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Winston;
	}

	conditions
	{
		Is Game In Progress == True;
		Is Alive(Event Player) == True;
		Event Player.botAI_Enabled == True;
	}

	actions
	{
		Event Player.botAI_OptimalDistance = Random Real(3, 6);
		Event Player.botAI_FacingDefault = Global.facingDefault_Body;
	}
}

rule("AI Winston Attack")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Winston;
	}

	conditions
	{
		Event Player.botAI_Enabled == True;
		Event Player.botAI_CanAttack == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 8;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 15) == True;
	}

	actions
	{
		Skip If(Is Button Held(Event Player, Primary Fire), 1);
		Start Holding Button(Event Player, Primary Fire);
		Wait(0.750, Ignore Condition);
		Loop If Condition Is True;
		Stop Holding Button(Event Player, Primary Fire);
	}
}

rule("AI Winston Jump Pack")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Winston;
	}

	conditions
	{
		Event Player.botAI_Enabled == True;
		Event Player.botAI_CanUseAbilities == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) > Event Player.botAI_OptimalDistance + 5;
		Ability Cooldown(Event Player, Button(Ability 1)) == 0;
	}

	actions
	{
		Event Player.botAI_MoveWASD_Enabled = False;
		Start Throttle In Direction(Event Player, Direction Towards(Event Player, Players In Slot(Slot Of(Event Player), Team 1)), 1,
			To World, Replace existing throttle, Direction and Magnitude);
		Call Subroutine(botAI_Facing_Stop);
		Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Position Of(Players In Slot(Slot Of(Event Player),
			Team 1)) + Vector(0, Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) * 0.200, 0)),
			Random Integer(270, 360), To World, Direction and Turn Rate);
		Wait(0.100, Ignore Condition);
		Press Button(Event Player, Ability 1);
		Wait(0.100, Ignore Condition);
		Call Subroutine(botAI_Facing_Reset);
		Event Player.botAI_MoveWASD_Enabled = True;
	}
}

rule("AI Winston Barrier Projector")
{
	event
	{
		Player Took Damage;
		Team 2;
		Winston;
	}

	conditions
	{
		Event Player.botAI_Enabled == True;
		Event Player.botAI_CanUseAbilities == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Health(Event Player) <= 300;
		Ability Cooldown(Event Player, Button(Ability 2)) == 0;
	}

	actions
	{
		Skip If(Random Real(0, 1) >= 0.500, 1);
		Press Button(Event Player, Ability 2);
	}
}

rule("AI Winston Primal Rage")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Winston;
	}

	conditions
	{
		Event Player.botAI_Enabled == True;
		Event Player.botAI_CanUseAbilities == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Ultimate Charge Percent(Event Player) == 100;
		Health(Players In Slot(Slot Of(Event Player), Team 1)) >= 125;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 20;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 15) == True;
	}

	actions
	{
		Press Button(Event Player, Ultimate);
		Event Player.botAI_OptimalDistance = Random Real(1.500, 3);
		Wait(10, Abort When False);
		Event Player.botAI_OptimalDistance = Random Real(3, 6);
	}
}

rule("AI Widowmaker General")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Widowmaker;
	}

	conditions
	{
		Is Game In Progress == True;
		Is Alive(Event Player) == True;
		Event Player.botAI_Enabled == True;
	}

	actions
	{
		Event Player.botAI_OptimalDistance = Random Integer(30, 40);
		Event Player.botAI_Throttle_StrafeDistanceMod = 10;
		Event Player.botAI_FacingDefault = Global.facingDefault_Body;
	}
}

rule("AI Widowmaker Aim Down Sights")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Widowmaker;
	}

	conditions
	{
		Event Player.botAI_Enabled == True;
		Event Player.botAI_CanAttack == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) >= 12;
		Is Using Ability 1(Event Player) == False;
	}

	actions
	{
		Skip If(Is Button Held(Event Player, Secondary Fire), 3);
		Event Player.botAI_MoveJump_Enabled = False;
		Start Holding Button(Event Player, Secondary Fire);
		Call Subroutine(botAI_Facing_Head);
		Wait(0.750, Ignore Condition);
		Loop If Condition Is True;
		Stop Holding Button(Event Player, Secondary Fire);
		Call Subroutine(botAI_Facing_Reset);
		Event Player.botAI_MoveJump_Enabled = True;
	}
}

rule("AI Widowmaker Charge And Fire")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Widowmaker;
	}

	conditions
	{
		Event Player.botAI_Enabled == True;
		Event Player.botAI_CanAttack == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Is Button Held(Event Player, Secondary Fire) == True;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 5) == True;
	}

	actions
	{
		Wait(Random Real(1.300, 1.600), Ignore Condition);
		Call Subroutine(botAI_Facing_FlickIn);
		Press Button(Event Player, Primary Fire);
		Call Subroutine(botAI_Facing_FlickOut);
		Loop If Condition Is True;
	}
}

rule("AI Widowmaker Attack SMG")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Widowmaker;
	}

	conditions
	{
		Event Player.botAI_Enabled == True;
		Event Player.botAI_CanAttack == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) < 12;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 15) == True;
	}

	actions
	{
		Skip If(Is Button Held(Event Player, Primary Fire), 1);
		Start Holding Button(Event Player, Primary Fire);
		Wait(0.500, Ignore Condition);
		Loop If Condition Is True;
		Stop Holding Button(Event Player, Primary Fire);
	}
}

rule("AI Widowmaker Grappling Hook Closer")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Widowmaker;
	}

	conditions
	{
		Event Player.botAI_Enabled == True;
		Event Player.botAI_CanUseAbilities == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Ability Cooldown(Event Player, Button(Ability 1)) == 0;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) > Event Player.botAI_OptimalDistance + 15;
	}

	actions
	{
		Call Subroutine(botAI_Facing_Stop);
		Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Position Of(Event Player) + World Vector Of(Vector(
			Random Real(-8, 8), 0, Random Real(8, 16)), Event Player, Rotation)), Random Integer(450, 540), To World, None);
		Wait(Random Real(0.500, 0.750), Ignore Condition);
		Press Button(Event Player, Ability 1);
		Wait(Random Real(0.500, 0.750), Ignore Condition);
		Call Subroutine(botAI_Facing_Reset);
	}
}

rule("AI Widowmaker Grappling Hook Farther")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Widowmaker;
	}

	conditions
	{
		Event Player.botAI_Enabled == True;
		Event Player.botAI_CanUseAbilities == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Ability Cooldown(Event Player, Button(Ability 1)) == 0;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) < Event Player.botAI_OptimalDistance - 15;
	}

	actions
	{
		Call Subroutine(botAI_Facing_Stop);
		Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Position Of(Event Player) + World Vector Of(Vector(
			Random Real(-8, 8), 0, Random Real(-8, -16)), Event Player, Rotation)), Random Integer(450, 540), To World, None);
		Wait(Random Real(0.500, 0.750), Ignore Condition);
		Press Button(Event Player, Ability 1);
		Wait(Random Real(0.500, 0.7500), Ignore Condition);
		Call Subroutine(botAI_Facing_Reset);
	}
}

rule("AI Widowmaker Venom Mine")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Widowmaker;
	}

	conditions
	{
		Event Player.botAI_Enabled == True;
		Event Player.botAI_CanUseAbilities == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Is Using Ability 1(Event Player) == False;
		Is Using Ability 2(Event Player) == False;
		Ability Cooldown(Event Player, Button(Ability 2)) == 0;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= Event Player.botAI_OptimalDistance;
	}

	actions
	{
		Call Subroutine(botAI_Facing_Stop);
		Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Position Of(Players In Slot(Slot Of(Event Player),
			Team 1)) + Vector(0, Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) * 0.130, 0)),
			Random Integer(270, 360), To World, Direction and Turn Rate);
		Wait(0.250, Ignore Condition);
		Press Button(Event Player, Ability 2);
		Wait(0.150, Ignore Condition);
		Call Subroutine(botAI_Facing_Reset);
	}
}

rule("AI Widowmaker Infra-Sight")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Widowmaker;
	}

	conditions
	{
		Event Player.botAI_Enabled == True;
		Event Player.botAI_CanUseAbilities == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Ultimate Charge Percent(Event Player) == 100;
		Health(Event Player) > 75;
	}

	actions
	{
		Press Button(Event Player, Ultimate);
	}
}

rule("AI Bastion General")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Bastion;
	}

	conditions
	{
		Is Game In Progress == True;
		Is Alive(Event Player) == True;
		Event Player.botAI_Enabled == True;
	}

	actions
	{
		Event Player.botAI_OptimalDistance = Random Real(18, 22);
		Event Player.botAI_FacingDefault = Global.facingDefault_Body;
	}
}

rule("AI Bastion Attack")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Bastion;
	}

	conditions
	{
		Event Player.botAI_Enabled == True;
		Event Player.botAI_CanAttack == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 40;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 15) == True;
		Is Using Ability 1(Event Player) == False;
		Is Firing Secondary(Event Player) == False;
	}

	actions
	{
		Start Holding Button(Event Player, Primary Fire);
		Wait(1, Ignore Condition);
		Loop If Condition Is True;
		Stop Holding Button(Event Player, Primary Fire);
	}
}

rule("AI Bastion Reconfigure")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Bastion;
	}

	conditions
	{
		Event Player.botAI_Enabled == True;
		Event Player.botAI_CanUseAbilities == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= Event Player.botAI_OptimalDistance;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 15) == True;
		Ability Cooldown(Event Player, Button(Ability 1)) == 0;
		Is Moving(Event Player) == True;
	}

	actions
	{
		Press Button(Event Player, Ability 1);
	}
}

rule("AI Bastion Self-Repair")
{
	event
	{
		Player Took Damage;
		Team 2;
		Bastion;
	}

	conditions
	{
		Event Player.botAI_Enabled == True;
		Event Player.botAI_CanUseAbilities == True;
		Is Alive(Event Player) == True;
		Total Time Elapsed >= Event Player.botAI_UseTime_Ability3 + Event Player.botAI_Cooldown_Ability3;
	}

	actions
	{
		Start Holding Button(Event Player, Secondary Fire);
		Wait((Max Health(Event Player) - Health(Event Player)) / 75, Ignore Condition);
		Stop Holding Button(Event Player, Secondary Fire);
		Event Player.botAI_UseTime_Ability3 = Total Time Elapsed;
	}
}

rule("AI Bastion Configuration: Tank")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Bastion;
	}

	conditions
	{
		Event Player.botAI_Enabled == True;
		Event Player.botAI_CanUseAbilities == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Ultimate Charge Percent(Event Player) == 100;
		Health(Event Player) >= 100;
	}

	actions
	{
		Press Button(Event Player, Ultimate);
		Call Subroutine(botAI_Facing_Position);
		Wait(8, Ignore Condition);
		Call Subroutine(botAI_Facing_Reset);
	}
}

rule("AI Symmetra General")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Symmetra;
	}

	conditions
	{
		Is Game In Progress == True;
		Is Alive(Event Player) == True;
		Event Player.botAI_Enabled == True;
	}

	actions
	{
		Event Player.botAI_OptimalDistance = Random Real(6, 10);
		Event Player.botAI_Resource_2 = 3;
        Event Player.botAI_Cooldown_Ability1 = 10;
		Event Player.botAI_FacingDefault = Global.facingDefault_Body;
	}
}

rule("AI Symmetra Attack Primary")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Symmetra;
	}

	conditions
	{
		Event Player.botAI_Enabled == True;
		Event Player.botAI_CanAttack == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 12;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 15) == True;
	}

	actions
	{
		Skip If(Is Button Held(Event Player, Primary Fire), 2);
		Stop Holding Button(Event Player, Secondary Fire);
		Start Holding Button(Event Player, Primary Fire);
		Wait(0.500, Ignore Condition);
		Loop If Condition Is True;
		Stop Holding Button(Event Player, Primary Fire);
	}
}

rule("AI Symmetra Attack Secondary")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Symmetra;
	}

	conditions
	{
		Event Player.botAI_Enabled == True;
		Event Player.botAI_CanAttack == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 40;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) > 12;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 15) == True;
	}

	actions
	{
		Skip If(Is Button Held(Event Player, Secondary Fire), 2);
		Stop Holding Button(Event Player, Primary Fire);
		Start Holding Button(Event Player, Secondary Fire);
		Wait(Random Real(0.500, 1), Ignore Condition);
		Stop Holding Button(Event Player, Primary Fire);
		Loop If Condition Is True;
	}
}

rule("AI Symmetra Sentry Turret")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Symmetra;
	}

	conditions
	{
		Event Player.botAI_Enabled == True;
		Event Player.botAI_CanUseAbilities == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 20;
		Is In View Angle(Players In Slot(Slot Of(Event Player), Team 1), Event Player, 15) == True;
        Event Player.botAI_Resource_2 > 0;
		Ability Cooldown(Event Player, Button(Ability 1)) == 0;
	}

	actions
	{
		Call Subroutine(botAI_Facing_Stop);
		Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Position Of(Players In Slot(Slot Of(Event Player),
			Team 1)) + Vector(Random Real(-8, 8), 0, Random Real(-8, 8))), Random Integer(450, 540), To World, None);
		Wait(0.5, Ignore Condition);
		Press Button(Event Player, Ability 1);
        Event Player.botAI_Resource_2 -= 1;
		Wait(0.25, Ignore Condition);
		Call Subroutine(botAI_Facing_Reset);
	}
}

rule("AI Symmetra Sentry Turret Recharge")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Symmetra;
	}

	conditions
	{
		Event Player.botAI_Enabled == True;
		Event Player.botAI_Resource_2 < 3;
	}

	actions
	{
		Wait(Event Player.botAI_Cooldown_Ability1, Ignore Condition);
		Event Player.botAI_Resource_2 += 1;
		Loop If Condition Is True;
	}
}

rule("AI Symmetra Photon Barrier")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Symmetra;
	}

	conditions
	{
		Event Player.botAI_Enabled == True;
		Event Player.botAI_CanUseAbilities == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Ultimate Charge Percent(Event Player) == 100;
	}

	actions
	{
		Press Button(Event Player, Ultimate);
		Wait(0.100, Ignore Condition);
		Press Button(Event Player, Ultimate);
		Wait(0.100, Ignore Condition);
		Press Button(Event Player, Primary Fire);
	}
}

rule("AI Zenyatta General")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Zenyatta;
	}

	conditions
	{
		Is Game In Progress == True;
		Is Alive(Event Player) == True;
		Event Player.botAI_Enabled == True;
	}

	actions
	{
		Event Player.botAI_OptimalDistance = Random Real(12, 16);
		Event Player.botAI_FacingDefault = Global.facingDefault_Body;
	}
}

rule("AI Zenyatta Attack Primary")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Zenyatta;
	}

	conditions
	{
		Event Player.botAI_Enabled == True;
		Event Player.botAI_CanAttack == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Is Button Held(Event Player, Secondary Fire) == False;
		Is Using Ultimate(Event Player) == False;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 35;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 15) == True;
	}

	actions
	{
		Skip If(Is Button Held(Event Player, Primary Fire), 1);
		Start Holding Button(Event Player, Primary Fire);
		Wait(0.400, Ignore Condition);
		Loop If Condition Is True;
		Stop Holding Button(Event Player, Primary Fire);
	}
}

rule("AI Zenyatta Attack Secondary")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Zenyatta;
	}

	conditions
	{
		Event Player.botAI_Enabled == True;
		Event Player.botAI_CanAttack == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Is Using Ultimate(Event Player) == False;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 12;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) >= 10;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 15) == True;
	}

	actions
	{
		Stop Holding Button(Event Player, Primary Fire);
		Skip If(Is Button Held(Event Player, Secondary Fire), 1);
		Start Holding Button(Event Player, Secondary Fire);
		Wait(2.500, Ignore Condition);
		Stop Holding Button(Event Player, Secondary Fire);
	}
}

rule("AI Zenyatta Orb of Discord")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Zenyatta;
	}

	conditions
	{
		Event Player.botAI_Enabled == True;
		Event Player.botAI_CanUseAbilities == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 10) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 75;
	}

	actions
	{
		Press Button(Event Player, Ability 2);
	}
}

rule("AI Zenyatta Transcendence")
{
	event
	{
		Player Took Damage;
		Team 2;
		Zenyatta;
	}

	conditions
	{
		Event Player.botAI_Enabled == True;
		Event Player.botAI_CanUseAbilities == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Ultimate Charge Percent(Event Player) == 100;
		Health(Event Player) < 50;
	}

	actions
	{
		Press Button(Event Player, Ultimate);
	}
}

rule("AI Genji General")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Genji;
	}

	conditions
	{
		Is Game In Progress == True;
		Is Alive(Event Player) == True;
		Event Player.botAI_Enabled == True;
	}

	actions
	{
		Event Player.botAI_OptimalDistance = Random Real(7, 14);
		Event Player.botAI_FacingDefault = Global.facingDefault_Body;
	}
}

rule("AI Genji Attack Primary")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Genji;
	}

	conditions
	{
		Event Player.botAI_Enabled == True;
		Event Player.botAI_CanAttack == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 35;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) >= 5;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 15) == True;
		Is Using Ability 1(Event Player) == False;
		Is Using Ability 2(Event Player) == False;
		Is Using Ultimate(Event Player) == False;
	}

	actions
	{
		Skip If(Is Button Held(Event Player, Primary Fire), 1);
		Start Holding Button(Event Player, Primary Fire);
		Wait(1, Ignore Condition);
		Loop If Condition Is True;
		Stop Holding Button(Event Player, Primary Fire);
	}
}

rule("AI Genji Attack Secondary")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Genji;
	}

	conditions
	{
		Event Player.botAI_Enabled == True;
		Event Player.botAI_CanAttack == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 6;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 15) == True;
		Is Using Ability 1(Event Player) == False;
		Is Using Ability 2(Event Player) == False;
		Is Using Ultimate(Event Player) == False;
		Health(Players In Slot(Slot Of(Event Player), Team 1)) <= 175;
	}

	actions
	{
		Skip If(Is Button Held(Event Player, Secondary Fire), 1);
		Start Holding Button(Event Player, Secondary Fire);
		Wait(0.750, Ignore Condition);
		Loop If Condition Is True;
		Stop Holding Button(Event Player, Secondary Fire);
	}
}

rule("AI Genji Deflect")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Genji;
	}

	conditions
	{
		Event Player.botAI_Enabled == True;
		Event Player.botAI_CanUseAbilities == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 25;
		Is In View Angle(Players In Slot(Slot Of(Event Player), Team 1), Event Player, 7.500) == True;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 15) == True;
		Ability Cooldown(Event Player, Button(Ability 2)) == 0;
		Is Using Ability 1(Event Player) == False;
		Array Contains(Global.projectileHeroes, Hero Of(Players In Slot(Slot Of(Event Player), Team 1))) == True;
		Is Button Held(Players In Slot(Slot Of(Event Player), Team 1), Primary Fire) == True;
	}

	actions
	{
		Skip If(Random Real(0, 1) > 0.600, 1);
		Press Button(Event Player, Ability 2);
	}
}

rule("AI Genji Swift Strike Movement")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Genji;
	}

	conditions
	{
		Event Player.botAI_Enabled == True;
		Event Player.botAI_CanUseAbilities == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) < 15;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 15) == True;
		Is Using Ability 2(Event Player) == False;
		Ultimate Charge Percent(Event Player) < 85;
		Ability Cooldown(Event Player, Button(Ability 1)) == 0;
		Is Using Ultimate(Event Player) == False;
	}

	actions
	{
		Skip If(Random Real(0, 1) > 0.500, 1);
		Press Button(Event Player, Ability 1);
	}
}

rule("AI Genji Swift Strike Final")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Genji;
	}

	conditions
	{
		Event Player.botAI_Enabled == True;
		Event Player.botAI_CanUseAbilities == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 12.500;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 15) == True;
		Ability Cooldown(Event Player, Button(Ability 1)) == 0;
		Is Using Ability 2(Event Player) == False;
		Health(Players In Slot(Slot Of(Event Player), Team 1)) <= 50;
	}

	actions
	{
		Press Button(Event Player, Ability 1);
	}
}

rule("AI Genji Dragonblade Pre Swift Strike")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Genji;
	}

	conditions
	{
		Event Player.botAI_Enabled == True;
		Event Player.botAI_CanUseAbilities == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Ultimate Charge Percent(Event Player) == 100;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 25;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 20) == True;
		Is Using Ability 2(Event Player) == False;
		Health(Players In Slot(Slot Of(Event Player), Team 1)) >= 50;
		Health(Event Player) >= 75;
		Ability Cooldown(Event Player, Button(Ability 1)) == 0;
	}

	actions
	{
		Call Subroutine(botAI_Facing_Stop);
		Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Position Of(Players In Slot(Slot Of(Event Player),
			Team 1)) + World Vector Of(Vector(0, Random Real(7.500, 15), 0), Players In Slot(Slot Of(Event Player), Team 1), Rotation)),
			Random Real(270, 360), To World, None);
		Wait(0.250, Ignore Condition);
		Press Button(Event Player, Ability 1);
		Wait(0.300, Ignore Condition);
		Call Subroutine(botAI_Facing_Reset);
	}
}

rule("AI Genji Dragonblade")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Genji;
	}

	conditions
	{
		Event Player.botAI_Enabled == True;
		Event Player.botAI_CanUseAbilities == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Ultimate Charge Percent(Event Player) == 100;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 25;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 20) == True;
		Is Using Ability 2(Event Player) == False;
		Health(Players In Slot(Slot Of(Event Player), Team 1)) >= 50;
		Health(Event Player) >= 75;
		Is In Air(Event Player) == True;
	}

	actions
	{
		Press Button(Event Player, Ultimate);
		Event Player.botAI_OptimalDistance = Random Real(1.500, 4.500);
		Wait(6, Ignore Condition);
		Event Player.botAI_OptimalDistance = Random Real(7, 14);
	}
}

rule("AI Genji Dragonblade Swift Strike Gap Closer")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Genji;
	}

	conditions
	{
		Event Player.botAI_Enabled == True;
		Event Player.botAI_CanUseAbilities == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Is Using Ultimate(Event Player) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) > 5.500;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 45) == True;
		Is Using Ability 2(Event Player) == False;
		Ability Cooldown(Event Player, Button(Ability 1)) == 0;
	}

	actions
	{
		Call Subroutine(botAI_Facing_Stop);
		Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Position Of(Players In Slot(Slot Of(Event Player),
			Team 1)) + World Vector Of(Vector(0, Random Real(0, 5), 0), Players In Slot(Slot Of(Event Player), Team 1), Rotation)),
			Random Real(270, 360), To World, None);
		Wait(0.250, Ignore Condition);
		Press Button(Event Player, Ability 1);
		Wait(0.300, Ignore Condition);
		Call Subroutine(botAI_Facing_Reset);
	}
}

rule("AI Genji Dragonblade Swing")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Genji;
	}

	conditions
	{
		Event Player.botAI_Enabled == True;
		Event Player.botAI_CanAttack == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 8;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 15) == True;
		Is Using Ability 2(Event Player) == False;
		Is Using Ultimate(Event Player) == True;
	}

	actions
	{
		Skip If(Is Button Held(Event Player, Primary Fire), 1);
		Start Holding Button(Event Player, Primary Fire);
		Wait(0.900, Ignore Condition);
		Loop If Condition Is True;
		Stop Holding Button(Event Player, Primary Fire);
	}
}

rule("AI Genji Double Jump")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Genji;
	}

	conditions
	{
		Event Player.botAI_Enabled == True;
		Is Alive(Event Player) == True;
		Is In Air(Event Player) == True;
	}

	actions
	{
		Skip If(Random Real(0, 1) > 0.800, 2);
		Wait(Random Real(0.200, 0.400), Ignore Condition);
		Press Button(Event Player, Jump);
	}
}

rule("AI Roadhog General")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Roadhog;
	}

	conditions
	{
		Is Game In Progress == True;
		Is Alive(Event Player) == True;
		Event Player.botAI_Enabled == True;
	}

	actions
	{
		Event Player.botAI_OptimalDistance = Random Real(9, 12);
		Event Player.botAI_FacingDefault = Global.facingDefault_Body;
		If(Event Player.currentKillNumber == 0 && Players In Slot(Slot Of(Event Player), Team 1).currentKillNumber == 0);
			Event Player.botAI_Resource_1 = 6;
		End;
	}
}

rule("AI Roadhog Attack Primary")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Roadhog;
	}

	conditions
	{
		Event Player.botAI_Enabled == True;
		Event Player.botAI_CanAttack == True;
		Event Player.botAI_Resource_1 > 0;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 15;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 20) == True;
		Is Using Ability 2(Event Player) == False;
	}

	actions
	{
		Skip If(Is Button Held(Event Player, Primary Fire), 1);
		Start Holding Button(Event Player, Primary Fire);
		Event Player.botAI_Resource_1 -= 1;
		Wait(0.700, Ignore Condition);
		Loop If Condition Is True;
		Stop Holding Button(Event Player, Primary Fire);
	}
}

rule("AI Roadhog Attack Secondary")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Roadhog;
	}

	conditions
	{
		Event Player.botAI_Enabled == True;
		Event Player.botAI_CanAttack == True;
		Event Player.botAI_Resource_1 > 0;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) > 15;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 38;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 20) == True;
		Is Using Ability 2(Event Player) == False;
	}

	actions
	{
		Skip If(Is Button Held(Event Player, Secondary Fire), 1);
		Start Holding Button(Event Player, Secondary Fire);
		Event Player.botAI_Resource_1 -= 1;
		Wait(0.700, Ignore Condition);
		Loop If Condition Is True;
		Stop Holding Button(Event Player, Secondary Fire);
	}
}

rule("AI Roadhog Reload")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Roadhog;
	}

	conditions
	{
		Event Player.botAI_Enabled == True;
		Event Player.botAI_CanAttack == True;
		Is Alive(Event Player) == True;
		Event Player.botAI_Resource_1 <= 0;
	}

	actions
	{
		Press Button(Event Player, Reload);
		Wait(2, Abort When False);
		Event Player.botAI_Resource_1 = 6;
	}
}

rule("AI Roadhog Chain Hook")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Roadhog;
	}

	conditions
	{
		Event Player.botAI_Enabled == True;
		Event Player.botAI_CanUseAbilities == True;
		Event Player.botAI_Resource_1 > 0;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 4) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 20;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1).player_Home) <= Players In Slot(Slot Of(
			Event Player), Team 1).player_ZoneRadius;
		Ability Cooldown(Event Player, Button(Ability 1)) == 0;
	}

	actions
	{
		Press Button(Event Player, Ability 1);
	}
}

rule("AI Roadhog Take A Breather")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Roadhog;
	}

	conditions
	{
		Event Player.botAI_Enabled == True;
		Event Player.botAI_CanUseAbilities == True;
		Is Alive(Event Player) == True;
		Health(Event Player) < 100;
		Ability Cooldown(Event Player, Button(Ability 2)) == 0;
	}

	actions
	{
		Press Button(Event Player, Ability 2);
	}
}

rule("AI Roadhog Whole Hog")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Roadhog;
	}

	conditions
	{
		Event Player.botAI_Enabled == True;
		Event Player.botAI_CanUseAbilities == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Ultimate Charge Percent(Event Player) == 100;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 15;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 20) == True;
		Is Using Ability 1(Event Player) == False;
		Is Using Ability 2(Event Player) == False;
	}

	actions
	{
		Press Button(Event Player, Ultimate);
	}
}

rule("AI McCree General")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		McCree;
	}

	conditions
	{
		Is Game In Progress == True;
		Is Alive(Event Player) == True;
		Event Player.botAI_Enabled == True;
	}

	actions
	{
		Event Player.botAI_OptimalDistance = Random Real(13, 16);
		Event Player.botAI_FacingDefault = Global.facingDefault_Body;
	}
}

rule("AI McCree Attack")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		McCree;
	}

	conditions
	{
		Event Player.botAI_Enabled == True;
		Event Player.botAI_CanAttack == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 7.500) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 40;
		Is Using Ultimate(Event Player) == False;
	}

	actions
	{
		Press Button(Event Player, Primary Fire);
		Wait(Random Real(0.420, 0.520), Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("AI McCree Combat Roll")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		McCree;
	}

	conditions
	{
		Event Player.botAI_Enabled == True;
		Event Player.botAI_CanUseAbilities == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Is In View Angle(Players In Slot(Slot Of(Event Player), Team 1), Event Player, 10) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 8;
		Ability Cooldown(Event Player, Button(Ability 1)) == 0;
	}

	actions
	{
		Skip If(Is Using Ultimate(Players In Slot(Slot Of(Event Player), Team 1)), 1);
		Skip If(Random Real(0, 1) > 0.750, 2);
		Press Button(Event Player, Ability 1);
	}
}

rule("AI McCree Flashbang")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		McCree;
	}

	conditions
	{
		Event Player.botAI_Enabled == True;
		Event Player.botAI_CanUseAbilities == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 10) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 6;
		Ability Cooldown(Event Player, Button(Ability 2)) == 0;
	}

	actions
	{
		Skip If(Is Using Ultimate(Players In Slot(Slot Of(Event Player), Team 1)), 1);
		Skip If(Random Real(0, 1) > 0.750, 2);
		Press Button(Event Player, Ability 2);
	}
}

rule("AI McCree Deadeye Start")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		McCree;
	}

	conditions
	{
		Event Player.botAI_Enabled == True;
		Event Player.botAI_CanUseAbilities == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Ultimate Charge Percent(Event Player) == 100;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 30) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 200;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) >= 10;
		(Health(Players In Slot(Slot Of(Event Player), Team 1)) >= 115) == True;
	}

	actions
	{
		Event Player.mccreeDeadeyeUse = True;
	}
}

rule("AI McCree Deadeye Charge")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		McCree;
	}

	conditions
	{
		Event Player.botAI_Enabled == True;
		Event Player.mccreeDeadeyeUse == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
	}

	actions
	{
		Event Player.mccreeDeadeyeCharge = 0;
		Event Player.mccreeDeadeyeRate = 100;
		Stop Holding Button(Event Player, Primary Fire);
		Press Button(Event Player, Ultimate);
		Wait(0.200, Ignore Condition);
		Chase Player Variable At Rate(Event Player, mccreeDeadeyeCharge, 2802.500, Event Player.mccreeDeadeyeRate, Destination and Rate);
		Wait(0.800, Abort When False);
		Event Player.mccreeDeadeyeRate = 275;
		Wait(0.500, Abort When False);
		Event Player.mccreeDeadeyeRate = 550;
		Wait(4.600, Abort When False);
		Press Button(Event Player, Primary Fire);
		Event Player.mccreeDeadeyeCharge = 0;
		Event Player.mccreeDeadeyeUse = False;
	}
}

rule("AI McCree Deadeye Fire")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		McCree;
	}

	conditions
	{
		Event Player.botAI_Enabled == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Event Player.mccreeDeadeyeCharge >= Health(Players In Slot(Slot Of(Event Player), Team 1));
		Is Using Ultimate(Event Player) == True;
	}

	actions
	{
		Wait(Random Real(0.100, 0.150), Ignore Condition);
		Stop Chasing Player Variable(Event Player, mccreeDeadeyeCharge);
		Press Button(Event Player, Primary Fire);
		Event Player.mccreeDeadeyeUse = False;
	}
}

rule("AI Junkrat General")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Junkrat;
	}

	conditions
	{
		Is Game In Progress == True;
		Is Alive(Event Player) == True;
		Event Player.botAI_Enabled == True;
	}

	actions
	{
		Event Player.botAI_OptimalDistance = Random Real(9, 12);
		Event Player.botAI_FacingDefault = Global.facingDefault_Body;
	}
}

rule("AI Junkrat Attack")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Junkrat;
	}

	conditions
	{
		Event Player.botAI_Enabled == True;
		Event Player.botAI_CanAttack == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 25;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 15) == True;
		Is Using Ultimate(Event Player) == False;
		Ultimate Charge Percent(Event Player) < 98;
	}

	actions
	{
		Skip If(Is Button Held(Event Player, Primary Fire), 1);
		Start Holding Button(Event Player, Primary Fire);
		Wait(0.700, Ignore Condition);
		Loop If Condition Is True;
		Stop Holding Button(Event Player, Primary Fire);
	}
}

rule("AI Junkrat Concussion Mine")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Junkrat;
	}

	conditions
	{
		Event Player.botAI_Enabled == True;
		Event Player.botAI_CanUseAbilities == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 10;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 15) == True;
		Ability Cooldown(Event Player, Button(Ability 1)) == 0;
	}

	actions
	{
		Call Subroutine(botAI_Facing_Head);
		Wait(0.250, Ignore Condition);
		Press Button(Event Player, Ability 1);
		Wait(Random Real(0.450, 0.650), Ignore Condition);
		Press Button(Event Player, Secondary Fire);
		Wait(0.250, Ignore Condition);
		Call Subroutine(botAI_Facing_Reset);
	}
}

rule("AI Junkrat Steel Trap")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Junkrat;
	}

	conditions
	{
		Event Player.botAI_Enabled == True;
		Event Player.botAI_CanUseAbilities == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 8;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 15) == True;
		Ability Cooldown(Event Player, Button(Ability 2)) == 0;
	}

	actions
	{
		Call Subroutine(botAI_Facing_Head);
		Wait(0.250, Ignore Condition);
		Press Button(Event Player, Ability 2);
		Wait(0.250, Ignore Condition);
		Call Subroutine(botAI_Facing_Reset);
	}
}

rule("AI Junkrat Riptire Start")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Junkrat;
	}

	conditions
	{
		Event Player.botAI_Enabled == True;
		Event Player.botAI_CanUseAbilities == True;
		Ultimate Charge Percent(Event Player) == 100;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) >= 10;
		Health(Players In Slot(Slot Of(Event Player), Team 1)) >= 100;
	}

	actions
	{
		Press Button(Event Player, Ultimate);
	}
}

rule("AI Junkrat Riptire")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Junkrat;
	}

	conditions
	{
		Event Player.botAI_Enabled == True;
		Event Player.botAI_CanUseAbilities == True;
		Is Using Ultimate(Event Player) == True;
		Is Alive(Event Player) == True;
	}

	actions
	{
		If(Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 10);
			Wait(1, Ignore Condition);
			Press Button(Event Player, Primary Fire);
		Else;
			Wait(Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) / 12, Ignore Condition);
			Press Button(Event Player, Primary Fire);
		End;
		Loop If Condition Is True;
	}
}

rule("AI Zarya General")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Zarya;
	}

	conditions
	{
		Is Game In Progress == True;
		Is Alive(Event Player) == True;
		Event Player.botAI_Enabled == True;
	}

	actions
	{
		Event Player.botAI_OptimalDistance = Random Real(5, 10);
		Event Player.botAI_FacingDefault = Global.facingDefault_Body;
	}
}

rule("AI Zarya Attack Primary")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Zarya;
	}

	conditions
	{
		Event Player.botAI_Enabled == True;
		Event Player.botAI_CanAttack == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 15;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 15) == True;
	}

	actions
	{
		Skip If(Is Button Held(Event Player, Primary Fire), 1);
		Start Holding Button(Event Player, Primary Fire);
		Wait(1, Ignore Condition);
		Loop If Condition Is True;
		Stop Holding Button(Event Player, Primary Fire);
	}
}

rule("AI Zarya Attack Secondary")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Zarya;
	}

	conditions
	{
		Event Player.botAI_Enabled == True;
		Event Player.botAI_CanAttack == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) > 15;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 35;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 15) == True;
	}

	actions
	{
		Call Subroutine(botAI_Facing_Stop);
		Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Position Of(Players In Slot(Slot Of(Event Player),
			Team 1)) + Vector(0, Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) * 0.110, 0)),
			Random Integer(270, 360), To World, Direction and Turn Rate);
		Press Button(Event Player, Secondary Fire);
		Wait(1, Ignore Condition);
		Loop If Condition Is True;
		Call Subroutine(botAI_Facing_Reset);
	}
}

rule("AI Zarya Use Bubble")
{
	event
	{
		Player Took Damage;
		Team 2;
		Zarya;
	}

	conditions
	{
		Event Player.botAI_Enabled == True;
		Event Player.botAI_CanUseAbilities == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Is In View Angle(Players In Slot(Slot Of(Event Player), Team 1), Event Player, 10) == True;
		Ability Cooldown(Event Player, Button(Ability 1)) == 0;
	}

	actions
	{
		Skip If(Random Real(0, 1) >= 0.500, 2);
		Press Button(Event Player, Ability 1);
	}
}

rule("AI Zarya Graviton Surge")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Zarya;
	}

	conditions
	{
		Event Player.botAI_Enabled == True;
		Event Player.botAI_CanUseAbilities == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Ultimate Charge Percent(Event Player) == 100;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 15;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 10) == True;
		Health(Players In Slot(Slot Of(Event Player), Team 1)) >= 75;
	}

	actions
	{
		Call Subroutine(botAI_Facing_Stop);
		Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Position Of(Players In Slot(Slot Of(Event Player),
			Team 1))), 360, To World, Direction and Turn Rate);
		Wait(0.250, Ignore Condition);
		Press Button(Event Player, Ultimate);
		Wait(0.150, Ignore Condition);
		Call Subroutine(botAI_Facing_Reset);
	}
}

rule("AI Soldier: 76 General")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Soldier: 76;
	}

	conditions
	{
		Is Game In Progress == True;
		Is Alive(Event Player) == True;
		Event Player.botAI_Enabled == True;
	}

	actions
	{
		Event Player.botAI_OptimalDistance = Random Real(15, 20);
		Event Player.botAI_FacingDefault = Global.facingDefault_Body;
	}
}

rule("AI Soldier: 76 Attack")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Soldier: 76;
	}

	conditions
	{
		Event Player.botAI_Enabled == True;
		Event Player.botAI_CanAttack == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 40;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 10) == True;
		Is Using Ability 1(Event Player) == False;
		Is Firing Secondary(Event Player) == False;
	}

	actions
	{
		Skip If(Is Button Held(Event Player, Primary Fire), 1);
		Start Holding Button(Event Player, Primary Fire);
		Wait(0.750, Ignore Condition);
		Loop If Condition Is True;
		Stop Holding Button(Event Player, Primary Fire);
	}
}

rule("AI Soldier: 76 Helix Rockets")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Soldier: 76;
	}

	conditions
	{
		Event Player.botAI_Enabled == True;
		Event Player.botAI_CanUseAbilities == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 15) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 12;
		Ability Cooldown(Event Player, Button(Secondary Fire)) == 0;
	}

	actions
	{
		Call Subroutine(botAI_Facing_Position);
		Wait(0.150, Ignore Condition);
		Press Button(Event Player, Secondary Fire);
		Wait(0.200, Ignore Condition);
		Call Subroutine(botAI_Facing_Reset);
	}
}

rule("AI Soldier: 76 Sprint")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Soldier: 76;
	}

	conditions
	{
		Event Player.botAI_Enabled == True;
		Event Player.botAI_CanUseAbilities == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) >= Event Player.botAI_OptimalDistance;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 15) == True;
		Ability Cooldown(Event Player, Button(Ability 1)) == 0;
	}

	actions
	{
		Start Holding Button(Event Player, Ability 1);
		Wait(0.600, Ignore Condition);
		Loop If Condition Is True;
		Stop Holding Button(Event Player, Ability 1);
	}
}

rule("AI Soldier: 76 Biotic Field")
{
	event
	{
		Player Took Damage;
		Team 2;
		Soldier: 76;
	}

	conditions
	{
		Event Player.botAI_Enabled == True;
		Event Player.botAI_CanUseAbilities == True;
		Is Alive(Event Player) == True;
		Health(Event Player) <= 80;
		Ability Cooldown(Event Player, Button(Ability 2)) == 0;
	}

	actions
	{
		Press Button(Event Player, Ability 2);
	}
}

rule("AI Soldier: 76 Tactical Visor")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Soldier: 76;
	}

	conditions
	{
		Event Player.botAI_Enabled == True;
		Event Player.botAI_CanUseAbilities == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Ultimate Charge Percent(Event Player) == 100;
		Health(Event Player) >= 50;
	}

	actions
	{
		Press Button(Event Player, Ultimate);
	}
}

rule("AI Lucio General")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Lúcio;
	}

	conditions
	{
		Is Game In Progress == True;
		Is Alive(Event Player) == True;
		Event Player.botAI_Enabled == True;
	}

	actions
	{
		Event Player.botAI_OptimalDistance = Random Real(4, 6);
		Event Player.botAI_FacingDefault = Global.facingDefault_Body;
	}
}

rule("AI Lucio Attack")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Lúcio;
	}

	conditions
	{
		Event Player.botAI_Enabled == True;
		Event Player.botAI_CanAttack == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 30;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 10) == True;
	}

	actions
	{
		Press Button(Event Player, Primary Fire);
		Wait(1, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("AI Lucio Crossfade Heal Self")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Lúcio;
	}

	conditions
	{
		Event Player.botAI_Enabled == True;
		Event Player.botAI_CanUseAbilities == True;
		Is Alive(Event Player) == True;
		Ability Cooldown(Event Player, Button(Ability 1)) == 0;
		Health(Event Player) <= 100;
		Is In Alternate Form(Event Player) == True;
	}

	actions
	{
		Press Button(Event Player, Ability 1);
	}
}

rule("AI Lucio Crossfade Speed Self")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Lúcio;
	}

	conditions
	{
		Event Player.botAI_Enabled == True;
		Event Player.botAI_CanUseAbilities == True;
		Is Alive(Event Player) == True;
		Ability Cooldown(Event Player, Button(Ability 1)) == 0;
		Health(Event Player) > 100;
		Is In Alternate Form(Event Player) == False;
	}

	actions
	{
		Press Button(Event Player, Ability 1);
	}
}

rule("AI Lucio Amp It Up")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Lúcio;
	}

	conditions
	{
		Event Player.botAI_Enabled == True;
		Event Player.botAI_CanUseAbilities == True;
		Is Alive(Event Player) == True;
		(Health(Event Player) <= 75 || Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) > 15) == True;
		Ability Cooldown(Event Player, Button(Ability 2)) == 0;
	}

	actions
	{
		Press Button(Event Player, Ability 2);
	}
}

rule("AI Lucio Soundwave Boop")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Lúcio;
	}

	conditions
	{
		Event Player.botAI_Enabled == True;
		Event Player.botAI_CanUseAbilities == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Health(Event Player) <= 100;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 20) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 8;
		Ability Cooldown(Event Player, Button(Secondary Fire)) == 0;
	}

	actions
	{
		Press Button(Event Player, Secondary Fire);
	}
}

rule("AI Lucio Soundwave Final")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Lúcio;
	}

	conditions
	{
		Event Player.botAI_Enabled == True;
		Event Player.botAI_CanUseAbilities == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Health(Players In Slot(Slot Of(Event Player), Team 1)) <= 25;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 20) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 8;
		Ability Cooldown(Event Player, Button(Secondary Fire)) == 0;
	}

	actions
	{
		Press Button(Event Player, Secondary Fire);
	}
}

rule("AI Lucio Sound Barrier")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Lúcio;
	}

	conditions
	{
		Event Player.botAI_Enabled == True;
		Event Player.botAI_CanUseAbilities == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Ultimate Charge Percent(Event Player) == 100;
		(Is Using Ultimate(Players In Slot(Slot Of(Event Player), Team 1)) || Health(Event Player) <= 75) == True;
	}

	actions
	{
		Press Button(Event Player, Ultimate);
	}
}

rule("AI D.Va General")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		D.Va;
	}

	conditions
	{
		Is Game In Progress == True;
		Is Alive(Event Player) == True;
		Event Player.botAI_Enabled == True;
	}

	actions
	{
		Event Player.botAI_OptimalDistance = Random Real(4, 8);
		Event Player.botAI_FacingDefault = Global.facingDefault_Body;
	}
}

rule("AI D.Va Attack")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		D.Va;
	}

	conditions
	{
		Event Player.botAI_Enabled == True;
		Event Player.botAI_CanAttack == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 15;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 15) == True;
	}

	actions
	{
		Skip If(Is Button Held(Event Player, Primary Fire), 1);
		Start Holding Button(Event Player, Primary Fire);
		Wait(0.750, Ignore Condition);
		Loop If Condition Is True;
		Stop Holding Button(Event Player, Primary Fire);
	}
}

rule("AI D.Va Boosters")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		D.Va;
	}

	conditions
	{
		Event Player.botAI_Enabled == True;
		Event Player.botAI_CanUseAbilities == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) > 10;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 20) == True;
		Ultimate Charge Percent(Event Player) <= 95;
		Ability Cooldown(Event Player, Button(Ability 1)) == 0;
	}

	actions
	{
		Press Button(Event Player, Ability 1);
		While(Is Using Ability 1(Event Player) == True);
			If(Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 6);
				Press Button(Event Player, Ability 1);
				Break;
			End;
			Wait(0.250, Ignore Condition);
		End;
	}
}

rule("AI D.Va Micro Missiles")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		D.Va;
	}

	conditions
	{
		Event Player.botAI_Enabled == True;
		Event Player.botAI_CanUseAbilities == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 10;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 15) == True;
		Ability Cooldown(Event Player, Button(Ability 2)) == 0;
	}

	actions
	{
		Press Button(Event Player, Ability 2);
	}
}

rule("AI D.Va Defense Matrix")
{
	event
	{
		Player Took Damage;
		Team 2;
		D.Va;
	}

	conditions
	{
		Event Player.botAI_Enabled == True;
		Event Player.botAI_CanUseAbilities == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Array Contains(Global.projectileHeroes, Hero Of(Attacker)) == True;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 30) == True;
		Is In View Angle(Players In Slot(Slot Of(Event Player), Team 1), Event Player, 10) == True;
		Ability Cooldown(Event Player, Button(Secondary Fire)) == 0;
	}

	actions
	{
		Skip If(Random Real(0, 1) >= 0.750, 4);
		Start Holding Button(Event Player, Secondary Fire);
		Wait(Random Real(0.250, 0.750), Ignore Condition);
		Stop Holding Button(Event Player, Secondary Fire);
	}
}

rule("AI D.Va Self-Destruct")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		D.Va;
	}

	conditions
	{
		Event Player.botAI_Enabled == True;
		Event Player.botAI_CanUseAbilities == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Ultimate Charge Percent(Event Player) == 100;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 15;
		Is In Alternate Form(Event Player) == False;
	}

	actions
	{
		If(Ability Cooldown(Event Player, Button(Ability 1)) == 0);
			Start Holding Button(Event Player, Ability 1);
			Call Subroutine(botAI_Facing_Stop);
			Start Facing(Event Player, World Vector Of(Vector(0, 15, 0), Players In Slot(Slot Of(Event Player), Team 1), Rotation), 360,
				To World, Direction and Turn Rate);
			Wait(Random Real(0.050, 0.100), Ignore Condition);
			Press Button(Event Player, Ultimate);
			Stop Holding Button(Event Player, Ability 1);
			Wait(0.100, Ignore Condition);
			Call Subroutine(botAI_Facing_Reset);
		Else;
			Press Button(Event Player, Ultimate);
		End;
	}
}

rule("AI Mei General")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Mei;
	}

	conditions
	{
		Is Game In Progress == True;
		Is Alive(Event Player) == True;
		Event Player.botAI_Enabled == True;
	}

	actions
	{
		Event Player.botAI_OptimalDistance = Random Real(6, 10);
		Event Player.botAI_FacingDefault = Global.facingDefault_Body;
	}
}

rule("AI Mei Attack Secondary")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Mei;
	}

	conditions
	{
		Event Player.botAI_Enabled == True;
		Event Player.botAI_CanAttack == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 50;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) > 10;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 10) == True;
		Is Using Ability 1(Event Player) == False;
		Has Status(Players In Slot(Slot Of(Event Player), Team 1), Frozen) == False;
	}

	actions
	{
		Skip If(Is Button Held(Event Player, Secondary Fire), 1);
		Start Holding Button(Event Player, Secondary Fire);
		Wait(0.800, Ignore Condition);
		Loop If Condition Is True;
		Stop Holding Button(Event Player, Secondary Fire);
	}
}

rule("AI Mei Attack Primary Start")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Mei;
	}

	conditions
	{
		Event Player.botAI_Enabled == True;
		Event Player.botAI_CanAttack == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 10;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 15) == True;
		Is Using Ability 1(Event Player) == False;
		Has Status(Players In Slot(Slot Of(Event Player), Team 1), Frozen) == False;
	}

	actions
	{
		Skip If(Is Button Held(Event Player, Primary Fire), 1);
		Start Holding Button(Event Player, Primary Fire);
		Wait(0.250, Ignore Condition);
		Loop If Condition Is True;
		Stop Holding Button(Event Player, Primary Fire);
	}
}

rule("AI Mei Attack Secondary Frozen")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Mei;
	}

	conditions
	{
		Event Player.botAI_Enabled == True;
		Event Player.botAI_CanAttack == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 20;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 15) == True;
		Is Using Ability 1(Event Player) == False;
		Has Status(Players In Slot(Slot Of(Event Player), Team 1), Frozen) == True;
	}

	actions
	{
		Event Player.botAI_MoveWASD_Enabled = False;
		Event Player.botAI_MoveCrouch_Enabled = False;
		Event Player.botAI_MoveJump_Enabled = False;
		Stop Holding Button(Event Player, Primary Fire);
		Call Subroutine(botAI_Facing_Stop);
		Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Eye Position(Players In Slot(Slot Of(Event Player),
			Team 1))), 360, To World, Direction and Turn Rate);
		Press Button(Event Player, Secondary Fire);
		Wait(0.850, Ignore Condition);
		Call Subroutine(botAI_Facing_Reset);
		Event Player.botAI_MoveWASD_Enabled = True;
		Event Player.botAI_MoveCrouch_Enabled = True;
		Event Player.botAI_MoveJump_Enabled = True;
	}
}

rule("AI Mei Cryo-Freeze")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Mei;
	}

	conditions
	{
		Event Player.botAI_Enabled == True;
		Event Player.botAI_CanUseAbilities == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Health(Event Player) <= 70;
		Ability Cooldown(Event Player, Button(Ability 1)) == 0;
	}

	actions
	{
		Press Button(Event Player, Ability 1);
		While(Health(Event Player) < 150);
			Wait(0.250, Ignore Condition);
		End;
		Press Button(Event Player, Ability 1);
	}
}

rule("AI Mei Ice Wall")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Mei;
	}

	conditions
	{
		Event Player.botAI_Enabled == True;
		Event Player.botAI_CanUseAbilities == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 15;
		Ability Cooldown(Event Player, Button(Ability 2)) == 0;
	}

	actions
	{
		Press Button(Event Player, Ability 2);
		Call Subroutine(botAI_Facing_Stop);
		Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Position Of(Players In Slot(Slot Of(Event Player),
			Team 1)) + World Vector Of(Vector(0, 0, 2), Event Player, Rotation)), 360, To World, Direction and Turn Rate);
		Wait(0.250, Ignore Condition);
		Press Button(Event Player, Primary Fire);
		Wait(0.250, Ignore Condition);
		Call Subroutine(botAI_Facing_Reset);
	}
}

rule("AI Mei Blizzrd")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Mei;
	}

	conditions
	{
		Event Player.botAI_Enabled == True;
		Event Player.botAI_CanUseAbilities == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Ultimate Charge Percent(Event Player) == 100;
		Health(Players In Slot(Slot Of(Event Player), Team 1)) > 100;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 15;
	}

	actions
	{
		Call Subroutine(botAI_Facing_Position);
		Wait(0.500, Ignore Condition);
		Press Button(Event Player, Ultimate);
		Wait(0.500, Ignore Condition);
		Call Subroutine(botAI_Facing_Reset);
	}
}

rule("AI Sombra General")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Sombra;
	}

	conditions
	{
		Is Game In Progress == True;
		Is Alive(Event Player) == True;
		Event Player.botAI_Enabled == True;
	}

	actions
	{
		Event Player.botAI_OptimalDistance = Random Real(5, 8);
		Event Player.botAI_FacingDefault = Global.facingDefault_Body;
		Call Subroutine(botAI_AIMode_Enable);
		Press Button(Event Player, Ability 1);
	}
}

rule("AI Sombra Attack")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Sombra;
	}

	conditions
	{
		Event Player.botAI_Enabled == True;
		Event Player.botAI_CanAttack == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 15;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 15) == True;
		Is Using Ability 1(Event Player) == False;
		Is Button Held(Event Player, Secondary Fire) == False;
	}

	actions
	{
		Skip If(Is Button Held(Event Player, Primary Fire), 1);
		Start Holding Button(Event Player, Primary Fire);
		Wait(0.500, Ignore Condition);
		Loop If Condition Is True;
		Stop Holding Button(Event Player, Primary Fire);
	}
}

rule("AI Sombra Hack")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Sombra;
	}

	conditions
	{
		Event Player.botAI_Enabled == True;
		Event Player.botAI_CanUseAbilities == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 10;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 8) == True;
		Is In View Angle(Players In Slot(Slot Of(Event Player), Team 1), Event Player, 45) == False;
		Ability Cooldown(Event Player, Button(Secondary Fire)) == 0;
	}

	actions
	{
		If(Is Using Ability 1(Event Player) == True);
			Press Button(Event Player, Ability 1);
			Wait(0.800, Ignore Condition);
		End;
		Start Holding Button(Event Player, Secondary Fire);
		Wait(0.750, Ignore Condition);
		Stop Holding Button(Event Player, Secondary Fire);
	}
}

rule("AI Sombra Translocator Place")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Sombra;
	}

	conditions
	{
		Event Player.botAI_Enabled == True;
		Event Player.botAI_CanUseAbilities == True;
		Is Alive(Event Player) == True;
		Is Using Ability 2(Event Player) == False;
		Is Firing Secondary(Event Player) == False;
		Ability Cooldown(Event Player, Button(Ability 2)) == 0;
	}

	actions
	{
		Call Subroutine(botAI_Facing_Stop);
		Start Facing(Event Player, Vector(X Component Of(Players In Slot(Slot Of(Event Player), Team 1).player_Home), 30, Z Component Of(
			Players In Slot(Slot Of(Event Player), Team 1).player_Home) + Players In Slot(Slot Of(Event Player), Team 1)
			.player_EnemyDistanceMax), 540, To World, None);
		Wait(0.150, Ignore Condition);
		Press Button(Event Player, Ability 2);
		Wait(0.100, Ignore Condition);
		Call Subroutine(botAI_Facing_Reset);
	}
}

rule("AI Sombra Translocator Use")
{
	event
	{
		Player Took Damage;
		Team 2;
		Sombra;
	}

	conditions
	{
		Event Player.botAI_Enabled == True;
		Event Player.botAI_CanUseAbilities == True;
		Is Alive(Event Player) == True;
		Health(Event Player) <= 75;
		Is Using Ability 1(Event Player) == False;
		Is Using Ability 2(Event Player) == True;
		Ability Cooldown(Event Player, Button(Ability 2)) == 0;
	}

	actions
	{
		Press Button(Event Player, Ability 1);
		Wait(0.016, Ignore Condition);
		Press Button(Event Player, Ability 2);
		Wait(0.250, Ignore Condition);
		Heal(Event Player, Null, 75);
	}
}

rule("AI Sombra EMP")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Sombra;
	}

	conditions
	{
		Event Player.botAI_Enabled == True;
		Event Player.botAI_CanUseAbilities == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Ultimate Charge Percent(Event Player) == 100;
		Health(Players In Slot(Slot Of(Event Player), Team 1)) >= 75;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 15;
	}

	actions
	{
		Press Button(Event Player, Ultimate);
	}
}

rule("AI Sombra Stealth")
{
	event
	{
		Player Dealt Final Blow;
		Team 2;
		Sombra;
	}

	conditions
	{
		Event Player.botAI_Enabled == True;
		Event Player.botAI_CanUseAbilities == True;
		Is Alive(Event Player) == True;
		Ability Cooldown(Event Player, Button(Ability 1)) == 0;
		Is Using Ability 1(Event Player) == False;
	}

	actions
	{
		Press Button(Event Player, Ability 1);
	}
}

rule("AI Doomfist General")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Doomfist;
	}

	conditions
	{
		Is Game In Progress == True;
		Is Alive(Event Player) == True;
		Event Player.botAI_Enabled == True;
	}

	actions
	{
		Event Player.botAI_OptimalDistance = Random Real(3, 6);
		Event Player.botAI_Throttle_StrafeDistanceMod = 3;
		Event Player.botAI_FacingDefault = Global.facingDefault_Body;
	}
}

rule("AI Doomfist Attack")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Doomfist;
	}

	conditions
	{
		Event Player.botAI_Enabled == True;
		Event Player.botAI_CanAttack == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 20;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 8) == True;
		Is Button Held(Event Player, Secondary Fire) == False;
	}

	actions
	{
		Press Button(Event Player, Primary Fire);
		Wait(0.400, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("AI Doomfist Uppercut")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Doomfist;
	}

	conditions
	{
		Event Player.botAI_Enabled == True;
		Event Player.botAI_CanUseAbilities == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 5;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 15) == True;
		Ability Cooldown(Event Player, Button(Ability 1)) == 0;
		Is Button Held(Event Player, Secondary Fire) == False;
	}

	actions
	{
		Press Button(Event Player, Primary Fire);
		Wait(0.016, Ignore Condition);
		Press Button(Event Player, Ability 1);
	}
}

rule("AI Doomfist Seismic Slam")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Doomfist;
	}

	conditions
	{
		Event Player.botAI_Enabled == True;
		Event Player.botAI_CanUseAbilities == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		(Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) >= 2 || Is In Air(Event Player)) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 14;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 15) == True;
		Is Button Held(Event Player, Secondary Fire) == False;
		Ability Cooldown(Event Player, Button(Ability 2)) == 0;
	}

	actions
	{
		Press Button(Event Player, Jump);
		Call Subroutine(botAI_Facing_Position);
		Wait(0.250, Ignore Condition);
		Press Button(Event Player, Ability 2);
		Wait(0.250, Ignore Condition);
		Call Subroutine(botAI_Facing_Reset);
	}
}

rule("AI Doomfist Rocket Punch")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Doomfist;
	}

	conditions
	{
		Event Player.botAI_Enabled == True;
		Event Player.botAI_CanUseAbilities == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 15;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 15) == True;
		Ability Cooldown(Event Player, Button(Secondary Fire)) == 0;
	}

	actions
	{
		Start Holding Button(Event Player, Secondary Fire);
		Wait(Random Real(0.900, 1.800), Ignore Condition);
		Stop Holding Button(Event Player, Secondary Fire);
	}
}

rule("AI Doomfist Meteor Strike")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Doomfist;
	}

	conditions
	{
		Event Player.botAI_Enabled == True;
		Event Player.botAI_CanUseAbilities == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Ultimate Charge Percent(Event Player) == 100;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 20;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 20) == True;
		Health(Players In Slot(Slot Of(Event Player), Team 1)) > 100;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) > 1.500;
		Is Button Held(Event Player, Secondary Fire) == False;
	}

	actions
	{
		Press Button(Event Player, Ultimate);
		Call Subroutine(botAI_Facing_Position);
		Event Player.botAI_OptimalDistance = 0;
		While(Is Using Ultimate(Event Player));
			Wait(0.200, Ignore Condition);
			If(Distance Between(Vector(X Component Of(Position Of(Event Player)), 0, Z Component Of(Position Of(Event Player))), Vector(
				X Component Of(Position Of(Players In Slot(Slot Of(Event Player), Team 1))), 0, Z Component Of(Position Of(Players In Slot(
				Slot Of(Event Player), Team 1))))) <= 2);
				Press Button(Event Player, Primary Fire);
			End;
		End;
		Event Player.botAI_OptimalDistance = Random Real(3, 6);
		Call Subroutine(botAI_Facing_Reset);
	}
}

rule("AI Ana General")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Ana;
	}

	conditions
	{
		Is Game In Progress == True;
		Is Alive(Event Player) == True;
		Event Player.botAI_Enabled == True;
	}

	actions
	{
		Event Player.botAI_OptimalDistance = Random Real(15, 20);
		Event Player.botAI_FacingDefault = Global.facingDefault_Body;
	}
}

rule("AI Ana Attack Scope In")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Ana;
	}

	conditions
	{
		Event Player.botAI_Enabled == True;
		Event Player.botAI_CanAttack == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 50;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) >= 12.500;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 15) == True;
	}

	actions
	{
		Skip If(Is Button Held(Event Player, Secondary Fire), 1);
		Start Holding Button(Event Player, Secondary Fire);
		Wait(0.800, Ignore Condition);
		Loop If Condition Is True;
		Stop Holding Button(Event Player, Secondary Fire);
	}
}

rule("AI Ana Attack")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Ana;
	}

	conditions
	{
		Event Player.botAI_Enabled == True;
		Event Player.botAI_CanAttack == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 50;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 7.500) == True;
	}

	actions
	{
		Press Button(Event Player, Primary Fire);
		Wait(0.800, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("AI Ana Sleep Dart")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Ana;
	}

	conditions
	{
		Event Player.botAI_Enabled == True;
		Event Player.botAI_CanUseAbilities == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) < 15;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 5) == True;
		Ability Cooldown(Event Player, Button(Ability 1)) == 0;
	}

	actions
	{
		Press Button(Event Player, Ability 1);
	}
}

rule("AI Ana Sleep Dart Face Enemy Asleep")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Ana;
	}

	conditions
	{
		Event Player.botAI_Enabled == True;
		Event Player.botAI_CanAttack == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Has Status(Players In Slot(Slot Of(Event Player), Team 1), Asleep) == True;
	}

	actions
	{
		Call Subroutine(botAI_Facing_Stop);
		Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Position Of(Players In Slot(Slot Of(Event Player),
			Team 1)) + World Vector Of(Vector(0, 0.250, 0), Players In Slot(Slot Of(Event Player), Team 1), Rotation)), Random Real(270,
			360), To World, Direction and Turn Rate);
		Wait(1.250, Ignore Condition);
		Loop If Condition Is True;
		Call Subroutine(botAI_Facing_Reset);
	}
}

rule("AI Ana Biotic Grenade")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Ana;
	}

	conditions
	{
		Event Player.botAI_Enabled == True;
		Event Player.botAI_CanUseAbilities == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 30;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 10) == True;
		Ability Cooldown(Event Player, Button(Ability 2)) == 0;
		Health(Event Player) > 100;
		Is On Ground(Event Player) == True;
		Y Component Of(Position Of(Players In Slot(Slot Of(Event Player), Team 1))) < 2;
	}

	actions
	{
		Call Subroutine(botAI_Facing_Stop);
		Start Facing(Event Player, Direction From Angles(Horizontal Angle Towards(Event Player, Position Of(Players In Slot(Slot Of(
			Event Player), Team 1))), 0.500 * Arcsine In Degrees(-9.800 * (Distance Between(Position Of(Event Player), Position Of(
			Players In Slot(Slot Of(Event Player), Team 1))) - 4) / 30 ^ 2)), Random Integer(270, 360), To Player,
			Direction and Turn Rate);
		Wait(Random Real(0.300, 0.400), Ignore Condition);
		Press Button(Event Player, Ability 2);
		Wait(0.250, Ignore Condition);
		Call Subroutine(botAI_Facing_Reset);
	}
}

rule("AI Ana Biotic Grenade Self")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Ana;
	}

	conditions
	{
		Event Player.botAI_Enabled == True;
		Event Player.botAI_CanUseAbilities == True;
		Is Alive(Event Player) == True;
		Health(Event Player) <= 100;
		Ability Cooldown(Event Player, Button(Ability 2)) == 0;
	}

	actions
	{
		Call Subroutine(botAI_Facing_Stop);
		Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Position Of(Event Player)), Random Integer(360, 540),
			To World, Direction and Turn Rate);
		Wait(Random Real(0.150, 0.200), Ignore Condition);
		Press Button(Event Player, Ability 2);
		Wait(0.150, Ignore Condition);
		Call Subroutine(botAI_Facing_Reset);
	}
}

rule("AI Ana Nano Boost")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Ana;
	}

	conditions
	{
		Event Player.botAI_Enabled == True;
		Event Player.botAI_CanUseAbilities == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= Event Player.botAI_OptimalDistance;
		Ultimate Charge Percent(Event Player) == 100;
	}

	actions
	{
		Press Button(Event Player, Ultimate);
	}
}

rule("AI Orisa General")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Orisa;
	}

	conditions
	{
		Is Game In Progress == True;
		Is Alive(Event Player) == True;
		Event Player.botAI_Enabled == True;
	}

	actions
	{
		Event Player.botAI_OptimalDistance = Random Real(12, 16);
		Event Player.botAI_FacingDefault = Global.facingDefault_Body;
		Event Player.botAI_Anchor_Enabled = False;
	}
}

rule("AI Orisa Attack")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Orisa;
	}

	conditions
	{
		Event Player.botAI_Enabled == True;
		Event Player.botAI_CanAttack == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 30;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 15) == True;
	}

	actions
	{
		Skip If(Is Button Held(Event Player, Primary Fire), 1);
		Start Holding Button(Event Player, Primary Fire);
		Wait(1, Ignore Condition);
		Loop If Condition Is True;
		Stop Holding Button(Event Player, Primary Fire);
	}
}

rule("AI Orisa Protective Barrier")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Orisa;
	}

	conditions
	{
		Event Player.botAI_Enabled == True;
		Event Player.botAI_CanUseAbilities == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= Event Player.botAI_OptimalDistance;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 15) == True;
		Ability Cooldown(Event Player, Button(Ability 2)) == 0;
	}

	actions
	{
		Call Subroutine(botAI_Facing_Stop);
		Start Facing(Event Player, Direction From Angles(Horizontal Facing Angle Of(Event Player), 30), Random Real(400, 700), To World,
			None);
		Wait(0.200, Ignore Condition);
		Press Button(Event Player, Ability 2);
		disabled Event Player.botAI_Anchor_Position = Position Of(Event Player);
		disabled Event Player.botAI_Anchor_DriftMax = 1.500;
		disabled Event Player.botAI_Anchor_Enabled = True;
		Wait(0.200, Ignore Condition);
		Call Subroutine(botAI_Facing_Reset);
	}
}

rule("AI Orisa Halt!")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Orisa;
	}

	conditions
	{
		Event Player.botAI_Enabled == True;
		Event Player.botAI_CanUseAbilities == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 30;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 15) == True;
		Ability Cooldown(Event Player, Button(Secondary Fire)) == 0;
	}

	actions
	{
		Call Subroutine(botAI_Facing_Stop);
		Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Position Of(Players In Slot(Slot Of(Event Player),
			Team 1)) + World Vector Of(Vector(Random Real(-5, 5), Random Real(5, 7.250), 0), Players In Slot(Slot Of(Event Player),
			Team 1), Rotation)), Random Real(270, 360), To World, None);
		Wait(0.200, Ignore Condition);
		Press Button(Event Player, Secondary Fire);
		Wait(0.100, Ignore Condition);
		Call Subroutine(botAI_Facing_Reset);
		Wait(0.150, Ignore Condition);
		Skip If(Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 9, 1);
		Wait(Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) * 0.045, Ignore Condition);
		Press Button(Event Player, Secondary Fire);
	}
}

rule("AI Orisa Fortify")
{
	event
	{
		Player Took Damage;
		Team 2;
		Orisa;
	}

	conditions
	{
		Event Player.botAI_Enabled == True;
		Event Player.botAI_CanUseAbilities == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 30;
		Ability Cooldown(Event Player, Button(Ability 1)) == 0;
	}

	actions
	{
		Skip If(Random Real(0, 1) > 0.333, 1);
		Press Button(Event Player, Ability 1);
	}
}

rule("AI Orisa Supercharger")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Orisa;
	}

	conditions
	{
		Event Player.botAI_Enabled == True;
		Event Player.botAI_CanUseAbilities == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= Event Player.botAI_OptimalDistance;
		Ultimate Charge Percent(Event Player) == 100;
	}

	actions
	{
		Press Button(Event Player, Ultimate);
	}
}

rule("AI Brigitte General")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Brigitte;
	}

	conditions
	{
		Is Game In Progress == True;
		Is Alive(Event Player) == True;
		Event Player.botAI_Enabled == True;
	}

	actions
	{
		Event Player.botAI_OptimalDistance = Random Real(4, 6);
		Event Player.botAI_FacingDefault = Global.facingDefault_Body;
	}
}

rule("AI Brigitte Attack")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Brigitte;
	}

	conditions
	{
		Event Player.botAI_Enabled == True;
		Event Player.botAI_CanAttack == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 8;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 45) == True;
	}

	actions
	{
		Skip If(Is Button Held(Event Player, Primary Fire), 1);
		Start Holding Button(Event Player, Primary Fire);
		Wait(0.800, Ignore Condition);
		Loop If Condition Is True;
		Stop Holding Button(Event Player, Primary Fire);
	}
}

rule("AI Brigitte Use Shield")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Brigitte;
	}

	conditions
	{
		Event Player.botAI_Enabled == True;
		Event Player.botAI_CanUseAbilities == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Is In View Angle(Players In Slot(Slot Of(Event Player), Team 1), Event Player, 10) == True;
	}

	actions
	{
		Skip If(Random Real(0, 1) > 0.500, 4);
		Skip If(Is Button Held(Event Player, Secondary Fire), 1);
		Start Holding Button(Event Player, Secondary Fire);
		Wait(Random Real(0.500, 2), Ignore Condition);
		Stop Holding Button(Event Player, Secondary Fire);
		Wait(0.500, Ignore Condition);
		Loop If Condition Is True;
		Stop Holding Button(Event Player, Secondary Fire);
	}
}

rule("AI Brigitte Shield Bash")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Brigitte;
	}

	conditions
	{
		Event Player.botAI_Enabled == True;
		Event Player.botAI_CanUseAbilities == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 40) == True;
		Y Component Of(Position Of(Players In Slot(Slot Of(Event Player), Team 1))) < 3;
		Y Component Of(Position Of(Event Player)) < 3;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 6.800;
		Ability Cooldown(Event Player, Button(Primary Fire)) == 0;
	}

	actions
	{
		Skip If(Random Real(0, 1) > 0.750, 9);
		Wait(0.200, Ignore Condition);
		Stop Holding Button(Event Player, Primary Fire);
		Start Holding Button(Event Player, Secondary Fire);
		Wait(0.150, Ignore Condition);
		Press Button(Event Player, Primary Fire);
		Wait(0.100, Ignore Condition);
		Stop Holding Button(Event Player, Secondary Fire);
	}
}

rule("AI Brigitte Shield Bash Gap Closer")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Brigitte;
	}

	conditions
	{
		Event Player.botAI_Enabled == True;
		Event Player.botAI_CanUseAbilities == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) >= 12.500;
		Health(Event Player) >= 125;
		Ability Cooldown(Event Player, Button(Primary Fire)) == 0;
	}

	actions
	{
		Event Player.botAI_MoveJump_Enabled = False;
		Event Player.botAI_MoveCrouch_Enabled = False;
		Event Player.botAI_MoveWASD_Enabled = False;
		Start Throttle In Direction(Event Player, Forward, 1, To Player, Replace existing throttle, Direction and Magnitude);
		Start Holding Button(Event Player, Secondary Fire);
		Wait(0.250, Ignore Condition);
		Press Button(Event Player, Primary Fire);
		Wait(0.150, Ignore Condition);
		Start Holding Button(Event Player, Jump);
		Wait(0.500, Ignore Condition);
		Stop Holding Button(Event Player, Secondary Fire);
		Stop Holding Button(Event Player, Jump);
		Stop Throttle In Direction(Event Player);
		Event Player.botAI_MoveWASD_Enabled = True;
		Event Player.botAI_MoveJump_Enabled = True;
		Event Player.botAI_MoveCrouch_Enabled = True;
	}
}

rule("AI Brigitte Whip Shot Final")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Brigitte;
	}

	conditions
	{
		Event Player.botAI_Enabled == True;
		Event Player.botAI_CanUseAbilities == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 10) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 18;
		Health(Players In Slot(Slot Of(Event Player), Team 1)) <= 70;
		Ability Cooldown(Event Player, Button(Ability 1)) == 0;
	}

	actions
	{
		Press Button(Event Player, Ability 1);
	}
}

rule("AI Brigitte Whip Shot Boop")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Brigitte;
	}

	conditions
	{
		Event Player.botAI_CanUseAbilities == True;
		Event Player.botAI_Enabled == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 10) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 4;
		Health(Players In Slot(Slot Of(Event Player), Team 1)) > 100;
		Health(Event Player) <= 100;
		Ability Cooldown(Event Player, Button(Ability 1)) == 0;
	}

	actions
	{
		Press Button(Event Player, Ability 1);
	}
}

rule("AI Brigitte Rally")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Brigitte;
	}

	conditions
	{
		Event Player.botAI_Enabled == True;
		Event Player.botAI_CanUseAbilities == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 45) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 15;
		Health(Event Player) >= 75;
		Ultimate Charge Percent(Event Player) == 100;
	}

	actions
	{
		Press Button(Event Player, Ultimate);
	}
}

rule("AI Moira General")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Moira;
	}

	conditions
	{
		Is Game In Progress == True;
		Is Alive(Event Player) == True;
		Event Player.botAI_Enabled == True;
	}

	actions
	{
		Event Player.botAI_OptimalDistance = Random Real(10, 15);
		Event Player.botAI_FacingDefault = Global.facingDefault_Body;
	}
}

rule("AI Moira Biotic Grasp")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Moira;
	}

	conditions
	{
		Event Player.botAI_Enabled == True;
		Event Player.botAI_CanAttack == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 15) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 20;
		Is Using Ability 2(Event Player) == False;
	}

	actions
	{
		Skip If(Is Button Held(Event Player, Secondary Fire), 1);
		Start Holding Button(Event Player, Secondary Fire);
		Wait(0.700, Ignore Condition);
		Loop If Condition Is True;
		Stop Holding Button(Event Player, Secondary Fire);
	}
}

rule("AI Moira Fade")
{
	event
	{
		Player Took Damage;
		Team 2;
		Moira;
	}

	conditions
	{
		Event Player.botAI_Enabled == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Health(Event Player) < 100;
		Ability Cooldown(Event Player, Button(Ability 1)) == 0;
	}

	actions
	{
		Press Button(Event Player, Jump);
		Wait(0.300, Ignore Condition);
		Press Button(Event Player, Ability 1);
		Wait(0.500, Ignore Condition);
		Press Button(Event Player, Jump);
	}
}

rule("AI Moira Biotic Orb Damage")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Moira;
	}

	conditions
	{
		Event Player.botAI_Enabled == True;
		Event Player.botAI_CanUseAbilities == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 15) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 15;
		Ultimate Charge Percent(Event Player) < 80;
		Health(Event Player) >= 100;
		Health(Players In Slot(Slot Of(Event Player), Team 1)) > 75;
		Is Using Ability 1(Event Player) == False;
		Ability Cooldown(Event Player, Button(Ability 2)) == 0;
	}

	actions
	{
		Stop Holding Button(Event Player, Secondary Fire);
		Wait(0.100, Ignore Condition);
		Press Button(Event Player, Ability 2);
		Wait(0.150, Ignore Condition);
		Press Button(Event Player, Secondary Fire);
	}
}

rule("AI Moira Biotic Orb Healing")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Moira;
	}

	conditions
	{
		Event Player.botAI_Enabled == True;
		Event Player.botAI_CanUseAbilities == True;
		Is Alive(Event Player) == True;
		Health(Event Player) < 100;
		Ability Cooldown(Event Player, Button(Ability 1)) == 0;
	}

	actions
	{
		Stop Holding Button(Event Player, Secondary Fire);
		Wait(0.100, Ignore Condition);
		Press Button(Event Player, Ability 2);
		Wait(0.150, Ignore Condition);
		Press Button(Event Player, Primary Fire);
		Event Player.botAI_MoveWASD_Enabled = False;
		Start Throttle In Direction(Event Player, Forward, 1, To Player, Replace existing throttle, Direction and Magnitude);
		Wait(Random Real(1.200, 1.600), Ignore Condition);
		Event Player.botAI_MoveWASD_Enabled = True;
	}
}

rule("AI Moira Coalescence")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Moira;
	}

	conditions
	{
		Event Player.botAI_Enabled == True;
		Event Player.botAI_CanUseAbilities == True;
		Ultimate Charge Percent(Event Player) == 100;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 30) == True;
	}

	actions
	{
		Stop Holding Button(Event Player, Secondary Fire);
		Press Button(Event Player, Ability 2);
		Wait(0.200, Ignore Condition);
		Press Button(Event Player, Secondary Fire);
		Wait(0.100, Ignore Condition);
		Press Button(Event Player, Ultimate);
	}
}

rule("AI Wrecking Ball General")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Wrecking Ball;
	}

	conditions
	{
		Is Game In Progress == True;
		Is Alive(Event Player) == True;
		Event Player.botAI_Enabled == True;
	}

	actions
	{
		Event Player.botAI_OptimalDistance = Random Real(5, 10);
		Event Player.botAI_FacingDefault = Global.facingDefault_Body;
		Event Player.botAI_MoveJump_Enabled = False;
	}
}

rule("AI Wrecking Ball Attack")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Wrecking Ball;
	}

	conditions
	{
		Event Player.botAI_Enabled == True;
		Event Player.botAI_CanAttack == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= Event Player.botAI_OptimalDistance + 4;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 10) == True;
	}

	actions
	{
		Skip If(Is Button Held(Event Player, Primary Fire), 1);
		Start Holding Button(Event Player, Primary Fire);
		Wait(0.500, Ignore Condition);
		Loop If Condition Is True;
		Stop Holding Button(Event Player, Primary Fire);
	}
}

rule("AI Wrecking Ball Roll")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Wrecking Ball;
	}

	conditions
	{
		Event Player.botAI_Enabled == True;
		Event Player.botAI_CanUseAbilities == True;
		Is Alive(Event Player) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) >= 15;
		Ability Cooldown(Event Player, Button(Ability 1)) == 0;
	}

	actions
	{
		Press Button(Event Player, Ability 1);
	}
}

rule("AI Wrecking Ball Adaptive Shield")
{
	event
	{
		Player Took Damage;
		Team 2;
		Wrecking Ball;
	}

	conditions
	{
		Event Player.botAI_Enabled == True;
		Event Player.botAI_CanUseAbilities == True;
		Is Alive(Event Player) == True;
		Health(Event Player) <= 250;
		Ability Cooldown(Event Player, Button(Ability 2)) == 0;
	}

	actions
	{
		Press Button(Event Player, Ability 2);
	}
}

rule("AI Wrecking Ball Piledriver")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Wrecking Ball;
	}

	conditions
	{
		Event Player.botAI_Enabled == True;
		Event Player.botAI_CanUseAbilities == True;
		Is Alive(Event Player) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 8;
		Total Time Elapsed >= Event Player.botAI_UseTime_Ability3 + Event Player.botAI_Cooldown_Ability3;
	}

	actions
	{
		Event Player.botAI_MoveCrouch_Enabled = False;
		Press Button(Event Player, Jump);
		Wait(0.200, Ignore Condition);
		Press Button(Event Player, Crouch);
		Event Player.botAI_UseTime_Ability3 = Total Time Elapsed;
		Event Player.botAI_MoveCrouch_Enabled = True;
	}
}

rule("AI Wrecking Ball Minefield")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Wrecking Ball;
	}

	conditions
	{
		Event Player.botAI_Enabled == True;
		Event Player.botAI_CanUseAbilities == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Ultimate Charge Percent(Event Player) == 100;
		Health(Players In Slot(Slot Of(Event Player), Team 1)) >= 100;
	}

	actions
	{
		Press Button(Event Player, Ultimate);
	}
}

rule("AI Ashe General")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Ashe;
	}

	conditions
	{
		Is Game In Progress == True;
		Is Alive(Event Player) == True;
		Event Player.botAI_Enabled == True;
	}

	actions
	{
		Event Player.botAI_OptimalDistance = Random Real(15, 30);
		Event Player.botAI_FacingDefault = Global.facingDefault_Head;
		If(Event Player.currentKillNumber == 0 && Players In Slot(Slot Of(Event Player), Team 1).currentKillNumber == 0);
			Event Player.botAI_Resource_1 = 15;
		End;
	}
}

rule("AI Ashe Attack Scoped")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Ashe;
	}

	conditions
	{
		Event Player.botAI_Enabled == True;
		Event Player.botAI_CanAttack == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 7.500) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 50;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) > 6;
		Is Button Held(Event Player, Reload) == False;
	}

	actions
	{
		Skip If(Is Button Held(Event Player, Secondary Fire), 1);
		Start Holding Button(Event Player, Secondary Fire);
		Wait(Random Real(0.800, 1.250), Ignore Condition);
		Press Button(Event Player, Primary Fire);
		Event Player.botAI_Resource_1 -= 1;
		Loop If Condition Is True;
		Stop Holding Button(Event Player, Secondary Fire);
	}
}

rule("AI Ashe Attack Unscoped")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Ashe;
	}

	conditions
	{
		Event Player.botAI_Enabled == True;
		Event Player.botAI_CanAttack == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 7.500) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 6;
		Is Button Held(Event Player, Reload) == False;
	}

	actions
	{
		Skip If(Is Button Held(Event Player, Secondary Fire) == False, 1);
		Skip If(Random Real(0, 1) > 0.250, 4);
		Stop Holding Button(Event Player, Secondary Fire);
		Press Button(Event Player, Primary Fire);
		Event Player.botAI_Resource_1 -= 1;
		Wait(Random Real(0.250, 0.300), Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("AI Ashe Reload")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Ashe;
	}

	conditions
	{
		Event Player.botAI_Enabled == True;
		Event Player.botAI_CanAttack == True;
		Is Alive(Event Player) == True;
		Event Player.botAI_Resource_1 <= 5;
	}

	actions
	{
		Start Holding Button(Event Player, Reload);
		Event Player.botAI_CanAttack = False;
		Wait(0.500, Ignore Condition);
		While(Event Player.botAI_Resource_1 < 15);
			Wait(0.250, Ignore Condition);
			Event Player.botAI_Resource_1 += 1;
		End;
		Stop Holding Button(Event Player, Reload);
		Event Player.botAI_CanAttack = True;
	}
}

rule("AI Ashe Reload After Kill")
{
	event
	{
		Player Dealt Final Blow;
		Team 2;
		Ashe;
	}

	conditions
	{
		Event Player.botAI_Enabled == True;
		Event Player.botAI_CanAttack == True;
		Is Alive(Event Player) == True;
	}

	actions
	{
		Event Player.botAI_CanAttack = False;
		Start Holding Button(Event Player, Reload);
		Wait(0.500, Ignore Condition);
		While(Event Player.botAI_Resource_1 < 15);
			Wait(0.250, Ignore Condition);
			Event Player.botAI_Resource_1 += 1;
		End;
		Stop Holding Button(Event Player, Reload);
		Event Player.botAI_CanAttack = True;
	}
}

rule("AI Ashe Dynamite")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Ashe;
	}

	conditions
	{
		Event Player.botAI_Enabled == True;
		Event Player.botAI_CanUseAbilities == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 30;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 15) == True;
		Ability Cooldown(Event Player, Button(Ability 2)) == 0;
		Y Component Of(Position Of(Players In Slot(Slot Of(Event Player), Team 1))) < 2;
	}

	actions
	{
		Event Player.botAI_Hero_Ashe_DynamitePosition = Position Of(Players In Slot(Slot Of(Event Player), Team 1));
		Call Subroutine(botAI_Facing_Stop);
		Start Facing(Event Player, Direction From Angles(Horizontal Angle Towards(Event Player, Position Of(Players In Slot(Slot Of(
			Event Player), Team 1))), 0.500 * Arcsine In Degrees(-9.800 * (Distance Between(Position Of(Event Player),
			Event Player.botAI_Hero_Ashe_DynamitePosition) - 20) / 25 ^ 2)), Random Integer(270, 360), To Player, Direction and Turn Rate);
		Wait(Random Real(0.300, 0.400), Ignore Condition);
		Press Button(Event Player, Ability 2);
		Wait(0.250, Ignore Condition);
		Call Subroutine(botAI_Facing_Reset);
	}
}

rule("AI Ashe B.O.B.")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Ashe;
	}

	conditions
	{
		Event Player.botAI_Enabled == True;
		Event Player.botAI_CanUseAbilities == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 5;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 10) == True;
		Ultimate Charge Percent(Event Player) == 100;
	}

	actions
	{
		Press Button(Event Player, Ultimate);
	}
}

rule("AI Baptiste General")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Baptiste;
	}

	conditions
	{
		Is Game In Progress == True;
		Is Alive(Event Player) == True;
		Event Player.botAI_Enabled == True;
	}

	actions
	{
		Event Player.botAI_OptimalDistance = Random Real(14, 18);
		Event Player.botAI_FacingDefault = Global.facingDefault_Body;
		If(Event Player.currentKillNumber == 0 && Players In Slot(Slot Of(Event Player), Team 1).currentKillNumber == 0);
			Event Player.botAI_Resource_1 = 45;
		End;
	}
}

rule("AI Baptiste Attack")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Baptiste;
	}

	conditions
	{
		Event Player.botAI_Enabled == True;
		Event Player.botAI_CanAttack == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 40;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 15) == True;
	}

	actions
	{
		If(Event Player.botAI_Resource_1 <= 0);
			Press Button(Event Player, Reload);
			Wait(1.550, Ignore Condition);
			Event Player.botAI_Resource_1 = 45;
		Else;
			Press Button(Event Player, Primary Fire);
			Event Player.botAI_Resource_1 -= 3;
			Wait(0.650, Ignore Condition);
		End;
		Loop If Condition Is True;
	}
}

rule("AI Baptiste Regenerative Burst")
{
	event
	{
		Player Took Damage;
		Team 2;
		Baptiste;
	}

	conditions
	{
		Event Player.botAI_Enabled == True;
		Event Player.botAI_CanUseAbilities == True;
		Is Alive(Event Player) == True;
		Ability Cooldown(Event Player, Button(Ability 1)) == 0;
		Health(Event Player) <= 75;
	}

	actions
	{
		Press Button(Event Player, Ability 1);
	}
}

rule("AI Baptiste Immortality Field")
{
	event
	{
		Player Took Damage;
		Team 2;
		Baptiste;
	}

	conditions
	{
		Event Player.botAI_Enabled == True;
		Event Player.botAI_CanUseAbilities == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Ability Cooldown(Event Player, Button(Ability 2)) == 0;
		Health(Event Player) <= 50;
	}

	actions
	{
		Call Subroutine(botAI_Facing_Stop);
		Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Position Of(Event Player)), Random Integer(270, 540),
			To World, None);
		Wait(0.250, Ignore Condition);
		Press Button(Event Player, Ability 2);
		Call Subroutine(botAI_Facing_Reset);
	}
}

rule("AI Baptiste Amplification Matrix")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Baptiste;
	}

	conditions
	{
		Event Player.botAI_Enabled == True;
		Event Player.botAI_CanUseAbilities == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Ultimate Charge Percent(Event Player) == 100;
	}

	actions
	{
		Press Button(Event Player, Ultimate);
		Call Subroutine(botAI_Facing_Stop);
		Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Position Of(Event Player) + World Vector Of(Vector(0, 0,
			1.500), Event Player, Rotation)), Random Integer(270, 360), To World, None);
		Wait(0.250, Ignore Condition);
		Press Button(Event Player, Primary Fire);
		Wait(0.100, Ignore Condition);
		Call Subroutine(botAI_Facing_Reset);
	}
}

rule("AI Sigma General")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Sigma;
	}

	conditions
	{
		Is Game In Progress == True;
		Is Alive(Event Player) == True;
		Event Player.botAI_Enabled == True;
	}

	actions
	{
		Event Player.botAI_OptimalDistance = Random Real(12, 15);
		Event Player.botAI_FacingDefault = Global.facingDefault_Position;
	}
}

rule("AI Sigma Attack")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Sigma;
	}

	conditions
	{
		Event Player.botAI_Enabled == True;
		Event Player.botAI_CanAttack == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 22;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 20) == True;
		Is Using Ability 1(Event Player) == False;
		Is Using Ability 2(Event Player) == False;
	}

	actions
	{
		Start Holding Button(Event Player, Primary Fire);
		Wait(1.500, Ignore Condition);
		Loop If Condition Is True;
		Stop Holding Button(Event Player, Primary Fire);
	}
}

rule("AI Sigma Kinetic Grasp")
{
	event
	{
		Player Took Damage;
		Team 2;
		Sigma;
	}

	conditions
	{
		Event Player.botAI_Enabled == True;
		Event Player.botAI_CanUseAbilities == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 15) == True;
		Is In View Angle(Players In Slot(Slot Of(Event Player), Team 1), Event Player, 15) == True;
		Array Contains(Global.projectileHeroes, Hero Of(Players In Slot(Slot Of(Event Player), Team 1))) == True;
		Ability Cooldown(Event Player, Button(Ability 1)) == 0;
	}

	actions
	{
		Wait(Random Real(0.200, 0.400), Ignore Condition);
		Skip If(Random Real(0, 1) > 0.500, 1);
		Press Button(Event Player, Ability 1);
	}
}

rule("AI Sigma Accretion")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Sigma;
	}

	conditions
	{
		Event Player.botAI_Enabled == True;
		Event Player.botAI_CanUseAbilities == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 20;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 15) == True;
		Is Moving(Players In Slot(Slot Of(Event Player), Team 1)) == False;
		Ability Cooldown(Event Player, Button(Ability 2)) == 0;
	}

	actions
	{
		Call Subroutine(botAI_Facing_Stop);
		Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Position Of(Players In Slot(Slot Of(Event Player),
			Team 1)) + Vector(0, Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) * 0.100, 0)),
			Random Integer(270, 360), To World, Direction and Turn Rate);
		Wait(0.250, Ignore Condition);
		Press Button(Event Player, Ability 2);
		Wait(0.700, Ignore Condition);
		Call Subroutine(botAI_Facing_Reset);
	}
}

rule("AI Sigma Experimental Barrier")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Sigma;
	}

	conditions
	{
		Event Player.botAI_Enabled == True;
		Event Player.botAI_CanUseAbilities == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 15) == True;
	}

	actions
	{
		Skip If(Is Button Held(Event Player, Secondary Fire), 1);
		Start Holding Button(Event Player, Secondary Fire);
		Wait(Random Real(0.200, 0.300), Ignore Condition);
		Stop Holding Button(Event Player, Secondary Fire);
		Wait(4.800, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("AI Sigma Gravitic Flux")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Sigma;
	}

	conditions
	{
		Event Player.botAI_Enabled == True;
		Event Player.botAI_CanUseAbilities == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Ultimate Charge Percent(Event Player) == 100;
		Health(Players In Slot(Slot Of(Event Player), Team 1)) >= 125;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 20;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 15) == True;
	}

	actions
	{
		Press Button(Event Player, Ultimate);
		Start Holding Button(Event Player, Jump);
		Wait(Random Real(1.750, 3), Ignore Condition);
		Press Button(Event Player, Primary Fire);
		Wait(0.750, Ignore Condition);
		Call Subroutine(botAI_Facing_Body);
		Start Holding Button(Event Player, Primary Fire);
		Wait(1.250, Ignore Condition);
		Stop Holding Button(Event Player, Primary Fire);
		Call Subroutine(botAI_Facing_Reset);
	}
}

rule("AI Echo General")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Echo;
	}

	conditions
	{
		Is Game In Progress == True;
		Is Alive(Event Player) == True;
		Event Player.botAI_Enabled == True;
		Is Using Ultimate(Event Player) == False;
		Is Duplicating(Event Player) == False;
	}

	actions
	{
		Event Player.botAI_OptimalDistance = Random Real(9, 13);
		Event Player.botAI_FacingDefault = Global.facingDefault_Body;
	}
}

rule("AI Echo Glide")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Echo;
	}

	conditions
	{
		Event Player.botAI_Enabled == True;
		Event Player.botAI_CanUseAbilities == True;
		Is Alive(Event Player) == True;
		Is In Air(Event Player) == True;
	}

	actions
	{
		Start Holding Button(Event Player, Jump);
		Wait(0.500, Ignore Condition);
		Loop If Condition Is True;
		Stop Holding Button(Event Player, Jump);
	}
}

rule("AI Echo Attack")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Echo;
	}

	conditions
	{
		Event Player.botAI_Enabled == True;
		Event Player.botAI_CanAttack == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 35;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 10) == True;
	}

	actions
	{
		Skip If(Is Button Held(Event Player, Primary Fire), 1);
		Start Holding Button(Event Player, Primary Fire);
		Wait(0.350, Ignore Condition);
		Loop If Condition Is True;
		Stop Holding Button(Event Player, Primary Fire);
	}
}

rule("AI Echo Flight")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Echo;
	}

	conditions
	{
		Event Player.botAI_Enabled == True;
		Event Player.botAI_CanUseAbilities == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Ability Cooldown(Event Player, Button(Ability 1)) == 0;
	}

	actions
	{
		Press Button(Event Player, Ability 1);
	}
}

rule("AI Echo Focusing Beam")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Echo;
	}

	conditions
	{
		Event Player.botAI_Enabled == True;
		Event Player.botAI_CanUseAbilities == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Health(Players In Slot(Slot Of(Event Player), Team 1)) <= Max Health(Players In Slot(Slot Of(Event Player), Team 1)) / 2;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 16;
		Ability Cooldown(Event Player, Button(Ability 2)) == 0;
	}

	actions
	{
		Press Button(Event Player, Ability 2);
	}
}

rule("AI Echo Sticky Bombs")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Echo;
	}

	conditions
	{
		Event Player.botAI_Enabled == True;
		Event Player.botAI_CanUseAbilities == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Health(Players In Slot(Slot Of(Event Player), Team 1)) >= Max Health(Players In Slot(Slot Of(Event Player), Team 1)) / 2;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 20;
		Ability Cooldown(Event Player, Button(Secondary Fire)) == 0;
	}

	actions
	{
		Call Subroutine(botAI_Facing_Stop);
		Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Position Of(Players In Slot(Slot Of(Event Player),
			Team 1)) + Vector(0, 0.500, 0)), Random Real(270, 360), To World, Direction and Turn Rate);
		Wait(0.250, Ignore Condition);
		Press Button(Event Player, Secondary Fire);
		Wait(0.750, Ignore Condition);
		Call Subroutine(botAI_Facing_Reset);
	}
}

rule("AI Echo Duplicate")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Echo;
	}

	conditions
	{
		Event Player.botAI_Enabled == True;
		Event Player.botAI_CanUseAbilities == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Ultimate Charge Percent(Event Player) == 100;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 20;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 6.500) == True;
	}

	actions
	{
		Press Button(Event Player, Ultimate);
	}
}

rule("Player Respawn Invulnerability")
{
	event
	{
		Player Died;
		Team 1;
		All;
	}

	conditions
	{
		Event Player.player_Difficulty >= Global.difficultyAIEasy;
	}

	actions
	{
		Set Status(Event Player, Null, Invincible, 2.250);
	}
}

rule("Debug Toggle")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is Game In Progress == True;
		Is Button Held(Event Player, Interact) == True;
		Is Button Held(Event Player, Reload) == True;
		Is Button Held(Event Player, Jump) == True;
	}

	actions
	{
		If(Event Player.debugHUD_enabled == True);
			For Player Variable(Event Player, debugHUD_i, 0, Count Of(Event Player.debugHUD), 1);
				Destroy HUD Text(Event Player.debugHUD[Event Player.debugHUD_i]);
			End;
			Event Player.debugHUD_enabled = False;
		Else;
			Event Player.debugHUD = Empty Array;
			Event Player.debugHUD_enabled = True;
			Create HUD Text(Event Player, Custom String("Server Load: {0}", Server Load), Custom String("Average: {0}", Server Load Average),
				Custom String("Peak: {0}", Server Load Peak), Top, 3, Orange, Yellow, Red, Visible To and String, Default Visibility);
			Modify Player Variable(Event Player, debugHUD, Append To Array, Last Text ID);
			Create HUD Text(Event Player, Custom String(""), Custom String("Enemy Pos: {0}", Position Of(Players In Slot(Slot Of(Event Player),
				Team 2))), Custom String("Player Pos: {0}", Position Of(Event Player)), Left, 4, Yellow, Red, Sky Blue, Visible To and String,
				Default Visibility);
			Modify Player Variable(Event Player, debugHUD, Append To Array, Last Text ID);
			Create HUD Text(Event Player, Custom String("Player Dist From Home: {0}", Distance Between(Event Player,
				Event Player.player_Home)), Null, Custom String("Enemy Dist From Home: {0}", Distance Between(Players In Slot(Slot Of(
				Event Player), Team 2), Event Player.player_Home)), Left, 5, Yellow, White, White, Visible To and String, Default Visibility);
			Modify Player Variable(Event Player, debugHUD, Append To Array, Last Text ID);
			Create HUD Text(Event Player, Custom String("Enemy Dist From Player: {0}", Distance Between(Event Player, Players In Slot(Slot Of(
				Event Player), Team 2))), Null, Null, Left, 5.200, Yellow, White, Yellow, Visible To and String, Default Visibility);
			Modify Player Variable(Event Player, debugHUD, Append To Array, Last Text ID);
			Create HUD Text(Event Player, Custom String("Enemy Ult Charge: {0}", Ultimate Charge Percent(Players In Slot(Slot Of(Event Player),
				Team 2))), Null, Null, Right, 6, Turquoise, White, White, Visible To and String, Default Visibility);
			Modify Player Variable(Event Player, debugHUD, Append To Array, Last Text ID);
			Create HUD Text(Event Player, Custom String("Player Facing Dir: {0}", Facing Direction Of(Event Player)), Null, Custom String(
				"Enemy Facing Dir: {0}", Facing Direction Of(Players In Slot(Slot Of(Event Player), Team 2))), Left, 6.100, White, White,
				White, Visible To and String, Default Visibility);
			Modify Player Variable(Event Player, debugHUD, Append To Array, Last Text ID);
			Create HUD Text(Event Player, Custom String("Primary Fire CD: {0}", Ability Cooldown(Event Player, Button(Primary Fire))), Null,
				Null, Top, 60.100, White, White, White, Visible To and String, Default Visibility);
			Modify Player Variable(Event Player, debugHUD, Append To Array, Last Text ID);
			Create HUD Text(Event Player, Custom String("Secondary Fire CD: {0}", Ability Cooldown(Event Player, Button(Secondary Fire))),
				Null, Null, Top, 60.200, White, White, White, Visible To and String, Default Visibility);
			Modify Player Variable(Event Player, debugHUD, Append To Array, Last Text ID);
			Create HUD Text(Event Player, Custom String("Ability 1 CD: {0}", Ability Cooldown(Event Player, Button(Ability 1))), Null, Null,
				Top, 60.300, White, White, White, Visible To and String, Default Visibility);
			Modify Player Variable(Event Player, debugHUD, Append To Array, Last Text ID);
			Create HUD Text(Event Player, Custom String("Ability 2 CD: {0}", Ability Cooldown(Event Player, Button(Ability 2))), Null, Null,
				Top, 60.400, White, White, White, Visible To and String, Default Visibility);
			Modify Player Variable(Event Player, debugHUD, Append To Array, Last Text ID);
			Create HUD Text(Event Player, Custom String("Ultimate CD: {0}", Ability Cooldown(Event Player, Button(Ultimate))), Null, Null, Top,
				60.500, White, White, White, Visible To and String, Default Visibility);
			Modify Player Variable(Event Player, debugHUD, Append To Array, Last Text ID);
			Create HUD Text(Event Player, Custom String("Crouch CD: {0}", Ability Cooldown(Event Player, Button(Crouch))), Null, Null, Top,
				60.600, White, White, White, Visible To and String, Default Visibility);
			Modify Player Variable(Event Player, debugHUD, Append To Array, Last Text ID);
			Create HUD Text(Event Player, Custom String("Jump CD: {0}", Ability Cooldown(Event Player, Button(Jump))), Null, Null, Top, 60.700,
				White, White, White, Visible To and String, Default Visibility);
			Modify Player Variable(Event Player, debugHUD, Append To Array, Last Text ID);
			Create HUD Text(Event Player, Custom String("Reload CD: {0}", Ability Cooldown(Event Player, Button(Reload))), Null, Null, Top,
				60.800, White, White, White, Visible To and String, Default Visibility);
			Modify Player Variable(Event Player, debugHUD, Append To Array, Last Text ID);
			Wait(2, Ignore Condition);
		End;
	}
}

rule("Subroutine: infoToggle")
{
	event
	{
		Subroutine;
		infoToggle;
	}

	actions
	{
		If(Event Player.showingInfoText == True);
			For Player Variable(Event Player, hudTextInfo_i, 0, Count Of(Event Player.hudTextInfo), 1);
				Destroy HUD Text(Event Player.hudTextInfo[Event Player.hudTextInfo_i]);
			End;
			Event Player.showingInfoText = False;
		Else;
			Event Player.hudTextInfo = Empty Array;
			Event Player.showingInfoText = True;
			Create HUD Text(Event Player, Custom String("Welcome to Practice Field: Expanse!"), Global.twitchURL, Custom String(
				"Created by {0}", Global.programmerName), Top, 3, Aqua, Purple, Sky Blue, Visible To and String, Default Visibility);
			Modify Player Variable(Event Player, hudTextInfo, Append To Array, Last Text ID);
			Create HUD Text(Event Player, Custom String(""), Null, Custom String(
				"This workshop mode was designed initially as an aim and reaction time practice for Widowmaker."), Top, 4, Yellow, White,
				White, Visible To and String, Default Visibility);
			Modify Player Variable(Event Player, hudTextInfo, Append To Array, Last Text ID);
			Create HUD Text(Event Player, Custom String(""), Null, Custom String(
				"I have since expanded it so that it can be used to warmup on ALL heroes."), Top, 5, Yellow, White, White,
				Visible To and String, Default Visibility);
			Modify Player Variable(Event Player, hudTextInfo, Append To Array, Last Text ID);
			Create HUD Text(Event Player, Custom String(""), Custom String("This is version {0}", Global.version), Custom String(
				"The AI modes contain AI for all heroes written from scratch by myself. The bots do not attack below the difficulty \"{0}\".", Global.difficulty3_Name),
				Top, 5.100, Yellow, White, White, Visible To and String, Default Visibility);
			Modify Player Variable(Event Player, hudTextInfo, Append To Array, Last Text ID);
			Create HUD Text(Event Player, Custom String(""), Null, Custom String(
				"Look above you for more options! Press [{0}] while looking at an option.", Button(Interact)), Top, 5.200, Yellow, White, Yellow,
				Visible To and String, Default Visibility);
			Modify Player Variable(Event Player, hudTextInfo, Append To Array, Last Text ID);
			Create HUD Text(Event Player, Custom String(""), Null, Custom String("See the top left corner for controls."), Top, 6, Yellow,
				White, Green, Visible To and String, Default Visibility);
			Modify Player Variable(Event Player, hudTextInfo, Append To Array, Last Text ID);
			Create HUD Text(Event Player, Custom String(""), Custom String("For More Information & Complete Code go to: "),
				Global.githubURL, Top, 7, Yellow, White, Sky Blue, Visible To and String, Default Visibility);
			Modify Player Variable(Event Player, hudTextInfo, Append To Array, Last Text ID);
			Create HUD Text(Event Player, Custom String(""), Custom String("Press [{0}] and [{1}] to hide this text", Button(Crouch), Button(Interact)), Null, Top, 8,
				Yellow, White, Sky Blue, Visible To and String, Default Visibility);
			Modify Player Variable(Event Player, hudTextInfo, Append To Array, Last Text ID);
		End;
	}
}

rule("Help Skip Message")
{
	event
	{
		Player Died;
		Team 1;
		All;
	}

	conditions
	{
		Is Game In Progress == True;
		Players In Slot(Slot Of(Event Player), Team 2).currentKillNumber >= 4;
		Players In Slot(Slot Of(Event Player), Team 2).currentKillNumber % 4 == 0;
		Event Player.player_Difficulty >= Global.difficultyAIEasy;
	}

	actions
	{
		Small Message(Event Player, Custom String("To skip {0} hold [{1}] and press [{2}]", Hero Icon String(Hero Of(
			Players In Slot(Slot Of(Event Player), Team 2))), Button(Interact), Button(Primary Fire)));
	}
}

rule("Special Rule: Doomfist Rocket Punch Damage")
{
	event
	{
		Ongoing - Each Player;
		All;
		Doomfist;
	}

	conditions
	{
		Has Status(Players In Slot(Slot Of(Event Player), Opposite Team Of(Team Of(Event Player))), Stunned) == True;
		Distance Between(Players In Slot(Slot Of(Event Player), Opposite Team Of(Team Of(Event Player))), Players In Slot(Slot Of(
			Event Player), Team 1).player_Home) >= Players In Slot(Slot Of(Event Player), Team 1).player_ZoneRadius - 1;
	}

	actions
	{
		Apply Impulse(Players In Slot(Slot Of(Event Player), Opposite Team Of(Team Of(Event Player))), Direction Towards(Players In Slot(
			Slot Of(Event Player), Opposite Team Of(Team Of(Event Player))), Event Player), 1, To World, Cancel Contrary Motion);
		Damage(Players In Slot(Slot Of(Event Player), Opposite Team Of(Team Of(Event Player))), Event Player,
			Event Player.doomfistPunchDamage);
		Event Player.doomfistPunchCharge = 0;
		Event Player.doomfistPunchDamage = 0;
	}
}

disabled rule("test")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	actions
	{
		Create HUD Text(Event Player, Custom String("{0} {1} {2}", Ability Cooldown(Event Player, Button(Ability 1)), Ability Cooldown(
			Event Player, Button(Ability 2)), Ability Cooldown(Event Player, Button(Secondary Fire))), Null, Null, Left, 0, White, White,
			White, Visible To and String, Default Visibility);
		Create HUD Text(Event Player, Custom String("{0} {1} {2}", Ability Cooldown(Event Player, Button(Primary Fire)), Ability Cooldown(
			Event Player, Button(Crouch)), Ability Cooldown(Event Player, Button(Reload))), Null, Null, Left, 0, White, White, White,
			Visible To and String, Default Visibility);
		Create HUD Text(Event Player, Is Using Ability 2(Event Player), Null, Null, Left, 0, White, White, White, Visible To and String,
			Default Visibility);
		Create HUD Text(Event Player, Is Using Ability 1(Event Player), Null, Null, Left, 0, White, White, White, Visible To and String,
			Default Visibility);
	}
}

rule("Player Virtual Mercy")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is Communicating(Event Player, Need Healing) == True;
		Is Button Held(Event Player, Crouch) == True;
	}

	actions
	{
		If(Event Player.player_HasMercy == True);
			Stop Damage Modification(Event Player.player_Mercy_Damage_ID);
			Stop Heal Over Time(Event Player.player_Mercy_Heal_ID);
			Destroy Effect(Event Player.playerMercyEffectBeam);
			Destroy Effect(Event Player.playerMercyEffectSphere);
			Destroy HUD Text(Event Player.player_Mercy_HUD);
			Event Player.player_HasMercy = False;
			Event Player.player_Mercy_isHealing = False;
			Small Message(Event Player, Custom String("Virtual Mercy Disabled"));
		Else;
			Create Effect(All Players(All Teams), Sphere, Yellow, Position Of(Event Player) + World Vector Of(Vector(0, 2.500, -8),
				Event Player, Rotation), 1, Visible To Position and Radius);
			Event Player.playerMercyEffectSphere = Last Created Entity;
			Event Player.player_HasMercy = True;
			Event Player.player_Mercy_isHealing = True;
			Small Message(Event Player, Custom String("Virtual Mercy Enabled"));
		End;
	}
}

rule("Player Virtual Mercy Heal")
{
	event
	{
		Player Took Damage;
		Team 1;
		All;
	}

	conditions
	{
		Is Alive(Event Player) == True;
		Health(Event Player) < Max Health(Event Player);
		Event Player.player_HasMercy == True;
		Event Player.player_Mercy_isHealing == False;
	}

	actions
	{
		Stop Damage Modification(Event Player.player_Mercy_Damage_ID);
		Destroy Effect(Event Player.playerMercyEffectBeam);
		Create Beam Effect(All Players(All Teams), Good Beam, Event Player.player_Home, Event Player, Yellow,
			Visible To Position and Radius);
		Event Player.playerMercyEffectBeam = Last Created Entity;
		Start Heal Over Time(Event Player, Null, 9999, 55);
		Wait(0.100, Ignore Condition);
		Event Player.player_Mercy_Heal_ID = Last Heal Over Time ID;
		Event Player.player_Mercy_isHealing = True;
		Destroy HUD Text(Event Player.player_Mercy_HUD);
		Wait(0.050, Ignore Condition);
		Create HUD Text(Event Player, Icon String(Plus), Null, Null, Top, 50, Yellow, White, White, Visible To and String,
			Default Visibility);
		Event Player.player_Mercy_HUD = Last Text ID;
	}
}

rule("Player Virtual Mercy Damage Boost")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is Alive(Event Player) == True;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 2), 15) == True;
		Health(Event Player) >= Max Health(Event Player) / 2;
		Event Player.player_HasMercy == True;
		Event Player.player_Mercy_isHealing == True;
	}

	actions
	{
		Stop Heal Over Time(Event Player.player_Mercy_Heal_ID);
		Destroy Effect(Event Player.playerMercyEffectBeam);
		Create Beam Effect(All Players(All Teams), Good Beam, Event Player.player_Home, Event Player, Blue,
			Visible To Position and Radius);
		Event Player.playerMercyEffectBeam = Last Created Entity;
		Start Damage Modification(Players In Slot(Slot Of(Event Player), Team 2), Event Player, 130,
			Receivers Damagers and Damage Percent);
		Wait(0.100, Ignore Condition);
		Event Player.player_Mercy_Damage_ID = Last Damage Modification ID;
		Event Player.player_Mercy_isHealing = False;
		Destroy HUD Text(Event Player.player_Mercy_HUD);
		Wait(0.050, Ignore Condition);
		Create HUD Text(Event Player, Icon String(Arrow: Up), Null, Null, Top, 50, Blue, White, White, Visible To and String,
			Default Visibility);
		Event Player.player_Mercy_HUD = Last Text ID;
	}
}

rule("Player Ana Self Nano Boost")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Ana;
	}

	conditions
	{
		Is Alive(Event Player) == True;
		Ultimate Charge Percent(Event Player) == 100;
		Is Button Held(Event Player, Ultimate) == True;
	}

	actions
	{
		Set Ultimate Charge(Event Player, 0);
		Wait(0.150, Ignore Condition);
		Abort If(Is Alive(Event Player) == False);
		Set Ultimate Ability Enabled(Event Player, False);
		Big Message(Event Player, Custom String("NANO BOOST ACTIVATED!"));
		Play Effect(All Players(All Teams), Good Pickup Effect, Blue, Event Player, 2);
		Play Effect(All Players(All Teams), Explosion Sound, White, Event Player, 50);
		Heal(Event Player, Event Player, 250);
		Start Damage Modification(Players In Slot(Slot Of(Event Player), Team 2), Event Player, 150,
			Receivers Damagers and Damage Percent);
		Event Player.player_DamageModDealt_ID = Last Damage Modification ID;
		Start Damage Modification(Event Player, Players In Slot(Slot Of(Event Player), Team 2), 50, Receivers Damagers and Damage Percent);
		Event Player.player_DamageModReceived_ID = Last Damage Modification ID;
		For Player Variable(Event Player, index, 0, 9, 0.250);
			If(Is Alive(Event Player));
				Wait(0.250, Ignore Condition);
			Else;
				Break;
			End;
		End;
		Set Ultimate Ability Enabled(Event Player, True);
		Stop Damage Modification(Event Player.player_DamageModDealt_ID);
		Stop Damage Modification(Event Player.player_DamageModReceived_ID);
	}
}

rule("Sky Menu Help")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is In View Angle(Event Player, Event Player.skyMenu0, 28) == True;
		Is Alive(Event Player) == True;
		Is Button Held(Event Player, Primary Fire) == True;
	}

	actions
	{
		Small Message(Event Player, Custom String("Press [Interact] to select options (F by default)"));
	}
}

rule("Subroutine: botAI_Facing_FlickIn")
{
	event
	{
		Subroutine;
		botAI_Facing_FlickIn;
	}

	actions
	{
		Players In Slot(Slot Of(Event Player), Team 2).botAI_Facing_FlickPoint = Facing Direction Of(Event Player);
		Call Subroutine(botAI_Facing_Stop);
		Start Facing(Players In Slot(Slot Of(Event Player), Team 2), Direction Towards(Eye Position(Event Player), Eye Position(
			Players In Slot(Slot Of(Event Player), Team 1)) + World Vector Of(Vector(Random Real(0.025, 0.050), Random Real(0.025, 0.050),
			Random Real(0.025, 0.050)), Players In Slot(Slot Of(Event Player), Team 1), Rotation)), Random Integer(360, 540), To World,
			Direction and Turn Rate);
		Wait(Random Real(0.200, 0.300), Ignore Condition);
	}
}

rule("AI Ashe Coach Gun Defensive")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Ashe;
	}

	conditions
	{
		Event Player.botAI_Enabled == True;
		Event Player.botAI_CanUseAbilities == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Ability Cooldown(Event Player, Button(Ability 1)) == 0;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 9.400;
		Health(Event Player) <= 75;
	}

	actions
	{
		Press Button(Event Player, Ability 1);
	}
}

rule("AI Ashe Coach Gun Finishing")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Ashe;
	}

	conditions
	{
		Event Player.botAI_Enabled == True;
		Event Player.botAI_CanUseAbilities == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Ability Cooldown(Event Player, Button(Ability 1)) == 0;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 5;
		Health(Players In Slot(Slot Of(Event Player), Team 1)) < 90;
	}

	actions
	{
		Press Button(Event Player, Ability 1);
	}
}

rule("Debug Give Enemy Ultimate")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Reload) == True;
		Is Button Held(Event Player, Jump) == True;
		Is Button Held(Event Player, Melee) == True;
	}

	actions
	{
		Set Status(Players In Slot(Slot Of(Event Player), Team 2), Null, Stunned, 0.100);
		Wait(0.200, Ignore Condition);
		Set Ultimate Charge(Event Player, 100);
		Set Ultimate Charge(Players In Slot(Slot Of(Event Player), Team 2), 100);
		Heal(Event Player, Null, Max Health(Event Player));
		Heal(Players In Slot(Slot Of(Event Player), Team 2), Null, Max Health(Players In Slot(Slot Of(Event Player), Team 2)));
		Set Ability Cooldown(Players In Slot(Slot Of(Event Player), Team 2), Button(Ability 1), 0);
		Set Ability Cooldown(Players In Slot(Slot Of(Event Player), Team 2), Button(Ability 2), 0);
		Set Ability Cooldown(Players In Slot(Slot Of(Event Player), Team 2), Button(Secondary Fire), 0);
		Set Ability Cooldown(Players In Slot(Slot Of(Event Player), Team 2), Button(Primary Fire), 0);
	}
}

rule("AI Movement WASD Strafe On Dmg")
{
	event
	{
		Player Took Damage;
		Team 2;
		All;
	}

	conditions
	{
		Event Player.botAI_Enabled == True;
		Event Player.botAI_MoveWASD_Enabled == True;
		Is Alive(Event Player) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1))
			> Event Player.botAI_OptimalDistance + Event Player.botAI_Throttle_StrafeDistanceMod;
		Event Damage >= 50;
	}

	actions
	{
		Skip If(Random Real(0, 1) > 0.750, 2);
		Event Player.botAI_ThrottleDir = Random Value In Array(Global.moveDirStrafe);
		Call Subroutine(botAI_WASD);
	}
}

rule("Reset Enemy Position Out Of Bounds")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Is Game In Progress == True;
        Has Spawned(Event Player) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1).player_Home) > Players In Slot(Slot Of(Event Player),
			Team 1).player_EnemyDistanceMax + 15;
	}

	actions
	{
		Call Subroutine(teleportEnemy);
	}
}

rule("Subroutine: botAI_Facing_FlickOut")
{
	event
	{
		Subroutine;
		botAI_Facing_FlickOut;
	}

	actions
	{
		Call Subroutine(botAI_Facing_Stop);
		Start Facing(Players In Slot(Slot Of(Event Player), Team 2), Players In Slot(Slot Of(Event Player), Team 2)
			.botAI_Facing_FlickPoint, Random Integer(360, 540), To World, Direction and Turn Rate);
		Wait(Random Real(0.200, 0.300), Ignore Condition);
		Call Subroutine(botAI_Facing_Reset);
	}
}

rule("Subroutine: player_SetDifficulty")
{
	event
	{
		Subroutine;
		player_SetDifficulty;
	}

	actions
	{
		If(Players In Slot(Slot Of(Event Player), Team 1).player_Difficulty == 0);
			Players In Slot(Slot Of(Event Player), Team 1).player_DifficultyName = Global.difficulty0_Name;
		Else If(Players In Slot(Slot Of(Event Player), Team 1).player_Difficulty == 1);
			Players In Slot(Slot Of(Event Player), Team 1).player_DifficultyName = Global.difficulty1_Name;
		Else If(Players In Slot(Slot Of(Event Player), Team 1).player_Difficulty == 2);
			Players In Slot(Slot Of(Event Player), Team 1).player_DifficultyName = Global.difficulty2_Name;
		Else If(Players In Slot(Slot Of(Event Player), Team 1).player_Difficulty == 3);
			Players In Slot(Slot Of(Event Player), Team 2).botAI_Facing_Base = 1.070;
			Players In Slot(Slot Of(Event Player), Team 2).botAI_FacingPadMin = 0;
			Players In Slot(Slot Of(Event Player), Team 2).botAI_FacingPadMax = 15;
			Players In Slot(Slot Of(Event Player), Team 2).botAI_FacingCapMin = 360;
			Players In Slot(Slot Of(Event Player), Team 2).botAI_FacingCapMax = 450;
            Players In Slot(Slot Of(Event Player), Team 2).botAI_FacingAngleModifier = 2;
			Players In Slot(Slot Of(Event Player), Team 1).player_DifficultyName = Global.difficulty3_Name;
            Players In Slot(Slot Of(Event Player), Team 1).player_SelfHealAmount = 0.5;
		Else If(Players In Slot(Slot Of(Event Player), Team 1).player_Difficulty == 4);
			Players In Slot(Slot Of(Event Player), Team 2).botAI_Facing_Base = 1.075;
			Players In Slot(Slot Of(Event Player), Team 2).botAI_FacingPadMin = 15;
			Players In Slot(Slot Of(Event Player), Team 2).botAI_FacingPadMax = 30;
			Players In Slot(Slot Of(Event Player), Team 2).botAI_FacingCapMin = 630;
			Players In Slot(Slot Of(Event Player), Team 2).botAI_FacingCapMax = 720;
            Players In Slot(Slot Of(Event Player), Team 2).botAI_FacingAngleModifier = 3;
			Players In Slot(Slot Of(Event Player), Team 1).player_DifficultyName = Global.difficulty4_Name;
            Players In Slot(Slot Of(Event Player), Team 1).player_SelfHealAmount = 0.333;
		Else If(Players In Slot(Slot Of(Event Player), Team 1).player_Difficulty == 5);
			Players In Slot(Slot Of(Event Player), Team 2).botAI_Facing_Base = 1.080;
			Players In Slot(Slot Of(Event Player), Team 2).botAI_FacingPadMin = 30;
			Players In Slot(Slot Of(Event Player), Team 2).botAI_FacingPadMax = 45;
			Players In Slot(Slot Of(Event Player), Team 2).botAI_FacingCapMin = 720;
			Players In Slot(Slot Of(Event Player), Team 2).botAI_FacingCapMax = 810;
            Players In Slot(Slot Of(Event Player), Team 2).botAI_FacingAngleModifier = 4;
			Players In Slot(Slot Of(Event Player), Team 1).player_DifficultyName = Global.difficulty5_Name;
            Players In Slot(Slot Of(Event Player), Team 1).player_SelfHealAmount = 0.25;
		End;
		Small Message(Players In Slot(Slot Of(Event Player), Team 1), Custom String("Difficulty Set To {0}", Players In Slot(Slot Of(
			Event Player), Team 1).player_DifficultyName));
	}
}

rule("Subroutine: cycleHeroType")
{
	event
	{
		Subroutine;
		cycleHeroType;
	}

	actions
	{
		If(Players In Slot(Slot Of(Event Player), Team 1).player_CurrentHeroGroupName == Global.heroTypeName_All);
			Players In Slot(Slot Of(Event Player), Team 1).player_CurrentHeroGroup = All Tank Heroes;
			Players In Slot(Slot Of(Event Player), Team 1).player_CurrentHeroGroupName = Global.heroTypeName_Tank;
		Else If(Players In Slot(Slot Of(Event Player), Team 1).player_CurrentHeroGroupName == Global.heroTypeName_Tank);
			Players In Slot(Slot Of(Event Player), Team 1).player_CurrentHeroGroup = All Damage Heroes;
			Players In Slot(Slot Of(Event Player), Team 1).player_CurrentHeroGroupName = Global.heroTypeName_Damage;
		Else If(Players In Slot(Slot Of(Event Player), Team 1).player_CurrentHeroGroupName == Global.heroTypeName_Damage);
			Players In Slot(Slot Of(Event Player), Team 1).player_CurrentHeroGroup = All Support Heroes;
			Players In Slot(Slot Of(Event Player), Team 1).player_CurrentHeroGroupName = Global.heroTypeName_Support;
		Else If(Players In Slot(Slot Of(Event Player), Team 1).player_CurrentHeroGroupName == Global.heroTypeName_Support);
			Players In Slot(Slot Of(Event Player), Team 1).player_CurrentHeroGroup = All Heroes;
			Players In Slot(Slot Of(Event Player), Team 1).player_CurrentHeroGroupName = Global.heroTypeName_All;
		End;
		Call Subroutine(resetProgress);
	}
}

rule("Sky Menu Cycle Hero Type")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is Game In Progress == True;
		Is In View Angle(Event Player, Event Player.skyMenu0, 10) == True;
		Is Button Held(Event Player, Interact) == True;
	}

	actions
	{
		Play Effect(Event Player, Explosion Sound, White, Event Player, 15);
		Call Subroutine(cycleHeroType);
	}
}

rule("AI Subroutine: botAI_Facing_Head_Projectile")
{
	event
	{
		Subroutine;
		botAI_Facing_Head_Projectile;
	}

	actions
	{
		Call Subroutine(botAI_Facing_Stop);
		If(Players In Slot(Slot Of(Event Player), Team 1).player_Difficulty >= Global.difficultyAIEasy);
			Start Facing(Players In Slot(Slot Of(Event Player), Team 2), Direction From Angles(Horizontal Angle Towards(Players In Slot(
				Slot Of(Event Player), Team 2), Position Of(Players In Slot(Slot Of(Event Player), Team 1))), 0.500 * Arcsine In Degrees(
				-9.800 * Distance Between(Eye Position(Players In Slot(Slot Of(Event Player), Team 2)), Eye Position(Players In Slot(Slot Of(
				Event Player), Team 1))) / Players In Slot(Slot Of(Event Player), Team 2).botAI_ProjectileSpeed_Primary ^ 2)), Min(
				Random Integer(360, 540), Players In Slot(Slot Of(Event Player), Team 2).botAI_Facing_Base ^ Angle Between Vectors(
				Facing Direction Of(Players In Slot(Slot Of(Event Player), Team 2)), Direction Towards(Eye Position(Players In Slot(Slot Of(
				Event Player), Team 2)), Eye Position(Players In Slot(Slot Of(Event Player), Team 1))))), To Player, Direction and Turn Rate);
		Else If(Players In Slot(Slot Of(Event Player), Team 1).player_Difficulty == Global.difficultyAIHard);
		End;
	}
}

rule("AI Subroutine: botAI_Facing_Body")
{
	event
	{
		Subroutine;
		botAI_Facing_Body;
	}

	actions
	{
		Call Subroutine(botAI_Facing_Stop);
		Start Facing(Players In Slot(Slot Of(Event Player), Team 2), Direction Towards(Eye Position(Players In Slot(Slot Of(Event Player),
			Team 2)), Eye Position(Players In Slot(Slot Of(Event Player), Team 1)) - Vector(0, 0.200, 0)), Min(Random Integer(
			Players In Slot(Slot Of(Event Player), Team 2).botAI_FacingCapMin, Players In Slot(Slot Of(Event Player), Team 2)
			.botAI_FacingCapMax), Players In Slot(Slot Of(Event Player), Team 2).botAI_Facing_Base ^ Angle Between Vectors(
			Facing Direction Of(Players In Slot(Slot Of(Event Player), Team 2)), Direction Towards(Eye Position(Players In Slot(Slot Of(
			Event Player), Team 2)), Eye Position(Players In Slot(Slot Of(Event Player), Team 1)) - Vector(0, 0.200, 0)))
			+ Angle Between Vectors(Facing Direction Of(Players In Slot(Slot Of(Event Player), Team 2)), Direction Towards(Eye Position(
			Players In Slot(Slot Of(Event Player), Team 2)), Eye Position(Players In Slot(Slot Of(Event Player), Team 1)) - Vector(0,
			0.200, 0))) * Random Integer(Players In Slot(Slot Of(Event Player), Team 2).botAI_FacingAngleModifier - 0.25, Players In Slot(Slot Of(Event Player), Team 2).botAI_FacingAngleModifier) + Random Integer(Players In Slot(Slot Of(
			Event Player), Team 2).botAI_FacingPadMin, Players In Slot(Slot Of(Event Player), Team 2).botAI_FacingPadMax)), To World, Direction and Turn Rate);
	}
}

rule("AI Subroutine: botAI_Facing_Head")
{
	event
	{
		Subroutine;
		botAI_Facing_Head;
	}

	actions
	{
		Call Subroutine(botAI_Facing_Stop);
		Start Facing(Players In Slot(Slot Of(Event Player), Team 2), Direction Towards(Eye Position(Players In Slot(Slot Of(Event Player),
			Team 2)), Eye Position(Players In Slot(Slot Of(Event Player), Team 1))), Min(Random Integer(Players In Slot(Slot Of(
			Event Player), Team 2).botAI_FacingCapMin, Players In Slot(Slot Of(Event Player), Team 2).botAI_FacingCapMax), Players In Slot(
			Slot Of(Event Player), Team 2).botAI_Facing_Base ^ Angle Between Vectors(Facing Direction Of(Players In Slot(Slot Of(
			Event Player), Team 2)), Direction Towards(Eye Position(Players In Slot(Slot Of(Event Player), Team 2)), Eye Position(
			Players In Slot(Slot Of(Event Player), Team 1)))) + Angle Between Vectors(Facing Direction Of(Players In Slot(Slot Of(
			Event Player), Team 2)), Direction Towards(Eye Position(Players In Slot(Slot Of(Event Player), Team 2)), Eye Position(
			Players In Slot(Slot Of(Event Player), Team 1)))) * Random Integer(Players In Slot(Slot Of(Event Player), Team 2).botAI_FacingAngleModifier - 0.25, Players In Slot(Slot Of(Event Player), Team 2).botAI_FacingAngleModifier) + Random Integer(Players In Slot(Slot Of(
			Event Player), Team 2).botAI_FacingPadMin, Players In Slot(Slot Of(Event Player), Team 2).botAI_FacingPadMax)), To World,
			Direction and Turn Rate);
	}
}

rule("AI Subroutine: botAI_Facing_Position")
{
	event
	{
		Subroutine;
		botAI_Facing_Position;
	}

	actions
	{
		Call Subroutine(botAI_Facing_Stop);
		Start Facing(Players In Slot(Slot Of(Event Player), Team 2), Direction Towards(Eye Position(Players In Slot(Slot Of(Event Player),
			Team 2)), Position Of(Players In Slot(Slot Of(Event Player), Team 1))), Min(Random Integer(Players In Slot(Slot Of(
			Event Player), Team 2).botAI_FacingCapMin, Players In Slot(Slot Of(Event Player), Team 2).botAI_FacingCapMax), Players In Slot(
			Slot Of(Event Player), Team 2).botAI_Facing_Base ^ Angle Between Vectors(Facing Direction Of(Players In Slot(Slot Of(
			Event Player), Team 2)), Direction Towards(Eye Position(Players In Slot(Slot Of(Event Player), Team 2)), Position Of(
			Players In Slot(Slot Of(Event Player), Team 1)))) + Angle Between Vectors(Facing Direction Of(Players In Slot(Slot Of(
			Event Player), Team 2)), Direction Towards(Eye Position(Players In Slot(Slot Of(Event Player), Team 2)), Position Of(
			Players In Slot(Slot Of(Event Player), Team 1)))) * Random Integer(Players In Slot(Slot Of(Event Player), Team 2).botAI_FacingAngleModifier - 0.25, Players In Slot(Slot Of(Event Player), Team 2).botAI_FacingAngleModifier) + Random Integer(Players In Slot(Slot Of(
			Event Player), Team 2).botAI_FacingPadMin, Players In Slot(Slot Of(Event Player), Team 2).botAI_FacingPadMax)), To World,
			Direction and Turn Rate);
	}
}

rule("AI Subroutine: botAI_Facing_Reset")
{
	event
	{
		Subroutine;
		botAI_Facing_Reset;
	}

	actions
	{
		If(Players In Slot(Slot Of(Event Player), Team 2).botAI_FacingDefault == Global.facingDefault_Body);
			Call Subroutine(botAI_Facing_Body);
		Else If(Players In Slot(Slot Of(Event Player), Team 2).botAI_FacingDefault == Global.facingDefault_Head);
			Call Subroutine(botAI_Facing_Head);
		Else If(Players In Slot(Slot Of(Event Player), Team 2).botAI_FacingDefault == Global.facingDefault_Position);
			Call Subroutine(botAI_Facing_Position);
		Else If(Players In Slot(Slot Of(Event Player), Team 2).botAI_FacingDefault == Global.facingDefault_Other);
			Call Subroutine(botAI_Facing_Other);
		End;
	}
}

rule("Special Rule: Player Sombra Disable Enemy Attack")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Sombra;
	}

	conditions
	{
		Players In Slot(Slot Of(Event Player), Team 2).botAI_Enabled == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 2)) == True;
		Is Using Ability 1(Event Player) == True;
	}

	actions
	{
		Call Subroutine(botAI_Facing_Stop);
		Skip If(Players In Slot(Slot Of(Event Player), Team 2).botAI_CanAttack == False, 2);
		Players In Slot(Slot Of(Event Player), Team 2).botAI_MoveCrouch_Enabled = False;
		Players In Slot(Slot Of(Event Player), Team 2).botAI_CanAttack = False;
		Start Facing(Players In Slot(Slot Of(Event Player), Team 2), Direction From Angles(Random Integer(1, 360), Random Integer(-5, 5)),
			Random Integer(180, 360), To Player, None);
		Wait(Random Real(0.500, 1.500), Ignore Condition);
		Skip If(Random Real(0, 1) > 0.050, 1);
		Communicate(Players In Slot(Slot Of(Event Player), Team 2), Hello);
		Loop If Condition Is True;
		Call Subroutine(botAI_Facing_Reset);
		Players In Slot(Slot Of(Event Player), Team 2).botAI_CanAttack = True;
		Players In Slot(Slot Of(Event Player), Team 2).botAI_MoveCrouch_Enabled = True;
	}
}

rule("AI Subroutine: botAI_Facing_Stop")
{
	event
	{
		Subroutine;
		botAI_Facing_Stop;
	}

	actions
	{
		"Wait 2 frames before and after"
		Wait(0.033, Ignore Condition);
		Stop Facing(Players In Slot(Slot Of(Event Player), Team 2));
		Wait(0.033, Ignore Condition);
	}
}

rule("Player 1 Second Cooldown Mode")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is Alive(Event Player) == True;
		Is Button Held(Event Player, Ultimate) == True;
		Is Button Held(Event Player, Reload) == True;
		Is Button Held(Event Player, Jump) == True;
	}

	actions
	{
		Wait(1, Abort When False);
		If(Event Player.player_1SecondCoolDown_Enabled);
			Event Player.player_1SecondCoolDown_Enabled = False;
			Big Message(Event Player, Custom String("1 Second Cooldown Mode Disabled"));
		Else;
			Event Player.player_1SecondCoolDown_Enabled = True;
			Big Message(Event Player, Custom String("1 Second Cooldown Mode Enabled"));
		End;
	}
}

rule("Player 1 Second Cooldown Reset Ability 1")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Event Player.player_1SecondCoolDown_Enabled == True;
		Is Alive(Event Player) == True;
		Ability Cooldown(Event Player, Button(Ability 1)) != 0;
	}

	actions
	{
		Wait(1, Ignore Condition);
		Set Ability Cooldown(Event Player, Button(Ability 1), 0);
	}
}

rule("Player 1 Second Cooldown Reset Ability 2")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Event Player.player_1SecondCoolDown_Enabled == True;
		Is Alive(Event Player) == True;
		Ability Cooldown(Event Player, Button(Ability 2)) != 0;
	}

	actions
	{
		Wait(1, Ignore Condition);
		Set Ability Cooldown(Event Player, Button(Ability 2), 0);
	}
}

rule("Player 1 Second Cooldown Reset Primary Fire")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Event Player.player_1SecondCoolDown_Enabled == True;
		Is Alive(Event Player) == True;
		Ability Cooldown(Event Player, Button(Primary Fire)) != 0;
	}

	actions
	{
		Wait(1, Ignore Condition);
		Set Ability Cooldown(Event Player, Button(Primary Fire), 0);
	}
}

rule("Player 1 Second Cooldown Reset Secondary Fire")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Event Player.player_1SecondCoolDown_Enabled == True;
		Is Alive(Event Player) == True;
		Ability Cooldown(Event Player, Button(Secondary Fire)) != 0;
	}

	actions
	{
		Wait(1, Ignore Condition);
		Set Ability Cooldown(Event Player, Button(Secondary Fire), 0);
	}
}

rule("Player 1 Second Cooldown Reset Crouch")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Event Player.player_1SecondCoolDown_Enabled == True;
		Is Alive(Event Player) == True;
		Ability Cooldown(Event Player, Button(Crouch)) != 0;
	}

	actions
	{
		Wait(1, Ignore Condition);
		Set Ability Cooldown(Event Player, Button(Crouch), 0);
	}
}

rule("Player 1 Second Cooldown Reset Ultimate")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Event Player.player_1SecondCoolDown_Enabled == True;
		Is Alive(Event Player) == True;
		Ultimate Charge Percent(Event Player) != 100;
	}

	actions
	{
		Wait(1, Ignore Condition);
		Set Ultimate Charge(Event Player, 100);
	}
}
