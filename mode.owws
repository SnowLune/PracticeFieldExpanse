settings
{
	lobby
	{
		Allow Players Who Are In Queue: Yes
		Data Center Preference: USA - Central
		Max Spectators: 4
		Max Team 2 Players: 0
		Return To Lobby: Never
	}

	modes
	{
		disabled Elimination
		{
			Hero Selection: Limited
			Score To Win: 5
		}

		Skirmish
		{
			enabled maps
			{
				Workshop Expanse
			}
		}

		General
		{
			Game Mode Start: Immediately
			Hero Limit: Off
			Respawn Time Scalar: 0%
		}
	}

	heroes
	{
		Team 2
		{
			Wrecking Ball
			{
				Jump Vertical Speed: 500%
			}
		}

		General
		{
			Ultimate Generation: 200%
		}
	}
}

variables
{
	global:
		0: longRangeHeroes
		1: mediumRangeHeroes
		2: shortRangeHeroes
		3: veryShortRangeHeroes
		4: playerZoneRadiusDefault
		5: globalDifficulty
		6: playerBubbleRadius
		7: globalMaxKills
		8: projectileHeroes
		11: longDistance
		12: mediumDistance
		13: shortDistance
		14: veryShortDistance
		16: positiveNegativeArray
		18: reactionTimerDefault
		20: serverLoad
		21: moveDirAll
		22: moveDirForwards
		23: moveDirBackwards
		24: version
		26: difficultyEasy
		27: difficultyNormal
		28: difficultyHard
		29: difficultyRealistic
		30: difficultyNightmare

	player:
		0: initSpawned
		1: thisPlayerHome
		2: changingHero
		3: playerZoneRadius
		4: currentKillNumber
		5: playerMaxKills
		6: currentHero
		7: playerDifficulty
		8: hudTextInfo
		9: damageDone
		10: newDamage
		11: showingInfoText
		12: reactionTimer
		13: hudTextInfo_i
		14: nextHero
		15: targetHelpIndicatorText
		18: botDistanceMin
		19: botDistanceMax
		20: debugHUD
		21: debugHUD_i
		22: debugHUD_enabled
		23: newEnemyX
		24: newEnemyZ
		25: doomfistPunchDamage
		26: enemyDistanceModifier
		27: enemyDistanceMax
		28: skyMenu1
		29: skyMenu2
		30: skyMenu3
		31: skyMenu4
		32: skyMenu0
		33: index
		34: previousPlayerHero
		35: doomfistPunchCharge
		36: mccreeDeadeyeCharge
		37: mccreeDeadeyeRate
		38: mccreeDeadeyeUse
		40: botAI_ThrottleDir
		41: botAI_UsingAbility
		42: botAI_Enabled
		43: botAI_FacingX
		44: botAI_FacingY
		45: botAI_FacingZ
		46: botAI_MoveWASD_Enabled
		47: botAI_OptimalDistance
		48: botAI_HeroAshe_ShotsFired
		49: botAI_MoveCrouch_Enabled
		50: botAI_MoveJump_Enabled
		51: botAI_FacingTarget
		52: botAI_Cooldown_Ability1
		53: botAI_Cooldown_Ability2
		54: botAI_Cooldown_Ability3
		55: botAI_UseTime_Ability1
		56: botAI_UseTime_Ability2
		57: botAI_UseTime_Ability3
		58: botAI_Resource_1
		59: botAI_Resource_2
		60: botAI_Resource_3
		61: botAI_CanUseAbilities
		62: botAI_CanAttack
		63: botAI_Anchor_Position
		64: botAI_Anchor_DriftMax
		65: botAI_Anchor_Enabled
}

subroutines
{
	0: nextHero
	1: previousHero
	2: teleportEnemy
	3: resetBot
	4: resetProgress
	5: botAI_Crouch
	6: setHeroDistanceModifier
	7: botAI_Jump
	10: botAI_WASD
	11: botAI_FacingReset
	12: botAI_FacingEyePosition
	13: botAI_RealisticMode_Enable
	14: infoToggle
	15: botAI_FacingAbsolute
	16: botAI_RealisticMode_Disable
	17: botAI_MoveTowardsAnchor
}

rule("Info")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Set Global Variable(version, 0.983);
	}
}

rule("Global Define")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Set Global Variable(longDistance, 50);
		Set Global Variable(mediumDistance, 37.500);
		Set Global Variable(shortDistance, 25);
		Set Global Variable(veryShortDistance, 12.500);
		Set Global Variable(reactionTimerDefault, 2.500);
		Set Global Variable(playerZoneRadiusDefault, 12.500);
		Set Global Variable(playerBubbleRadius, Square Root(Multiply(Raise To Power(50, 2), 2)));
		Set Global Variable(moveDirAll, Empty Array);
		Modify Global Variable(moveDirAll, Append To Array, Forward);
		Modify Global Variable(moveDirAll, Append To Array, Left);
		Modify Global Variable(moveDirAll, Append To Array, Right);
		Modify Global Variable(moveDirAll, Append To Array, Vector(1, 0, 1));
		Modify Global Variable(moveDirAll, Append To Array, Vector(-1, 0, 1));
		Modify Global Variable(moveDirAll, Append To Array, Backward);
		Modify Global Variable(moveDirAll, Append To Array, Vector(1, 0, -1));
		Modify Global Variable(moveDirAll, Append To Array, Vector(-1, 0, -1));
		Set Global Variable(moveDirForwards, Empty Array);
		Modify Global Variable(moveDirForwards, Append To Array, Forward);
		Modify Global Variable(moveDirForwards, Append To Array, Left);
		Modify Global Variable(moveDirForwards, Append To Array, Right);
		Modify Global Variable(moveDirForwards, Append To Array, Vector(1, 0, 1));
		Modify Global Variable(moveDirForwards, Append To Array, Vector(-1, 0, 1));
		Set Global Variable(moveDirBackwards, Empty Array);
		Modify Global Variable(moveDirBackwards, Append To Array, Left);
		Modify Global Variable(moveDirBackwards, Append To Array, Right);
		Modify Global Variable(moveDirBackwards, Append To Array, Backward);
		Modify Global Variable(moveDirBackwards, Append To Array, Vector(1, 0, -1));
		Modify Global Variable(moveDirBackwards, Append To Array, Vector(-1, 0, -1));
		Set Global Variable(positiveNegativeArray, Empty Array);
		Modify Global Variable(positiveNegativeArray, Append To Array, -1);
		Modify Global Variable(positiveNegativeArray, Append To Array, 1);
		Set Global Variable(difficultyEasy, 0);
		Set Global Variable(difficultyNormal, 1);
		Set Global Variable(difficultyHard, 2);
		Set Global Variable(difficultyRealistic, 3);
		Set Global Variable(difficultyNightmare, 4);
		Set Global Variable(serverLoad, Server Load);
	}
}

rule("Global Hero Define")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Set Global Variable(longRangeHeroes, Empty Array);
		Modify Global Variable(longRangeHeroes, Append To Array, Hero(Widowmaker));
		Set Global Variable(mediumRangeHeroes, Empty Array);
		Modify Global Variable(mediumRangeHeroes, Append To Array, Hero(Ashe));
		Modify Global Variable(mediumRangeHeroes, Append To Array, Hero(Ana));
		Modify Global Variable(mediumRangeHeroes, Append To Array, Hero(Baptiste));
		Modify Global Variable(mediumRangeHeroes, Append To Array, Hero(Hanzo));
		Set Global Variable(shortRangeHeroes, Empty Array);
		Modify Global Variable(shortRangeHeroes, Append To Array, Hero(McCree));
		Modify Global Variable(shortRangeHeroes, Append To Array, Hero(Orisa));
		Modify Global Variable(shortRangeHeroes, Append To Array, Hero(Bastion));
		Modify Global Variable(shortRangeHeroes, Append To Array, Hero(Genji));
		Modify Global Variable(shortRangeHeroes, Append To Array, Hero(Junkrat));
		Modify Global Variable(shortRangeHeroes, Append To Array, Hero(Lúcio));
		Modify Global Variable(shortRangeHeroes, Append To Array, Hero(Mei));
		Modify Global Variable(shortRangeHeroes, Append To Array, Hero(Mercy));
		Modify Global Variable(shortRangeHeroes, Append To Array, Hero(Pharah));
		Modify Global Variable(shortRangeHeroes, Append To Array, Hero(Soldier: 76));
		Modify Global Variable(shortRangeHeroes, Append To Array, Hero(Torbjörn));
		Modify Global Variable(shortRangeHeroes, Append To Array, Hero(Zenyatta));
		Set Global Variable(veryShortRangeHeroes, Empty Array);
		Modify Global Variable(veryShortRangeHeroes, Append To Array, Hero(Symmetra));
		Modify Global Variable(veryShortRangeHeroes, Append To Array, Hero(Tracer));
		Modify Global Variable(veryShortRangeHeroes, Append To Array, Hero(Winston));
		Modify Global Variable(veryShortRangeHeroes, Append To Array, Hero(Wrecking Ball));
		Modify Global Variable(veryShortRangeHeroes, Append To Array, Hero(Zarya));
		Modify Global Variable(veryShortRangeHeroes, Append To Array, Hero(Moira));
		Modify Global Variable(veryShortRangeHeroes, Append To Array, Hero(Sigma));
		Modify Global Variable(veryShortRangeHeroes, Append To Array, Hero(Reaper));
		Modify Global Variable(veryShortRangeHeroes, Append To Array, Hero(Reinhardt));
		Modify Global Variable(veryShortRangeHeroes, Append To Array, Hero(Sombra));
		Modify Global Variable(veryShortRangeHeroes, Append To Array, Hero(Brigitte));
		Modify Global Variable(veryShortRangeHeroes, Append To Array, Hero(D.Va));
		Modify Global Variable(veryShortRangeHeroes, Append To Array, Hero(Doomfist));
		Modify Global Variable(veryShortRangeHeroes, Append To Array, Hero(Roadhog));
		Set Global Variable(projectileHeroes, Empty Array);
		Modify Global Variable(projectileHeroes, Append To Array, Hero(Ana));
		Modify Global Variable(projectileHeroes, Append To Array, Hero(Ashe));
		Modify Global Variable(projectileHeroes, Append To Array, Hero(Baptiste));
		Modify Global Variable(projectileHeroes, Append To Array, Hero(Bastion));
		Modify Global Variable(projectileHeroes, Append To Array, Hero(D.Va));
		Modify Global Variable(projectileHeroes, Append To Array, Hero(Genji));
		Modify Global Variable(projectileHeroes, Append To Array, Hero(Hanzo));
		Modify Global Variable(projectileHeroes, Append To Array, Hero(Junkrat));
		Modify Global Variable(projectileHeroes, Append To Array, Hero(Lúcio));
		Modify Global Variable(projectileHeroes, Append To Array, Hero(McCree));
		Modify Global Variable(projectileHeroes, Append To Array, Hero(Mercy));
		Modify Global Variable(projectileHeroes, Append To Array, Hero(Orisa));
		Modify Global Variable(projectileHeroes, Append To Array, Hero(Pharah));
		Modify Global Variable(projectileHeroes, Append To Array, Hero(Reaper));
		Modify Global Variable(projectileHeroes, Append To Array, Hero(Roadhog));
		Modify Global Variable(projectileHeroes, Append To Array, Hero(Sigma));
		Modify Global Variable(projectileHeroes, Append To Array, Hero(Soldier: 76));
		Modify Global Variable(projectileHeroes, Append To Array, Hero(Sombra));
		Modify Global Variable(projectileHeroes, Append To Array, Hero(Torbjörn));
		Modify Global Variable(projectileHeroes, Append To Array, Hero(Tracer));
		Modify Global Variable(projectileHeroes, Append To Array, Hero(Widowmaker));
		Modify Global Variable(projectileHeroes, Append To Array, Hero(Wrecking Ball));
		Modify Global Variable(projectileHeroes, Append To Array, Hero(Zenyatta));
	}
}

rule("Global Settings")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Set Global Variable(globalDifficulty, Global Variable(difficultyRealistic));
		Set Global Variable(globalMaxKills, 6);
		Disable Built-In Game Mode Completion;
	}
}

rule("Player Init")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is Game In Progress == True;
		Has Spawned(Event Player) == True;
		Player Variable(Event Player, initSpawned) == False;
	}

	actions
	{
		"Initialize Variables"
		Set Player Variable(Event Player, damageDone, 0);
		Set Player Variable(Event Player, currentKillNumber, 0);
		Set Player Variable(Event Player, currentHero, 0);
		Set Player Variable(Event Player, changingHero, False);
		Set Player Variable(Event Player, showingInfoText, False);
		Set Player Variable(Event Player, playerMaxKills, Global Variable(globalMaxKills));
		Set Player Variable(Event Player, playerDifficulty, Global Variable(globalDifficulty));
		Set Player Variable(Event Player, reactionTimer, Global Variable(reactionTimerDefault));
		Set Player Variable(Event Player, playerZoneRadius, Global Variable(playerZoneRadiusDefault));
		"Set Home Vector"
		If(Compare(Slot Of(Event Player), ==, 0));
			Set Player Variable(Event Player, thisPlayerHome, Vector(Add(-380, Global Variable(playerBubbleRadius)), 0, Subtract(380,
				Global Variable(playerBubbleRadius))));
		Else If(Compare(Slot Of(Event Player), ==, 1));
			Set Player Variable(Event Player, thisPlayerHome, Vector(Subtract(380, Global Variable(playerBubbleRadius)), 0, Add(-380,
				Global Variable(playerBubbleRadius))));
		Else If(Compare(Slot Of(Event Player), ==, 2));
			Set Player Variable(Event Player, thisPlayerHome, Vector(Subtract(380, Global Variable(playerBubbleRadius)), 0, Subtract(380,
				Global Variable(playerBubbleRadius))));
		Else If(Compare(Slot Of(Event Player), ==, 3));
			Set Player Variable(Event Player, thisPlayerHome, Vector(Add(-380, Global Variable(playerBubbleRadius)), 0, Add(-380,
				Global Variable(playerBubbleRadius))));
		Else If(Compare(Slot Of(Event Player), ==, 4));
			Set Player Variable(Event Player, thisPlayerHome, Vector(0, 0, Subtract(380, Global Variable(playerBubbleRadius))));
		Else If(Compare(Slot Of(Event Player), ==, 5));
			Set Player Variable(Event Player, thisPlayerHome, Vector(0, 0, Add(-380, Global Variable(playerBubbleRadius))));
		End;
		Teleport(Event Player, Player Variable(Event Player, thisPlayerHome));
		"Create Player Bubble"
		Create Effect(All Players(All Teams), Sphere, Sky Blue, Player Variable(Event Player, thisPlayerHome), Global Variable(
			playerBubbleRadius), Visible To Position and Radius);
		"Create Player Movement Zone"
		Create Effect(Event Player, Ring, Blue, Player Variable(Event Player, thisPlayerHome), Player Variable(Event Player,
			playerZoneRadius), Visible To Position and Radius);
		"Create Maximum Enemy Distance Zone"
		Create Effect(Event Player, Ring, Red, Player Variable(Event Player, thisPlayerHome), Square Root(Multiply(Raise To Power(
			Player Variable(Event Player, enemyDistanceMax), 2), 2)), Visible To Position and Radius);
		"Player initialization is complete"
		Set Player Variable(Event Player, initSpawned, True);
		"Create Version Info Text"
		Create HUD Text(Event Player, Custom String("", Null, Null, Null), Custom String("Practice Field: Expanse", Global Variable(
			version), Null, Null), Null, Left, -3, White, Green, White, Visible To and String, Default Visibility);
		Create HUD Text(Event Player, Custom String("", Null, Null, Null), Custom String("Version {0}, Created by Snow#15707",
			Global Variable(version), Null, Null), Null, Left, -2, White, Aqua, White, Visible To and String, Default Visibility);
		Create HUD Text(Event Player, Custom String("", Null, Null, Null), Custom String("Hold [CROUCH] and [RELOAD] to change heroes",
			Null, Null, Null), Null, Left, -1, White, White, White, Visible To and String, Default Visibility);
		Create HUD Text(Event Player, Custom String("", Null, Null, Null), Custom String(
			"Hold [INTERACT] and press [M1] or [M2] to cycle enemy hero", Null, Null, Null), Null, Left, -1, White, White, White,
			Visible To and String, Default Visibility);
		Create HUD Text(Event Player, Custom String("", Null, Null, Null), Custom String("Press [CROUCH] and [INTERACT] to show/hide info",
			Null, Null, Null), Null, Left, -0.900, White, White, White, Visible To and String, Default Visibility);
		Call Subroutine(infoToggle);
		Wait(10, Ignore Condition);
		If(Compare(Player Variable(Event Player, showingInfoText), ==, True));
			Call Subroutine(infoToggle);
		End;
	}
}

rule("Bot Init")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Player Variable(Event Player, initSpawned) == True;
	}

	actions
	{
		Wait(0.250, Ignore Condition);
		Call Subroutine(resetProgress);
		Disable Built-In Game Mode Respawning(Players In Slot(Slot Of(Event Player), Team 2));
		Set Player Variable(Players In Slot(Slot Of(Event Player), Team 2), botAI_FacingX, 0);
		Set Player Variable(Event Player, botAI_FacingY, Players In Slot(Slot Of(Event Player), Team 2));
		Set Player Variable(Players In Slot(Slot Of(Event Player), Team 2), botAI_FacingZ, 0);
	}
}

rule("Bot Destroy On Player Leave")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Entity Exists(Players In Slot(Slot Of(Event Player), Team 1)) == False;
		Is In Spawn Room(Players In Slot(Slot Of(Event Player), Team 1)) == False;
		Has Spawned(Players In Slot(Slot Of(Event Player), Team 1)) == False;
	}

	actions
	{
		Destroy Dummy Bot(Team 2, Slot Of(Event Player));
	}
}

rule("Bot Respawn")
{
	event
	{
		Player Died;
		Team 2;
		All;
	}

	conditions
	{
		Player Variable(Players In Slot(Slot Of(Event Player), Team 1), currentKillNumber) != Player Variable(Players In Slot(Slot Of(
			Event Player), Team 1), playerMaxKills);
	}

	actions
	{
		Set Player Variable(Players In Slot(Slot Of(Event Player), Team 1), reactionTimer, Global Variable(reactionTimerDefault));
		Wait(0.250, Ignore Condition);
		Call Subroutine(teleportEnemy);
		Resurrect(Event Player);
		Set Player Variable(Event Player, botAI_UsingAbility, False);
		Stop Holding Button(Event Player, Primary Fire);
		Stop Holding Button(Event Player, Secondary Fire);
	}
}

rule("Bot Increment Kills")
{
	event
	{
		Player Dealt Final Blow;
		Team 2;
		All;
	}

	conditions
	{
		Is Game In Progress == True;
	}

	actions
	{
		Modify Player Variable(Event Player, currentKillNumber, Add, 1);
	}
}

rule("Bot BM")
{
	event
	{
		Player Dealt Final Blow;
		Team 2;
		All;
	}

	conditions
	{
		Is Game In Progress == True;
	}

	actions
	{
		Skip If(Compare(Random Real(0, 1), >=, 0.350), 5);
		Wait(Random Real(0.750, 1.250), Ignore Condition);
		Skip If(Compare(Random Real(0, 1), >=, 0.500), 2);
		Communicate(Event Player, Hello);
		Abort;
		Communicate(Event Player, Thanks);
	}
}

rule("Bot Hello")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is Game In Progress == True;
		Is Communicating(Event Player, Hello) == True;
	}

	actions
	{
		Wait(1, Ignore Condition);
		Communicate(Players In Slot(Slot Of(Event Player), Team 2), Hello);
	}
}

rule("HUD Kill Counter")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is Game In Progress == True;
	}

	actions
	{
		Create HUD Text(Event Player, Custom String("{0} Kills: {1} / {2}", Hero Icon String(Value In Array(All Heroes, Player Variable(
			Event Player, currentHero))), Player Variable(Event Player, currentKillNumber), Player Variable(Event Player, playerMaxKills)),
			Null, Null, Right, -3, White, White, White, Visible To and String, Default Visibility);
		Create HUD Text(Event Player, Null, Custom String("{0} killed you {1} time(s).", Hero Of(Players In Slot(Slot Of(Event Player),
			Team 2)), Player Variable(Players In Slot(Slot Of(Event Player), Team 2), currentKillNumber), Null), Null, Right, -2.900,
			White, White, Red, Visible To and String, Default Visibility);
		Create HUD Text(Event Player, Custom String("", Null, Null, Null), Custom String("Hero {0} of 31", Add(1, Player Variable(
			Event Player, currentHero)), Null, Null), Null, Right, -2, White, Yellow, White, Visible To and String, Default Visibility);
		Create HUD Text(Event Player, Null, Custom String("Next Hero: {0}", Hero Icon String(Value In Array(All Heroes, Player Variable(
			Event Player, nextHero))), Null, Null), Null, Right, -1, White, Aqua, White, Visible To and String, Default Visibility);
	}
}

rule("Increment Kills")
{
	event
	{
		Player Dealt Final Blow;
		Team 1;
		All;
	}

	conditions
	{
		Players In Slot(Slot Of(Event Player), Team 2) == Victim;
	}

	actions
	{
		Modify Player Variable(Event Player, currentKillNumber, Add, 1);
	}
}

rule("Next Hero")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is Game In Progress == True;
		Player Variable(Event Player, currentKillNumber) == Player Variable(Event Player, playerMaxKills);
	}

	actions
	{
		Wait(0.250, Ignore Condition);
		Set Player Variable(Event Player, reactionTimer, Global Variable(reactionTimerDefault));
		Call Subroutine(nextHero);
	}
}

rule("Miss Penalty")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is Game In Progress == True;
		Is Dummy Bot(Event Player) == False;
		Is In View Angle(Event Player, Eye Position(Players In Slot(Slot Of(Event Player), Opposite Team Of(Team Of(Event Player)))), 50)
			== True;
		Is Firing Primary(Event Player) == True;
		Hero Of(Event Player) == Hero(Widowmaker);
		Player Variable(Event Player, playerDifficulty) == Global Variable(difficultyHard);
	}

	actions
	{
		Set Player Variable(Event Player, newDamage, Player Variable(Event Player, damageDone));
		Wait(0.300, Ignore Condition);
		Skip If(Compare(Player Variable(Event Player, damageDone), >, Player Variable(Event Player, newDamage)), 6);
		Big Message(Event Player, Custom String("MISS!", Null, Null, Null));
		Damage(Event Player, Null, Random Integer(65, 100));
		Set Status(Event Player, Null, Stunned, 0.200);
		Skip If(Compare(Player Variable(Event Player, currentKillNumber), <=, 0), 2);
		Skip If(Array Contains(All Tank Heroes, Value In Array(All Heroes, Player Variable(Event Player, currentHero))), 1);
		Modify Player Variable(Event Player, currentKillNumber, Subtract, 1);
	}
}

rule("Damage Dealt")
{
	event
	{
		Player Dealt Damage;
		Team 1;
		All;
	}

	conditions
	{
		Is Game In Progress == True;
	}

	actions
	{
		Wait(0.250, Ignore Condition);
		Modify Player Variable(Event Player, damageDone, Add, Event Damage);
		Heal(Event Player, Event Player, Multiply(Event Damage, 0.300));
	}
}

rule("Reset Player At Home")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Distance Between(Player Variable(Event Player, thisPlayerHome), Event Player) > Player Variable(Event Player, playerZoneRadius);
	}

	actions
	{
		Teleport(Event Player, Player Variable(Event Player, thisPlayerHome));
		Play Effect(Event Player, Debuff Impact Sound, White, Event Player, 75);
		Play Effect(Event Player, Bad Pickup Effect, White, Player Variable(Event Player, thisPlayerHome), 1);
	}
}

rule("Reset Player From Spawn")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Has Spawned(Event Player) == True;
		Player Variable(Event Player, changingHero) == False;
	}

	actions
	{
		Teleport(Event Player, Player Variable(Event Player, thisPlayerHome));
	}
}

rule("Reset Enemy Position")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Is Game In Progress == True;
		Distance Between(Event Player, Player Variable(Players In Slot(Slot Of(Event Player), Team 1), thisPlayerHome)) >= Square Root(
			Multiply(Raise To Power(Player Variable(Players In Slot(Slot Of(Event Player), Team 1), enemyDistanceMax), 2), 2));
		Is Moving(Event Player) == True;
	}

	actions
	{
		If(Compare(Player Variable(Event Player, playerDifficulty), <=, Global Variable(difficultyHard)));
			"Flip 180"
			Set Facing(Event Player, Vector(0, Y Component Of(Facing Direction Of(Event Player)), -1), To Player);
		Else;
			Call Subroutine(teleportEnemy);
		End;
	}
}

rule("Reaction Timer")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Player Variable(Event Player, playerDifficulty) == Global Variable(difficultyHard);
		Is Alive(Players In Slot(Slot Of(Event Player), Opposite Team Of(Team Of(Event Player)))) == True;
		Player Variable(Event Player, currentKillNumber) < 5;
		Is In View Angle(Event Player, Eye Position(Players In Slot(Slot Of(Event Player), Opposite Team Of(Team Of(Event Player)))), 30)
			== True;
		Player Variable(Event Player, reactionTimer) >= 0;
		Array Contains(All Tank Heroes, Hero Of(Players In Slot(Slot Of(Event Player), Opposite Team Of(Team Of(Event Player))))) == False;
		Array Contains(Global Variable(longRangeHeroes), Hero Of(Event Player)) == True;
	}

	actions
	{
		Modify Player Variable(Event Player, reactionTimer, Subtract, 0.100);
		Wait(0.100, Ignore Condition);
		Loop If Condition Is True;
		If(Compare(Player Variable(Event Player, reactionTimer), <=, 0));
			Play Effect(Event Player, Debuff Impact Sound, White, Event Player, 50);
			Small Message(Event Player, Custom String("Too Slow!", Null, Null, Null));
			Stop Throttle In Direction(Players In Slot(Slot Of(Event Player), Opposite Team Of(Team Of(Event Player))));
			Set Gravity(Players In Slot(Slot Of(Event Player), Opposite Team Of(Team Of(Event Player))), 0);
			Teleport(Players In Slot(Slot Of(Event Player), Opposite Team Of(Team Of(Event Player))), Add(Position Of(Event Player), Vector(0,
				45, 0)));
			Set Status(Players In Slot(Slot Of(Event Player), Opposite Team Of(Team Of(Event Player))), Null, Phased Out, 9999);
			Set Invisible(Players In Slot(Slot Of(Event Player), Opposite Team Of(Team Of(Event Player))), All);
			Wait(Random Real(1.500, 4), Ignore Condition);
			Clear Status(Players In Slot(Slot Of(Event Player), Opposite Team Of(Team Of(Event Player))), Phased Out);
			Set Gravity(Players In Slot(Slot Of(Event Player), Opposite Team Of(Team Of(Event Player))), 100);
			Call Subroutine(teleportEnemy);
			Set Invisible(Players In Slot(Slot Of(Event Player), Opposite Team Of(Team Of(Event Player))), None);
			Set Player Variable(Event Player, reactionTimer, Global Variable(reactionTimerDefault));
		End;
	}
}

rule("Killing Other Player Enemies Penalty")
{
	event
	{
		Player Dealt Damage;
		Team 1;
		All;
	}

	conditions
	{
		Victim != Players In Slot(Slot Of(Event Player), Team 2);
		Is Dummy Bot(Victim) == True;
	}

	actions
	{
		Kill(Event Player, Null);
		Big Message(Event Player, Custom String("That's Not Your Enemy!", Null, Null, Null));
	}
}

rule("Hero Defines Long Range")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Array Contains(Global Variable(longRangeHeroes), Hero Of(Event Player)) == True;
	}

	actions
	{
		Set Player Variable(Event Player, enemyDistanceMax, Global Variable(longDistance));
		Call Subroutine(setHeroDistanceModifier);
		Set Player Variable(Event Player, playerZoneRadius, Global Variable(playerZoneRadiusDefault));
	}
}

rule("Hero Defines Medium Range")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Array Contains(Global Variable(mediumRangeHeroes), Hero Of(Event Player)) == True;
	}

	actions
	{
		Set Player Variable(Event Player, enemyDistanceMax, Global Variable(mediumDistance));
		Call Subroutine(setHeroDistanceModifier);
		Set Player Variable(Event Player, playerZoneRadius, Global Variable(playerZoneRadiusDefault));
	}
}

rule("Hero Defines Short Range")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Array Contains(Global Variable(shortRangeHeroes), Hero Of(Event Player)) == True;
	}

	actions
	{
		Set Player Variable(Event Player, enemyDistanceMax, Global Variable(shortDistance));
		Call Subroutine(setHeroDistanceModifier);
		Set Player Variable(Event Player, playerZoneRadius, Global Variable(playerZoneRadiusDefault));
		Skip If(Compare(Hero Of(Event Player), !=, Hero(Genji)), 1);
		Set Player Variable(Event Player, playerZoneRadius, Square Root(Multiply(Raise To Power(Player Variable(Event Player,
			enemyDistanceMax), 2), 2)));
		Skip If(Compare(Hero Of(Event Player), !=, Hero(Pharah)), 1);
		Set Player Variable(Event Player, playerZoneRadius, Square Root(Multiply(Raise To Power(Player Variable(Event Player,
			enemyDistanceMax), 2), 2)));
	}
}

rule("Hero Defines Very Short Range")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Array Contains(Global Variable(veryShortRangeHeroes), Hero Of(Event Player)) == True;
	}

	actions
	{
		Set Player Variable(Event Player, enemyDistanceMax, Global Variable(veryShortDistance));
		Call Subroutine(setHeroDistanceModifier);
		Set Player Variable(Event Player, playerZoneRadius, Square Root(Multiply(Raise To Power(Player Variable(Event Player,
			enemyDistanceMax), 2), 2)));
	}
}

rule("Change Heroes")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Crouch) == True;
		Is Button Held(Event Player, Reload) == True;
		Player Variable(Event Player, changingHero) == False;
	}

	actions
	{
		Wait(0.250, Abort When False);
		Small Message(Event Player, Custom String("Continue holding to change heroes...", Null, Null, Null));
		Wait(0.500, Abort When False);
		Set Player Variable(Event Player, previousPlayerHero, Hero Of(Event Player));
		Set Player Variable(Event Player, changingHero, True);
		Set Player Allowed Heroes(Event Player, Hero(Widowmaker));
		Wait(0.250, Ignore Condition);
		Set Player Allowed Heroes(Event Player, Hero(Ashe));
		Wait(0.250, Ignore Condition);
		Reset Player Hero Availability(Event Player);
	}
}

rule("Subroutine: teleportEnemy")
{
	event
	{
		Subroutine;
		teleportEnemy;
	}

	actions
	{
		Wait(0.200, Ignore Condition);
		Set Invisible(Players In Slot(Slot Of(Event Player), Team 2), All);
		Set Player Variable(Players In Slot(Slot Of(Event Player), Team 1), botDistanceMin, Multiply(Player Variable(Players In Slot(
			Slot Of(Event Player), Team 1), currentKillNumber), Player Variable(Players In Slot(Slot Of(Event Player), Team 1),
			enemyDistanceModifier)));
		Set Player Variable(Players In Slot(Slot Of(Event Player), Team 1), botDistanceMax, Add(Player Variable(Players In Slot(Slot Of(
			Event Player), Team 1), botDistanceMin), Player Variable(Players In Slot(Slot Of(Event Player), Team 1),
			enemyDistanceModifier)));
		If(Compare(Player Variable(Players In Slot(Slot Of(Event Player), Team 1), currentKillNumber), >=, Divide(Player Variable(
			Players In Slot(Slot Of(Event Player), Team 1), playerMaxKills), 2)));
			Modify Player Variable(Players In Slot(Slot Of(Event Player), Team 1), botDistanceMin, Subtract, Multiply(Divide(Player Variable(
				Players In Slot(Slot Of(Event Player), Team 1), playerMaxKills), 2), Player Variable(Players In Slot(Slot Of(Event Player),
				Team 1), enemyDistanceModifier)));
			Modify Player Variable(Players In Slot(Slot Of(Event Player), Team 1), botDistanceMax, Subtract, Multiply(Divide(Player Variable(
				Players In Slot(Slot Of(Event Player), Team 1), playerMaxKills), 2), Player Variable(Players In Slot(Slot Of(Event Player),
				Team 1), enemyDistanceModifier)));
		End;
		Set Player Variable(Players In Slot(Slot Of(Event Player), Team 1), newEnemyX, Add(X Component Of(Player Variable(Players In Slot(
			Slot Of(Event Player), Team 1), thisPlayerHome)), Multiply(Random Real(Player Variable(Players In Slot(Slot Of(Event Player),
			Team 1), botDistanceMin), Player Variable(Players In Slot(Slot Of(Event Player), Team 1), botDistanceMax)),
			Random Value In Array(Global Variable(positiveNegativeArray)))));
		Set Player Variable(Players In Slot(Slot Of(Event Player), Team 1), newEnemyZ, Add(Z Component Of(Player Variable(Players In Slot(
			Slot Of(Event Player), Team 1), thisPlayerHome)), Multiply(Random Real(Player Variable(Players In Slot(Slot Of(Event Player),
			Team 1), botDistanceMin), Player Variable(Players In Slot(Slot Of(Event Player), Team 1), botDistanceMax)),
			Random Value In Array(Global Variable(positiveNegativeArray)))));
		Set Facing(Players In Slot(Slot Of(Event Player), Team 2), Vector(Random Real(-1, 1), Random Real(-0.500, 0.500), Random Real(-1,
			1)), To Player);
		Teleport(Players In Slot(Slot Of(Event Player), Team 2), Vector(Player Variable(Players In Slot(Slot Of(Event Player), Team 1),
			newEnemyX), 0, Player Variable(Players In Slot(Slot Of(Event Player), Team 1), newEnemyZ)));
		Wait(0.350, Ignore Condition);
		"Don't play sound effect if using menu."
		Skip If(Is In View Angle(Players In Slot(Slot Of(Event Player), Team 1), Player Variable(Players In Slot(Slot Of(Event Player),
			Team 1), skyMenu4), 20), 3);
		Skip If(Is In View Angle(Players In Slot(Slot Of(Event Player), Team 1), Player Variable(Players In Slot(Slot Of(Event Player),
			Team 1), skyMenu2), 20), 2);
		Play Effect(Players In Slot(Slot Of(Event Player), Team 1), Buff Impact Sound, White, Players In Slot(Slot Of(Event Player),
			Team 2), 180);
		Play Effect(Players In Slot(Slot Of(Event Player), Team 1), Bad Pickup Effect, White, Players In Slot(Slot Of(Event Player),
			Team 2), 1);
		Set Invisible(Players In Slot(Slot Of(Event Player), Team 2), None);
	}
}

rule("Subroutine: setHeroDistanceModifier")
{
	event
	{
		Subroutine;
		setHeroDistanceModifier;
	}

	actions
	{
		Set Player Variable(Players In Slot(Slot Of(Event Player), Team 1), enemyDistanceModifier, Divide(Player Variable(Players In Slot(
			Slot Of(Event Player), Team 1), enemyDistanceMax), Multiply(Player Variable(Players In Slot(Slot Of(Event Player), Team 1),
			playerMaxKills), 0.500)));
	}
}

rule("Subroutine: resetBot")
{
	event
	{
		Subroutine;
		resetBot;
	}

	actions
	{
		If(Compare(Player Variable(Players In Slot(Slot Of(Event Player), Team 1), playerDifficulty), >=, Global Variable(
			difficultyRealistic)));
			Call Subroutine(botAI_RealisticMode_Disable);
			Set Player Variable(Players In Slot(Slot Of(Event Player), Team 2), botAI_UseTime_Ability1, 0);
			Set Player Variable(Players In Slot(Slot Of(Event Player), Team 2), botAI_UseTime_Ability2, 0);
			Set Player Variable(Players In Slot(Slot Of(Event Player), Team 2), botAI_UseTime_Ability3, 0);
			Set Player Variable(Players In Slot(Slot Of(Event Player), Team 2), botAI_Resource_1, 0);
			Set Player Variable(Players In Slot(Slot Of(Event Player), Team 2), botAI_Resource_2, 0);
			Set Player Variable(Players In Slot(Slot Of(Event Player), Team 2), botAI_Resource_3, 0);
		End;
		Stop Holding Button(Players In Slot(Slot Of(Event Player), Team 2), Primary Fire);
		Stop Holding Button(Players In Slot(Slot Of(Event Player), Team 2), Secondary Fire);
		Stop Holding Button(Players In Slot(Slot Of(Event Player), Team 2), Crouch);
		Stop Holding Button(Players In Slot(Slot Of(Event Player), Team 2), Jump);
		Stop Throttle In Direction(Players In Slot(Slot Of(Event Player), Team 2));
		Stop Facing(Players In Slot(Slot Of(Event Player), Team 2));
		If(Entity Exists(Players In Slot(Slot Of(Event Player), Team 2)));
			Set Invisible(Players In Slot(Slot Of(Event Player), Team 2), All);
			Start Forcing Player To Be Hero(Players In Slot(Slot Of(Event Player), Team 2), Value In Array(All Heroes, Player Variable(
				Players In Slot(Slot Of(Event Player), Team 1), currentHero)));
		Else;
			Create Dummy Bot(Value In Array(All Heroes, Player Variable(Players In Slot(Slot Of(Event Player), Team 1), currentHero)), Team 2,
				Slot Of(Event Player), Vector(0, 0, 0), Vector(0, 0, 0));
			Set Invisible(Players In Slot(Slot Of(Event Player), Team 2), All);
		End;
	}
}

rule("Subroutine: resetProgress")
{
	event
	{
		Subroutine;
		resetProgress;
	}

	actions
	{
		Heal(Players In Slot(Slot Of(Event Player), Team 1), Null, Max Health(Players In Slot(Slot Of(Event Player), Team 1)));
		Set Player Variable(Players In Slot(Slot Of(Event Player), Team 1), currentKillNumber, 0);
		Set Player Variable(Players In Slot(Slot Of(Event Player), Team 2), currentKillNumber, 0);
		Set Player Variable(Players In Slot(Slot Of(Event Player), Team 1), currentHero, 0);
		Set Player Variable(Players In Slot(Slot Of(Event Player), Team 1), nextHero, Add(Player Variable(Players In Slot(Slot Of(
			Event Player), Team 1), currentHero), 1));
		Call Subroutine(resetBot);
		Call Subroutine(teleportEnemy);
	}
}

rule("Subroutine: nextHero")
{
	event
	{
		Subroutine;
		nextHero;
	}

	actions
	{
		Heal(Players In Slot(Slot Of(Event Player), Team 1), Null, Max Health(Players In Slot(Slot Of(Event Player), Team 1)));
		Set Player Variable(Players In Slot(Slot Of(Event Player), Team 1), currentKillNumber, 0);
		Set Player Variable(Players In Slot(Slot Of(Event Player), Team 2), currentKillNumber, 0);
		If(Compare(Player Variable(Players In Slot(Slot Of(Event Player), Team 1), currentHero), ==, Subtract(Count Of(All Heroes), 1)));
			Call Subroutine(resetProgress);
		Else;
			Set Player Variable(Players In Slot(Slot Of(Event Player), Team 1), currentHero, Player Variable(Players In Slot(Slot Of(
				Event Player), Team 1), nextHero));
			Set Player Variable(Players In Slot(Slot Of(Event Player), Team 1), nextHero, Add(Player Variable(Players In Slot(Slot Of(
				Event Player), Team 1), currentHero), 1));
			Call Subroutine(resetBot);
			Call Subroutine(teleportEnemy);
		End;
	}
}

rule("Subroutine: previousHero")
{
	event
	{
		Subroutine;
		previousHero;
	}

	actions
	{
		Heal(Players In Slot(Slot Of(Event Player), Team 1), Null, Max Health(Players In Slot(Slot Of(Event Player), Team 1)));
		Set Player Variable(Players In Slot(Slot Of(Event Player), Team 1), currentKillNumber, 0);
		Set Player Variable(Players In Slot(Slot Of(Event Player), Team 2), currentKillNumber, 0);
		If(Compare(Player Variable(Players In Slot(Slot Of(Event Player), Team 1), currentHero), ==, 0));
			Set Player Variable(Players In Slot(Slot Of(Event Player), Team 1), currentHero, Subtract(Count Of(All Heroes), 1));
			Set Player Variable(Players In Slot(Slot Of(Event Player), Team 1), nextHero, 0);
		Else;
			Modify Player Variable(Players In Slot(Slot Of(Event Player), Team 1), currentHero, Subtract, 1);
			Set Player Variable(Players In Slot(Slot Of(Event Player), Team 1), nextHero, Add(Player Variable(Players In Slot(Slot Of(
				Event Player), Team 1), currentHero), 1));
		End;
		Call Subroutine(resetBot);
		Call Subroutine(teleportEnemy);
	}
}

rule("Skip Hero Forward")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Interact) == True;
		Is Button Held(Event Player, Primary Fire) == True;
	}

	actions
	{
		Call Subroutine(nextHero);
	}
}

rule("Skip Hero Backwards")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Interact) == True;
		Is Button Held(Event Player, Secondary Fire) == True;
	}

	actions
	{
		Call Subroutine(previousHero);
	}
}

rule("Disable Primary Secondary Skip")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Interact) == True;
		Has Spawned(Event Player) == True;
	}

	actions
	{
		Disallow Button(Event Player, Primary Fire);
		Disallow Button(Event Player, Secondary Fire);
		Wait(0.500, Ignore Condition);
		Loop If Condition Is True;
		Allow Button(Event Player, Primary Fire);
		Allow Button(Event Player, Secondary Fire);
	}
}

rule("Special Rule: Remech D.Va")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		D.Va;
	}

	conditions
	{
		Is Game In Progress == True;
		Ultimate Charge Percent(Event Player) == 100;
		Max Health(Event Player) == 150;
	}

	actions
	{
		Press Button(Event Player, Ultimate);
	}
}

rule("Special Rule: In Air Bug")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is In Air(Event Player) == True;
		Hero Of(Event Player) != Hero(Pharah);
		Hero Of(Event Player) != Hero(Sigma);
		Hero Of(Event Player) != Hero(Mercy);
	}

	actions
	{
		Wait(5, Abort When False);
		Set Status(Event Player, Null, Knocked Down, 0.500);
		Teleport(Event Player, Player Variable(Event Player, thisPlayerHome));
	}
}

rule("Special Rule: Reinhardt Charge")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Reinhardt;
	}

	conditions
	{
		Has Status(Players In Slot(Slot Of(Event Player), Team 2), Stunned) == True;
		Distance Between(Event Player, Player Variable(Event Player, thisPlayerHome)) >= Subtract(Player Variable(Event Player,
			playerZoneRadius), 2);
		Is Using Ability 1(Event Player) == True;
	}

	actions
	{
		Set Status(Event Player, Null, Stunned, 0.250);
		Apply Impulse(Event Player, Backward, 1, To World, Cancel Contrary Motion);
		Set Status(Players In Slot(Slot Of(Event Player), Team 2), Event Player, Stunned, 0.500);
		Apply Impulse(Players In Slot(Slot Of(Event Player), Team 2), Direction Towards(Players In Slot(Slot Of(Event Player), Team 2),
			Event Player), 1, To World, Cancel Contrary Motion);
		Damage(Players In Slot(Slot Of(Event Player), Team 2), Event Player, 300);
	}
}

rule("Special Rule: Doomfist Rocket Punch Start")
{
	event
	{
		Ongoing - Each Player;
		All;
		Doomfist;
	}

	conditions
	{
		Is Firing Secondary(Event Player) == True;
		Is Alive(Event Player) == True;
	}

	actions
	{
		Set Player Variable(Event Player, doomfistPunchCharge, Total Time Elapsed);
		Set Player Variable(Event Player, doomfistPunchDamage, 0);
	}
}

rule("Special Rule: Doomfist Rocket Punch Stop")
{
	event
	{
		Ongoing - Each Player;
		All;
		Doomfist;
	}

	conditions
	{
		Is Firing Secondary(Event Player) == False;
		Is Alive(Event Player) == True;
		Player Variable(Event Player, doomfistPunchCharge) != 0;
	}

	actions
	{
		Set Player Variable(Event Player, doomfistPunchDamage, Add(Multiply(Divide(Subtract(Total Time Elapsed, Player Variable(
			Event Player, doomfistPunchCharge)), 1.400), 100.750), 49.250));
		If(Compare(Player Variable(Event Player, doomfistPunchDamage), >, 150));
			Set Player Variable(Event Player, doomfistPunchDamage, 150);
		End;
		Small Message(Event Player, Player Variable(Event Player, doomfistPunchDamage));
	}
}

rule("Special Rule: Doomfist Rocket Punch Damage")
{
	event
	{
		Ongoing - Each Player;
		All;
		Doomfist;
	}

	conditions
	{
		Has Status(Players In Slot(Slot Of(Event Player), Opposite Team Of(Team Of(Event Player))), Stunned) == True;
		Distance Between(Players In Slot(Slot Of(Event Player), Opposite Team Of(Team Of(Event Player))), Player Variable(Players In Slot(
			Slot Of(Event Player), Team 1), thisPlayerHome)) >= Subtract(Player Variable(Players In Slot(Slot Of(Event Player), Team 1),
			playerZoneRadius), 1);
	}

	actions
	{
		Apply Impulse(Players In Slot(Slot Of(Event Player), Opposite Team Of(Team Of(Event Player))), Direction Towards(Players In Slot(
			Slot Of(Event Player), Opposite Team Of(Team Of(Event Player))), Event Player), 1, To World, Cancel Contrary Motion);
		Damage(Players In Slot(Slot Of(Event Player), Opposite Team Of(Team Of(Event Player))), Event Player, Player Variable(Event Player,
			doomfistPunchDamage));
		Set Player Variable(Event Player, doomfistPunchCharge, 0);
		Set Player Variable(Event Player, doomfistPunchDamage, 0);
	}
}

rule("Info Toggle")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is Game In Progress == True;
		Is Button Held(Event Player, Interact) == True;
		Is Button Held(Event Player, Crouch) == True;
	}

	actions
	{
		Call Subroutine(infoToggle);
	}
}

rule("Player Joined")
{
	event
	{
		Player Joined Match;
		Team 1;
		All;
	}

	conditions
	{
		Is Game In Progress == True;
		Player Variable(Event Player, initSpawned) == True;
	}

	actions
	{
		Destroy Dummy Bot(Team 2, Slot Of(Event Player));
		Set Player Variable(Event Player, initSpawned, False);
		If(Compare(Player Variable(Event Player, showingInfoText), ==, True));
			Call Subroutine(infoToggle);
		End;
	}
}

rule("Target Help Indicator")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Game In Progress == True;
		Is Dummy Bot(Event Player) == False;
		Has Spawned(Event Player) == True;
		Is Alive(Event Player) == True;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Opposite Team Of(Team Of(Event Player))), 90) == False;
		Player Variable(Event Player, playerDifficulty) <= Global Variable(difficultyHard);
		Y Component Of(Facing Direction Of(Event Player)) <= 0.500;
	}

	actions
	{
		Wait(4, Abort When False);
		Play Effect(Event Player, Debuff Impact Sound, White, Players In Slot(Slot Of(Event Player), Opposite Team Of(Team Of(
			Event Player))), 200);
		Big Message(Event Player, Custom String("Turn Around!", Null, Null, Null));
		Create In-World Text(Event Player, Custom String("TARGET!", Null, Null, Null), Players In Slot(Slot Of(Event Player),
			Opposite Team Of(Team Of(Event Player))), 4, Do Not Clip, Visible To Position and String, Yellow, Default Visibility);
		Set Player Variable(Event Player, targetHelpIndicatorText, Last Text ID);
		Wait(3, Ignore Condition);
		Destroy In-World Text(Player Variable(Event Player, targetHelpIndicatorText));
		Loop If Condition Is True;
	}
}

rule("Sky Menu Generate")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is Game In Progress == True;
		Is Dummy Bot(Event Player) == False;
		Player Variable(Event Player, initSpawned) == True;
	}

	actions
	{
		Set Player Variable(Event Player, skyMenu0, Add(Player Variable(Event Player, thisPlayerHome), Vector(0, 40, 0)));
		Set Player Variable(Event Player, skyMenu1, Add(Player Variable(Event Player, thisPlayerHome), Vector(15, 45, 0)));
		Set Player Variable(Event Player, skyMenu2, Add(Player Variable(Event Player, thisPlayerHome), Vector(-15, 45, 0)));
		Set Player Variable(Event Player, skyMenu3, Add(Player Variable(Event Player, thisPlayerHome), Vector(0, 45, 15)));
		Set Player Variable(Event Player, skyMenu4, Add(Player Variable(Event Player, thisPlayerHome), Vector(0, 45, -15)));
		disabled Create Effect(Event Player, Sphere, White, Add(Player Variable(Event Player, thisPlayerHome), Vector(0, 40, 0)), 2,
			Visible To Position and Radius);
		Create Effect(Event Player, Sphere, White, Player Variable(Event Player, skyMenu1), 1, Visible To Position and Radius);
		Create Effect(Event Player, Sphere, White, Player Variable(Event Player, skyMenu2), 1, Visible To Position and Radius);
		Create Effect(Event Player, Sphere, White, Player Variable(Event Player, skyMenu3), 1, Visible To Position and Radius);
		Create Effect(Event Player, Sphere, White, Player Variable(Event Player, skyMenu4), 1, Visible To Position and Radius);
		Create In-World Text(Event Player, Custom String("Decrease Difficulty (Current: {0})", Player Variable(Event Player,
			playerDifficulty), Null, Null), Player Variable(Event Player, skyMenu1), 1, Clip Against Surfaces,
			Visible To Position and String, White, Default Visibility);
		Create In-World Text(Event Player, Custom String("Increase Difficulty (Current: {0})", Player Variable(Event Player,
			playerDifficulty), Null, Null), Player Variable(Event Player, skyMenu3), 1, Clip Against Surfaces,
			Visible To Position and String, White, Default Visibility);
		Create In-World Text(Event Player, Custom String("Decrease Max Kills (Current: {0})", Player Variable(Event Player,
			playerMaxKills), Null, Null), Player Variable(Event Player, skyMenu2), 1, Clip Against Surfaces,
			Visible To Position and String, White, Default Visibility);
		Create In-World Text(Event Player, Custom String("Increase Max Kills (Current: {0})", Player Variable(Event Player,
			playerMaxKills), Null, Null), Player Variable(Event Player, skyMenu4), 1, Clip Against Surfaces,
			Visible To Position and String, White, Default Visibility);
	}
}

rule("Sky Menu Looking At")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is In View Angle(Event Player, Player Variable(Event Player, skyMenu0), 28) == True;
		Is Alive(Event Player) == True;
		Hero Of(Players In Slot(Slot Of(Event Player), Team 2)) != Hero(Pharah);
	}

	actions
	{
		Wait(0.300, Abort When False);
		Skip If(Has Status(Players In Slot(Slot Of(Event Player), Team 2), Frozen), 1);
		Set Status(Players In Slot(Slot Of(Event Player), Team 2), Null, Frozen, 2);
		Wait(1.500, Ignore Condition);
		Loop If Condition Is True;
		Clear Status(Players In Slot(Slot Of(Event Player), Team 2), Frozen);
	}
}

rule("Sky Menu Increase Difficulty")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is Game In Progress == True;
		Is In View Angle(Event Player, Player Variable(Event Player, skyMenu3), 10) == True;
		Is Dummy Bot(Event Player) == False;
		Is Button Held(Event Player, Interact) == True;
		Player Variable(Event Player, playerDifficulty) < Global Variable(difficultyRealistic);
	}

	actions
	{
		Play Effect(Event Player, Explosion Sound, White, Event Player, 15);
		Modify Player Variable(Event Player, playerDifficulty, Add, 1);
		Wait(1.500, Restart When True);
		If(Compare(Player Variable(Event Player, playerDifficulty), ==, Global Variable(difficultyEasy)));
			Big Message(Event Player, Custom String("Difficulty Set To Easy", Null, Null, Null));
		Else If(Compare(Player Variable(Event Player, playerDifficulty), ==, Global Variable(difficultyNormal)));
			Big Message(Event Player, Custom String("Difficulty Set To Normal", Null, Null, Null));
		Else If(Compare(Player Variable(Event Player, playerDifficulty), ==, Global Variable(difficultyHard)));
			Big Message(Event Player, Custom String("Difficulty Set To Hard", Null, Null, Null));
		Else If(Compare(Player Variable(Event Player, playerDifficulty), ==, Global Variable(difficultyRealistic)));
			Big Message(Event Player, Custom String("Difficulty Set To Realistic", Null, Null, Null));
		End;
	}
}

rule("Sky Menu Decrease Difficulty")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is Game In Progress == True;
		Is In View Angle(Event Player, Player Variable(Event Player, skyMenu1), 10) == True;
		Is Dummy Bot(Event Player) == False;
		Is Button Held(Event Player, Interact) == True;
		Player Variable(Event Player, playerDifficulty) > Global Variable(difficultyEasy);
	}

	actions
	{
		Play Effect(Event Player, Explosion Sound, White, Event Player, 15);
		Modify Player Variable(Event Player, playerDifficulty, Subtract, 1);
		Wait(1.500, Restart When True);
		If(Compare(Player Variable(Event Player, playerDifficulty), ==, Global Variable(difficultyEasy)));
			Big Message(Event Player, Custom String("Difficulty Set To Easy", Null, Null, Null));
		Else If(Compare(Player Variable(Event Player, playerDifficulty), ==, Global Variable(difficultyNormal)));
			Big Message(Event Player, Custom String("Difficulty Set To Normal", Null, Null, Null));
		Else If(Compare(Player Variable(Event Player, playerDifficulty), ==, Global Variable(difficultyHard)));
			Big Message(Event Player, Custom String("Difficulty Set To Hard", Null, Null, Null));
		Else If(Compare(Player Variable(Event Player, playerDifficulty), ==, Global Variable(difficultyRealistic)));
			Big Message(Event Player, Custom String("Difficulty Set To Realistic", Null, Null, Null));
		End;
	}
}

rule("Sky Menu Increase Max Kills")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Game In Progress == True;
		Is In View Angle(Event Player, Player Variable(Event Player, skyMenu4), 10) == True;
		Is Dummy Bot(Event Player) == False;
		Is Button Held(Event Player, Interact) == True;
		Player Variable(Event Player, playerMaxKills) < 20;
	}

	actions
	{
		Play Effect(Event Player, Explosion Sound, White, Event Player, 15);
		Modify Player Variable(Event Player, playerMaxKills, Add, 2);
		Wait(1.500, Restart When True);
		Set Player Variable(Event Player, currentKillNumber, 0);
		Call Subroutine(setHeroDistanceModifier);
		Call Subroutine(teleportEnemy);
	}
}

rule("Sky Menu Decrease Max Kills")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Game In Progress == True;
		Is In View Angle(Event Player, Player Variable(Event Player, skyMenu2), 10) == True;
		Is Dummy Bot(Event Player) == False;
		Is Button Held(Event Player, Interact) == True;
		Player Variable(Event Player, playerMaxKills) > 2;
	}

	actions
	{
		Play Effect(Event Player, Explosion Sound, White, Event Player, 15);
		Modify Player Variable(Event Player, playerMaxKills, Subtract, 2);
		Wait(1.500, Restart When True);
		Set Player Variable(Event Player, currentKillNumber, 0);
		Call Subroutine(setHeroDistanceModifier);
		Call Subroutine(teleportEnemy);
	}
}

rule("Bot Subroutine: botAI_WASD")
{
	event
	{
		Subroutine;
		botAI_WASD;
	}

	actions
	{
		Start Throttle In Direction(Players In Slot(Slot Of(Event Player), Team 2), Player Variable(Players In Slot(Slot Of(Event Player),
			Team 2), botAI_ThrottleDir), 1, To Player, Replace existing throttle, Direction and Magnitude);
		Wait(Random Real(0.100, 0.750), Ignore Condition);
	}
}

rule("AI Subroutine: botAI_RealisticMode_Enable")
{
	event
	{
		Subroutine;
		botAI_RealisticMode_Enable;
	}

	actions
	{
		Wait(0.500, Abort When False);
		Set Player Variable(Players In Slot(Slot Of(Event Player), Team 2), botAI_MoveWASD_Enabled, True);
		Set Player Variable(Players In Slot(Slot Of(Event Player), Team 2), botAI_MoveCrouch_Enabled, True);
		Set Player Variable(Players In Slot(Slot Of(Event Player), Team 2), botAI_MoveJump_Enabled, True);
		Set Player Variable(Players In Slot(Slot Of(Event Player), Team 2), botAI_FacingTarget, Players In Slot(Slot Of(Event Player),
			Team 1));
		Set Player Variable(Players In Slot(Slot Of(Event Player), Team 2), botAI_Enabled, True);
	}
}

rule("AI Subroutine: botAI_RealisticMode_Disable")
{
	event
	{
		Subroutine;
		botAI_RealisticMode_Disable;
	}

	actions
	{
		Set Player Variable(Players In Slot(Slot Of(Event Player), Team 2), botAI_Enabled, False);
		Set Player Variable(Players In Slot(Slot Of(Event Player), Team 2), botAI_MoveWASD_Enabled, False);
		Set Player Variable(Players In Slot(Slot Of(Event Player), Team 2), botAI_MoveCrouch_Enabled, False);
		Set Player Variable(Players In Slot(Slot Of(Event Player), Team 2), botAI_MoveJump_Enabled, False);
		Stop Facing(Players In Slot(Slot Of(Event Player), Team 2));
	}
}

rule("AI Subroutine: botAI_FacingReset")
{
	event
	{
		Subroutine;
		botAI_FacingReset;
	}

	actions
	{
		Stop Facing(Players In Slot(Slot Of(Event Player), Team 2));
		If(Compare(Player Variable(Players In Slot(Slot Of(Event Player), Team 1), playerDifficulty), ==, Global Variable(
			difficultyRealistic)));
			Start Facing(Players In Slot(Slot Of(Event Player), Team 2), Add(Direction Towards(Players In Slot(Slot Of(Event Player), Team 2),
				Players In Slot(Slot Of(Event Player), Team 1)), Vector(Player Variable(Players In Slot(Slot Of(Event Player), Team 2),
				botAI_FacingX), Player Variable(Players In Slot(Slot Of(Event Player), Team 2), botAI_FacingY), Player Variable(
				Players In Slot(Slot Of(Event Player), Team 2), botAI_FacingZ))), Min(Random Integer(270, 540), Raise To Power(7.500,
				Angle Between Vectors(Facing Direction Of(Players In Slot(Slot Of(Event Player), Team 2)), Direction Towards(Players In Slot(
				Slot Of(Event Player), Team 2), Players In Slot(Slot Of(Event Player), Team 1))))), To World, Direction and Turn Rate);
		Else If(Compare(Player Variable(Players In Slot(Slot Of(Event Player), Team 1), playerDifficulty), ==, Global Variable(
				difficultyNightmare)));
		End;
	}
}

rule("AI Subroutine: botAI_FacingAbsolute")
{
	event
	{
		Subroutine;
		botAI_FacingAbsolute;
	}

	actions
	{
		Stop Facing(Players In Slot(Slot Of(Event Player), Team 2));
		If(Compare(Player Variable(Players In Slot(Slot Of(Event Player), Team 1), playerDifficulty), ==, Global Variable(
			difficultyRealistic)));
			Start Facing(Players In Slot(Slot Of(Event Player), Team 2), Add(Direction Towards(Eye Position(Players In Slot(Slot Of(
				Event Player), Team 2)), Position Of(Players In Slot(Slot Of(Event Player), Team 1))), Vector(Player Variable(Players In Slot(
				Slot Of(Event Player), Team 2), botAI_FacingX), Player Variable(Players In Slot(Slot Of(Event Player), Team 2), botAI_FacingY),
				Player Variable(Players In Slot(Slot Of(Event Player), Team 2), botAI_FacingZ))), Min(Random Integer(270, 540), Raise To Power(
				7.500, Angle Between Vectors(Facing Direction Of(Players In Slot(Slot Of(Event Player), Team 2)), Direction Towards(
				Eye Position(Players In Slot(Slot Of(Event Player), Team 2)), Position Of(Players In Slot(Slot Of(Event Player), Team 1)))))),
				To World, Direction and Turn Rate);
		Else If(Compare(Player Variable(Players In Slot(Slot Of(Event Player), Team 1), playerDifficulty), ==, Global Variable(
				difficultyNightmare)));
		End;
	}
}

rule("AI Subroutine: botAI_FacingEyePosition")
{
	event
	{
		Subroutine;
		botAI_FacingEyePosition;
	}

	actions
	{
		Stop Facing(Players In Slot(Slot Of(Event Player), Team 2));
		If(Compare(Player Variable(Players In Slot(Slot Of(Event Player), Team 1), playerDifficulty), ==, Global Variable(
			difficultyRealistic)));
			Start Facing(Players In Slot(Slot Of(Event Player), Team 2), Add(Direction Towards(Eye Position(Players In Slot(Slot Of(
				Event Player), Team 2)), Eye Position(Players In Slot(Slot Of(Event Player), Team 1))), Vector(Player Variable(Players In Slot(
				Slot Of(Event Player), Team 2), botAI_FacingX), Player Variable(Players In Slot(Slot Of(Event Player), Team 2), botAI_FacingY),
				Player Variable(Players In Slot(Slot Of(Event Player), Team 2), botAI_FacingZ))), Min(Random Integer(270, 540), Raise To Power(
				7.500, Angle Between Vectors(Facing Direction Of(Players In Slot(Slot Of(Event Player), Team 2)), Direction Towards(
				Eye Position(Players In Slot(Slot Of(Event Player), Team 2)), Eye Position(Players In Slot(Slot Of(Event Player), Team 1)))))),
				To World, Direction and Turn Rate);
		Else If(Compare(Player Variable(Players In Slot(Slot Of(Event Player), Team 1), playerDifficulty), ==, Global Variable(
				difficultyNightmare)));
		End;
	}
}

rule("Realistic Mode AI Enable")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Player Variable(Event Player, botAI_Enabled) == False;
		Player Variable(Players In Slot(Slot Of(Event Player), Team 1), playerDifficulty) >= Global Variable(difficultyRealistic);
		Is In View Angle(Players In Slot(Slot Of(Event Player), Team 1), Event Player, 12.500) == True;
	}

	actions
	{
		Call Subroutine(botAI_RealisticMode_Enable);
	}
}

rule("Realistic Mode AI Disable")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Player Variable(Players In Slot(Slot Of(Event Player), Team 1), playerDifficulty) < Global Variable(difficultyRealistic);
	}

	actions
	{
		Call Subroutine(botAI_RealisticMode_Disable);
	}
}

rule("AI Aim Start")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Player Variable(Event Player, botAI_Enabled) == True;
		Is Alive(Event Player) == True;
		Has Status(Event Player, Knocked Down) == False;
		Has Status(Event Player, Asleep) == False;
		Has Status(Event Player, Frozen) == False;
		Has Status(Event Player, Stunned) == False;
	}

	actions
	{
		Call Subroutine(botAI_FacingReset);
	}
}

rule("AI Aim Stop Status Knocked Down")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Is Alive(Event Player) == True;
		Has Status(Event Player, Knocked Down) == True;
	}

	actions
	{
		Stop Facing(Event Player);
	}
}

rule("AI Aim Stop Status Asleep")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Is Alive(Event Player) == True;
		Has Status(Event Player, Asleep) == True;
	}

	actions
	{
		Stop Facing(Event Player);
	}
}

rule("AI Aim Stop Status Frozen")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Is Alive(Event Player) == True;
		Has Status(Event Player, Frozen) == True;
	}

	actions
	{
		Stop Facing(Event Player);
	}
}

rule("AI Aim Stop Status Stunned")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Is Alive(Event Player) == True;
		Has Status(Event Player, Stunned) == True;
	}

	actions
	{
		Stop Facing(Event Player);
	}
}

rule("AI Attack Melee")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Is Game In Progress == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) < 2.500;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 45) == True;
		Health(Players In Slot(Slot Of(Event Player), Team 1)) <= 30;
	}

	actions
	{
		Press Button(Event Player, Melee);
	}
}

rule("AI Aim Wobble")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Is Game In Progress == True;
		Is Moving(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Is Alive(Event Player) == True;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 45) == True;
	}

	actions
	{
		Set Player Variable(Event Player, botAI_FacingX, Random Real(-0.010, 0.010));
		Set Player Variable(Event Player, botAI_FacingY, Random Real(-0.010, 0.010));
		Set Player Variable(Event Player, botAI_FacingZ, Random Real(-0.010, 0.010));
		Wait(Random Real(0.150, 0.300), Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("AI Rule Can Use Abilities")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Has Status(Event Player, Hacked) == False;
		Has Status(Event Player, Knocked Down) == False;
		Has Status(Event Player, Asleep) == False;
		Has Status(Event Player, Frozen) == False;
		Has Status(Event Player, Phased Out) == False;
		Has Status(Event Player, Stunned) == False;
	}

	actions
	{
		Set Player Variable(Event Player, botAI_CanUseAbilities, True);
	}
}

rule("AI Rule Can Attack")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Has Status(Event Player, Knocked Down) == False;
		Has Status(Event Player, Asleep) == False;
		Has Status(Event Player, Frozen) == False;
		Has Status(Event Player, Phased Out) == False;
		Has Status(Event Player, Stunned) == False;
	}

	actions
	{
		Set Player Variable(Event Player, botAI_CanAttack, True);
	}
}

rule("AI Rule Status Hacked")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Has Status(Event Player, Hacked) == True;
	}

	actions
	{
		Set Player Variable(Event Player, botAI_CanUseAbilities, False);
	}
}

rule("AI Rule Status Knocked Down")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Has Status(Event Player, Knocked Down) == True;
	}

	actions
	{
		Set Player Variable(Event Player, botAI_CanUseAbilities, False);
		Set Player Variable(Event Player, botAI_CanAttack, False);
	}
}

rule("AI Rule Status Asleep")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Has Status(Event Player, Asleep) == True;
	}

	actions
	{
		Set Player Variable(Event Player, botAI_CanUseAbilities, False);
		Set Player Variable(Event Player, botAI_CanAttack, False);
	}
}

rule("AI Rule Status Frozen")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Has Status(Event Player, Frozen) == True;
	}

	actions
	{
		Set Player Variable(Event Player, botAI_CanUseAbilities, False);
		Set Player Variable(Event Player, botAI_CanAttack, False);
	}
}

rule("AI Rule Status Phased Out")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Has Status(Event Player, Phased Out) == True;
	}

	actions
	{
		Set Player Variable(Event Player, botAI_CanUseAbilities, False);
		Set Player Variable(Event Player, botAI_CanAttack, False);
	}
}

rule("AI Rule Status Stunned")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Has Status(Event Player, Stunned) == True;
	}

	actions
	{
		Set Player Variable(Event Player, botAI_CanUseAbilities, False);
		Set Player Variable(Event Player, botAI_CanAttack, False);
	}
}

rule("Realistic Mode AI Movement WASD Move Closer")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Player Variable(Event Player, botAI_Enabled) == True;
		Player Variable(Event Player, botAI_MoveWASD_Enabled) == True;
		Is Alive(Event Player) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) >= Player Variable(Event Player,
			botAI_OptimalDistance);
	}

	actions
	{
		Set Player Variable(Event Player, botAI_ThrottleDir, Random Value In Array(Global Variable(moveDirForwards)));
		Call Subroutine(botAI_WASD);
		Loop If Condition Is True;
		Stop Throttle In Direction(Event Player);
	}
}

rule("Realistic Mode AI Movement WASD Move Farther")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Player Variable(Event Player, botAI_Enabled) == True;
		Player Variable(Event Player, botAI_MoveWASD_Enabled) == True;
		Is Alive(Event Player) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) < Player Variable(Event Player,
			botAI_OptimalDistance);
		Distance Between(Event Player, Player Variable(Players In Slot(Slot Of(Event Player), Team 1), thisPlayerHome)) < Subtract(
			Player Variable(Players In Slot(Slot Of(Event Player), Team 1), enemyDistanceMax), 1);
	}

	actions
	{
		Set Player Variable(Event Player, botAI_ThrottleDir, Random Value In Array(Global Variable(moveDirBackwards)));
		Call Subroutine(botAI_WASD);
		Loop If Condition Is True;
		Stop Throttle In Direction(Event Player);
	}
}

rule("Realistic Mode AI Movement WASD Optimal Distance Resize")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Player Variable(Event Player, botAI_Enabled) == True;
		Player Variable(Event Player, botAI_MoveWASD_Enabled) == True;
		Is Alive(Event Player) == True;
		Player Variable(Event Player, botAI_OptimalDistance) > Subtract(Player Variable(Players In Slot(Slot Of(Event Player), Team 1),
			enemyDistanceMax), 1);
		Distance Between(Event Player, Player Variable(Players In Slot(Slot Of(Event Player), Team 1), thisPlayerHome)) > Subtract(
			Player Variable(Players In Slot(Slot Of(Event Player), Team 1), enemyDistanceMax), 1);
	}

	actions
	{
		Set Player Variable(Event Player, botAI_ThrottleDir, Random Value In Array(Global Variable(moveDirForwards)));
		Call Subroutine(botAI_WASD);
		Loop If Condition Is True;
		Stop Throttle In Direction(Event Player);
	}
}

rule("Realistic Mode AI Movement Crouch")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Player Variable(Event Player, botAI_Enabled) == True;
		Player Variable(Event Player, botAI_MoveCrouch_Enabled) == True;
		Is Alive(Event Player) == True;
	}

	actions
	{
		Call Subroutine(botAI_Crouch);
		Loop If Condition Is True;
		Stop Holding Button(Event Player, Crouch);
	}
}

rule("Realistic Mode AI Movement Jump")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Player Variable(Event Player, botAI_Enabled) == True;
		Player Variable(Event Player, botAI_MoveJump_Enabled) == True;
		Is Alive(Event Player) == True;
	}

	actions
	{
		Call Subroutine(botAI_Jump);
		Loop If Condition Is True;
		Stop Holding Button(Event Player, Jump);
	}
}

rule("AI Reaper General")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Reaper;
	}

	conditions
	{
		Is Game In Progress == True;
		Is Alive(Event Player) == True;
		Player Variable(Event Player, botAI_Enabled) == True;
	}

	actions
	{
		Set Player Variable(Event Player, botAI_OptimalDistance, Random Real(3, 7));
		Set Player Variable(Event Player, botAI_Cooldown_Ability1, 8);
	}
}

rule("AI Reaper Attack")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Reaper;
	}

	conditions
	{
		Player Variable(Event Player, botAI_Enabled) == True;
		Player Variable(Event Player, botAI_UsingAbility) == False;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 20;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 15) == True;
		Has Status(Event Player, Knocked Down) == False;
		Has Status(Event Player, Asleep) == False;
		Has Status(Event Player, Frozen) == False;
		Has Status(Event Player, Phased Out) == False;
		Has Status(Event Player, Stunned) == False;
		Has Status(Event Player, Frozen) == False;
	}

	actions
	{
		Skip If(Is Button Held(Event Player, Primary Fire), 1);
		Start Holding Button(Event Player, Primary Fire);
		Wait(0.500, Ignore Condition);
		Loop If Condition Is True;
		Stop Holding Button(Event Player, Primary Fire);
	}
}

rule("AI Reaper Wraith Form")
{
	event
	{
		Player Took Damage;
		Team 2;
		Reaper;
	}

	conditions
	{
		Player Variable(Event Player, botAI_Enabled) == True;
		Health(Event Player) < 75;
		Total Time Elapsed >= Add(Player Variable(Event Player, botAI_UseTime_Ability1), Player Variable(Event Player,
			botAI_Cooldown_Ability1));
		Has Status(Event Player, Hacked) == False;
		Has Status(Event Player, Knocked Down) == False;
		Has Status(Event Player, Asleep) == False;
		Has Status(Event Player, Frozen) == False;
		Has Status(Event Player, Stunned) == False;
	}

	actions
	{
		Skip If(Compare(Random Real(0, 1), >, 0.750), 4);
		Set Player Variable(Event Player, botAI_UsingAbility, True);
		Press Button(Event Player, Ability 1);
		Set Player Variable(Event Player, botAI_UseTime_Ability1, Total Time Elapsed);
		Wait(3, Ignore Condition);
		Set Player Variable(Event Player, botAI_UsingAbility, False);
	}
}

rule("AI Reaper Death Blossom")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Reaper;
	}

	conditions
	{
		Player Variable(Event Player, botAI_Enabled) == True;
		Ultimate Charge Percent(Event Player) == 100;
		Health(Players In Slot(Slot Of(Event Player), Team 1)) >= 100;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) < 8;
	}

	actions
	{
		Skip If(Compare(Random Real(0, 1), >, 0.750), 4);
		Set Player Variable(Event Player, botAI_UsingAbility, True);
		Press Button(Event Player, Ultimate);
		Wait(3, Ignore Condition);
		Set Player Variable(Event Player, botAI_UsingAbility, False);
	}
}

rule("AI Tracer General")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Tracer;
	}

	conditions
	{
		Is Game In Progress == True;
		Is Alive(Event Player) == True;
		Player Variable(Event Player, botAI_Enabled) == True;
	}

	actions
	{
		Set Player Variable(Event Player, botAI_OptimalDistance, Random Real(5, 6.500));
		Set Player Variable(Event Player, botAI_Cooldown_Ability1, 3.100);
		Set Player Variable(Event Player, botAI_Cooldown_Ability2, 13.250);
		Set Player Variable(Event Player, botAI_Resource_2, 3);
	}
}

rule("AI Tracer Attack")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Tracer;
	}

	conditions
	{
		Player Variable(Event Player, botAI_Enabled) == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 23;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 15) == True;
		Player Variable(Event Player, botAI_CanAttack) == True;
	}

	actions
	{
		Skip If(Is Button Held(Event Player, Primary Fire), 1);
		Start Holding Button(Event Player, Primary Fire);
		Wait(0.250, Abort When False);
		Loop If Condition Is True;
		Stop Holding Button(Event Player, Primary Fire);
	}
}

rule("AI Tracer Blink")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Tracer;
	}

	conditions
	{
		Player Variable(Event Player, botAI_Enabled) == True;
		Player Variable(Event Player, botAI_UsingAbility) == False;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 15;
		Is In View Angle(Players In Slot(Slot Of(Event Player), Team 1), Event Player, 10) == True;
		Player Variable(Event Player, botAI_Resource_2) >= 1;
		Player Variable(Event Player, botAI_CanUseAbilities) == True;
	}

	actions
	{
		Skip If(Compare(Random Real(0, 1), >, 0.750), 7);
		Set Player Variable(Event Player, botAI_MoveWASD_Enabled, False);
		Start Throttle In Direction(Event Player, Random Value In Array(Global Variable(moveDirForwards)), 1, To Player,
			Replace existing throttle, Direction and Magnitude);
		Wait(0.100, Ignore Condition);
		Press Button(Event Player, Ability 1);
		Set Player Variable(Event Player, botAI_UseTime_Ability1, Total Time Elapsed);
		Modify Player Variable(Event Player, botAI_Resource_2, Subtract, 1);
		Set Player Variable(Event Player, botAI_MoveWASD_Enabled, True);
		Wait(Random Real(0.500, 3), Abort When False);
		Loop If Condition Is True;
	}
}

rule("AI Tracer Blink Recharge")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Tracer;
	}

	conditions
	{
		Player Variable(Event Player, botAI_Enabled) == True;
		Player Variable(Event Player, botAI_Resource_2) < 3;
		Is Alive(Event Player) == True;
	}

	actions
	{
		Modify Player Variable(Event Player, botAI_Resource_2, Add, 1);
		Wait(Player Variable(Event Player, botAI_Cooldown_Ability1), Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("AI Tracer Recall")
{
	event
	{
		Player Took Damage;
		Team 2;
		Tracer;
	}

	conditions
	{
		Player Variable(Event Player, botAI_Enabled) == True;
		Health(Event Player) < 65;
		Total Time Elapsed >= Add(Player Variable(Event Player, botAI_UseTime_Ability2), Player Variable(Event Player,
			botAI_Cooldown_Ability2));
		Player Variable(Event Player, botAI_CanUseAbilities) == True;
	}

	actions
	{
		Skip If(Compare(Random Real(0, 1), >=, 0.850), 4);
		Set Player Variable(Event Player, botAI_UsingAbility, True);
		Press Button(Event Player, Ability 2);
		Set Player Variable(Event Player, botAI_UseTime_Ability2, Total Time Elapsed);
		Wait(1.250, Ignore Condition);
		Set Player Variable(Event Player, botAI_UsingAbility, False);
	}
}

rule("AI Tracer Pulse Bomb")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Tracer;
	}

	conditions
	{
		Player Variable(Event Player, botAI_Enabled) == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Health(Players In Slot(Slot Of(Event Player), Team 1)) >= 100;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 4;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 5) == True;
		Ultimate Charge Percent(Event Player) == 100;
		Player Variable(Event Player, botAI_CanUseAbilities) == True;
	}

	actions
	{
		Set Player Variable(Event Player, botAI_UsingAbility, True);
		Wait(0.016, Abort When False);
		Press Button(Event Player, Ultimate);
		Wait(0.016, Ignore Condition);
		Start Throttle In Direction(Event Player, Random Value In Array(Global Variable(moveDirBackwards)), 1, To Player,
			Replace existing throttle, Direction and Magnitude);
		Wait(0.100, Ignore Condition);
		Press Button(Event Player, Ability 1);
		Stop Throttle In Direction(Event Player);
		Set Player Variable(Event Player, botAI_UsingAbility, False);
	}
}

rule("AI Mercy General")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Mercy;
	}

	conditions
	{
		Is Game In Progress == True;
		Is Alive(Event Player) == True;
		Player Variable(Event Player, botAI_Enabled) == True;
	}

	actions
	{
		Set Player Variable(Event Player, botAI_OptimalDistance, Random Real(8, 12));
	}
}

rule("AI Mercy Attack")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Mercy;
	}

	conditions
	{
		Player Variable(Event Player, botAI_Enabled) == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 10) == True;
		Player Variable(Event Player, botAI_CanAttack) == True;
	}

	actions
	{
		Skip If(Is Button Held(Event Player, Primary Fire), 1);
		Start Holding Button(Event Player, Primary Fire);
		Wait(0.500, Ignore Condition);
		Loop If Condition Is True;
		Stop Holding Button(Event Player, Primary Fire);
	}
}

rule("AI Mercy Valkyrie Start")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Mercy;
	}

	conditions
	{
		Player Variable(Event Player, botAI_Enabled) == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Ultimate Charge Percent(Event Player) == 100;
		Player Variable(Event Player, botAI_CanUseAbilities) == True;
	}

	actions
	{
		Press Button(Event Player, Ultimate);
	}
}

rule("AI Mercy Valkyrie Movement")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Mercy;
	}

	conditions
	{
		Player Variable(Event Player, botAI_Enabled) == True;
		Is Alive(Event Player) == True;
		Is Using Ultimate(Event Player) == True;
	}

	actions
	{
		Set Player Variable(Event Player, botAI_MoveJump_Enabled, False);
		Set Player Variable(Event Player, botAI_MoveCrouch_Enabled, False);
		Wait(0.100, Ignore Condition);
		Start Holding Button(Event Player, Jump);
		Wait(Random Real(0.500, 1.250), Ignore Condition);
		Stop Holding Button(Event Player, Jump);
		Wait(0.100, Ignore Condition);
		Start Holding Button(Event Player, Crouch);
		Wait(Random Real(0.500, 1.250), Ignore Condition);
		Stop Holding Button(Event Player, Crouch);
		Loop If Condition Is True;
		Stop Holding Button(Event Player, Jump);
		Stop Holding Button(Event Player, Crouch);
		Set Player Variable(Event Player, botAI_MoveJump_Enabled, True);
		Set Player Variable(Event Player, botAI_MoveCrouch_Enabled, True);
	}
}

rule("AI Hanzo General")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Hanzo;
	}

	conditions
	{
		Is Game In Progress == True;
		Is Alive(Event Player) == True;
		Player Variable(Event Player, botAI_Enabled) == True;
	}

	actions
	{
		Set Player Variable(Event Player, botAI_OptimalDistance, Random Real(15, 20));
		Set Player Variable(Event Player, botAI_Cooldown_Ability1, 12);
		Set Player Variable(Event Player, botAI_Cooldown_Ability2, 10);
		Call Subroutine(botAI_FacingEyePosition);
	}
}

rule("AI Hanzo Attack")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Hanzo;
	}

	conditions
	{
		Player Variable(Event Player, botAI_Enabled) == True;
		Is Using Ability 2(Event Player) == False;
		Player Variable(Event Player, botAI_UsingAbility) == False;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 15) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 40;
		Player Variable(Event Player, botAI_CanAttack) == True;
	}

	actions
	{
		Start Holding Button(Event Player, Primary Fire);
		Wait(Random Real(1.250, 1.750), Ignore Condition);
		Stop Holding Button(Event Player, Primary Fire);
		Loop If Condition Is True;
		Stop Holding Button(Event Player, Primary Fire);
	}
}

rule("AI Hanzo Storm Arrows Start")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Hanzo;
	}

	conditions
	{
		Player Variable(Event Player, botAI_Enabled) == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 15;
		Health(Players In Slot(Slot Of(Event Player), Team 1)) >= 100;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 15) == True;
		Player Variable(Event Player, botAI_CanUseAbilities) == True;
	}

	actions
	{
		Press Button(Event Player, Ability 2);
	}
}

rule("AI Hanzo Storm Arrows Fire")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Hanzo;
	}

	conditions
	{
		Player Variable(Event Player, botAI_Enabled) == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 7.500) == True;
		Is Using Ability 2(Event Player) == True;
		Player Variable(Event Player, botAI_CanUseAbilities) == True;
	}

	actions
	{
		Press Button(Event Player, Primary Fire);
		Wait(0.350, Ignore Condition);
		Loop If Condition Is True;
		Set Player Variable(Event Player, botAI_UsingAbility, False);
	}
}

rule("AI Torbjorn General")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Torbjörn;
	}

	conditions
	{
		Is Game In Progress == True;
		Is Alive(Event Player) == True;
		Player Variable(Event Player, botAI_Enabled) == True;
	}

	actions
	{
		Set Player Variable(Event Player, botAI_OptimalDistance, Random Real(15, 20));
		Set Player Variable(Event Player, botAI_Cooldown_Ability1, 13);
		Set Player Variable(Event Player, botAI_Cooldown_Ability2, 15);
		Call Subroutine(botAI_FacingEyePosition);
	}
}

rule("AI Torbjorn Attack Primary")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Torbjörn;
	}

	conditions
	{
		Player Variable(Event Player, botAI_Enabled) == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 40;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) > 10;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 15) == True;
		Is Using Ultimate(Event Player) == False;
		Player Variable(Event Player, botAI_CanAttack) == True;
	}

	actions
	{
		Skip If(Is Button Held(Event Player, Primary Fire), 1);
		Start Holding Button(Event Player, Primary Fire);
		Wait(0.600, Ignore Condition);
		Loop If Condition Is True;
		Stop Holding Button(Event Player, Primary Fire);
	}
}

rule("AI Torbjorn Attack Secondary")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Torbjörn;
	}

	conditions
	{
		Player Variable(Event Player, botAI_Enabled) == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 10;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 25) == True;
		Is Using Ultimate(Event Player) == False;
		Player Variable(Event Player, botAI_CanAttack) == True;
	}

	actions
	{
		Skip If(Is Button Held(Event Player, Secondary Fire), 1);
		Start Holding Button(Event Player, Secondary Fire);
		Wait(0.600, Ignore Condition);
		Loop If Condition Is True;
		Stop Holding Button(Event Player, Secondary Fire);
	}
}

rule("AI Torbjorn Deploy Turret")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Torbjörn;
	}

	conditions
	{
		Player Variable(Event Player, botAI_Enabled) == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Total Time Elapsed >= Add(Player Variable(Event Player, botAI_UseTime_Ability1), Player Variable(Event Player,
			botAI_Cooldown_Ability1));
		Player Variable(Event Player, botAI_CanUseAbilities) == True;
	}

	actions
	{
		Start Facing(Event Player, Direction Towards(Event Player, Vector(Random Real(-4, -6), 0, Random Real(0, 1))), 360, To Player,
			None);
		Wait(0.300, Ignore Condition);
		Press Button(Event Player, Ability 1);
		Set Player Variable(Event Player, botAI_UseTime_Ability1, Total Time Elapsed);
		Call Subroutine(botAI_FacingEyePosition);
	}
}

rule("AI Torbjorn Overload")
{
	event
	{
		Player Took Damage;
		Team 2;
		Torbjörn;
	}

	conditions
	{
		Player Variable(Event Player, botAI_Enabled) == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Health(Event Player) <= 90;
		Total Time Elapsed >= Add(Player Variable(Event Player, botAI_UseTime_Ability2), Player Variable(Event Player,
			botAI_Cooldown_Ability2));
		Player Variable(Event Player, botAI_CanUseAbilities) == True;
	}

	actions
	{
		Press Button(Event Player, Ability 2);
		Set Player Variable(Event Player, botAI_UseTime_Ability2, Total Time Elapsed);
	}
}

rule("AI Torbjorn Molten Core")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Torbjörn;
	}

	conditions
	{
		Player Variable(Event Player, botAI_Enabled) == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Ultimate Charge Percent(Event Player) == 100;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 25;
		Player Variable(Event Player, botAI_CanUseAbilities) == True;
	}

	actions
	{
		Press Button(Event Player, Ultimate);
		For Player Variable(Event Player, index, 9, 0, -1);
			Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Vector(X Component Of(Position Of(Players In Slot(Slot Of(
				Event Player), Team 1))), Player Variable(Event Player, index), Z Component Of(Position Of(Players In Slot(Slot Of(
				Event Player), Team 1))))), 270, To World, Direction and Turn Rate);
			Wait(Random Real(0.200, 0.400), Ignore Condition);
			Press Button(Event Player, Primary Fire);
		End;
		Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Eye Position(Players In Slot(Slot Of(Event Player),
			Team 1))), Random Integer(270, 360), To World, Direction and Turn Rate);
	}
}

rule("AI Reinhardt General")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Reinhardt;
	}

	conditions
	{
		Is Game In Progress == True;
		Is Alive(Event Player) == True;
		Player Variable(Event Player, botAI_Enabled) == True;
	}

	actions
	{
		Set Player Variable(Event Player, botAI_OptimalDistance, Random Real(2.500, 5));
		Set Player Variable(Event Player, botAI_Cooldown_Ability1, 10.600);
		Set Player Variable(Event Player, botAI_Cooldown_Ability2, 6.500);
	}
}

rule("AI Reinhardt Attack")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Reinhardt;
	}

	conditions
	{
		Player Variable(Event Player, botAI_Enabled) == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 5.500;
		Is Button Held(Event Player, Secondary Fire) == False;
		Player Variable(Event Player, botAI_CanAttack) == True;
	}

	actions
	{
		Stop Holding Button(Event Player, Secondary Fire);
		Skip If(Is Button Held(Event Player, Primary Fire), 1);
		Start Holding Button(Event Player, Primary Fire);
		Wait(1, Ignore Condition);
		Loop If Condition Is True;
		Stop Holding Button(Event Player, Primary Fire);
	}
}

rule("AI Reinhardt Use Shield")
{
	event
	{
		Player Took Damage;
		Team 2;
		Reinhardt;
	}

	conditions
	{
		Player Variable(Event Player, botAI_Enabled) == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Is In View Angle(Players In Slot(Slot Of(Event Player), Team 1), Event Player, 15) == True;
		Player Variable(Event Player, botAI_CanUseAbilities) == True;
	}

	actions
	{
		Wait(0.200, Ignore Condition);
		Skip If(Compare(Random Real(0, 1), >, 0.750), 3);
		Start Holding Button(Event Player, Secondary Fire);
		Wait(Random Real(0.500, 3.500), Ignore Condition);
		Stop Holding Button(Event Player, Secondary Fire);
		Loop If Condition Is True;
		Stop Holding Button(Event Player, Secondary Fire);
	}
}

rule("AI Reinhardt Charge Start")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Reinhardt;
	}

	conditions
	{
		Player Variable(Event Player, botAI_Enabled) == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 15) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 10;
		Health(Players In Slot(Slot Of(Event Player), Team 1)) >= 75;
		Y Component Of(Position Of(Players In Slot(Slot Of(Event Player), Team 1))) < 2;
		Y Component Of(Position Of(Event Player)) < 2;
		Total Time Elapsed >= Add(Player Variable(Event Player, botAI_UseTime_Ability1), Player Variable(Event Player,
			botAI_Cooldown_Ability1));
		Player Variable(Event Player, botAI_CanUseAbilities) == True;
	}

	actions
	{
		Press Button(Event Player, Ability 1);
		Set Player Variable(Event Player, botAI_UseTime_Ability1, Total Time Elapsed);
	}
}

rule("AI Reinhardt Charge")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Reinhardt;
	}

	conditions
	{
		Player Variable(Event Player, botAI_Enabled) == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Is Using Ability 1(Event Player) == True;
		Has Status(Players In Slot(Slot Of(Event Player), Team 1), Stunned) == True;
		Distance Between(Event Player, Player Variable(Players In Slot(Slot Of(Event Player), Team 1), thisPlayerHome)) >= Subtract(
			Player Variable(Players In Slot(Slot Of(Event Player), Team 1), playerZoneRadius), 2);
		Y Component Of(Position Of(Players In Slot(Slot Of(Event Player), Team 1))) < 2;
		Y Component Of(Position Of(Event Player)) < 2;
	}

	actions
	{
		Set Status(Event Player, Null, Stunned, 0.250);
		Apply Impulse(Event Player, Backward, 1, To World, Cancel Contrary Motion);
		Set Status(Players In Slot(Slot Of(Event Player), Opposite Team Of(Team 1)), Event Player, Stunned, 0.500);
		Damage(Players In Slot(Slot Of(Event Player), Opposite Team Of(Team Of(Event Player))), Event Player, 300);
		Wait(0.100, Ignore Condition);
		Apply Impulse(Players In Slot(Slot Of(Event Player), Team 1), Direction Towards(Players In Slot(Slot Of(Event Player), Team 1),
			Event Player), 1, To World, Cancel Contrary Motion);
	}
}

rule("AI Reinhardt Firestrike")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Reinhardt;
	}

	conditions
	{
		Player Variable(Event Player, botAI_Enabled) == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 15) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 20;
		Total Time Elapsed >= Add(Player Variable(Event Player, botAI_UseTime_Ability2), Player Variable(Event Player,
			botAI_Cooldown_Ability2));
		Player Variable(Event Player, botAI_CanUseAbilities) == True;
	}

	actions
	{
		Stop Holding Button(Event Player, Secondary Fire);
		Wait(0.250, Ignore Condition);
		Call Subroutine(botAI_FacingAbsolute);
		Wait(0.250, Ignore Condition);
		Press Button(Event Player, Ability 2);
		Set Player Variable(Event Player, botAI_UseTime_Ability2, Total Time Elapsed);
		Wait(0.600, Ignore Condition);
		Call Subroutine(botAI_FacingReset);
	}
}

rule("AI Reinhardt Earthshatter")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Reinhardt;
	}

	conditions
	{
		Player Variable(Event Player, botAI_Enabled) == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Ultimate Charge Percent(Event Player) == 100;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 25) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 17.500;
		Health(Players In Slot(Slot Of(Event Player), Team 1)) >= 100;
		Health(Event Player) >= 150;
		Player Variable(Event Player, botAI_CanUseAbilities) == True;
	}

	actions
	{
		Stop Holding Button(Event Player, Secondary Fire);
		Press Button(Event Player, Ultimate);
	}
}

rule("AI Pharah General")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Pharah;
	}

	conditions
	{
		Is Game In Progress == True;
		Is Alive(Event Player) == True;
		Player Variable(Event Player, botAI_Enabled) == True;
	}

	actions
	{
		Set Player Variable(Event Player, botAI_OptimalDistance, Random Real(9, 12));
		Set Player Variable(Event Player, botAI_Cooldown_Ability1, 10);
		Set Player Variable(Event Player, botAI_Cooldown_Ability2, 9);
		Call Subroutine(botAI_FacingAbsolute);
	}
}

rule("AI Pharah Hover Jets")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Pharah;
	}

	conditions
	{
		Player Variable(Event Player, botAI_Enabled) == True;
		Is Alive(Event Player) == True;
		Player Variable(Event Player, botAI_CanUseAbilities) == True;
	}

	actions
	{
		Start Holding Button(Event Player, Secondary Fire);
		Wait(Random Real(0.500, 1.500), Ignore Condition);
		Stop Holding Button(Event Player, Secondary Fire);
		Wait(Random Real(0.500, 1.500), Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("AI Pharah Attack")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Pharah;
	}

	conditions
	{
		Player Variable(Event Player, botAI_Enabled) == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 35;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 7.500) == True;
		Player Variable(Event Player, botAI_CanAttack) == True;
	}

	actions
	{
		Press Button(Event Player, Primary Fire);
		Wait(0.750, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("AI Pharah Jump Jet")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Pharah;
	}

	conditions
	{
		Player Variable(Event Player, botAI_Enabled) == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Total Time Elapsed >= Add(Player Variable(Event Player, botAI_UseTime_Ability1), Player Variable(Event Player,
			botAI_Cooldown_Ability1));
		Player Variable(Event Player, botAI_CanUseAbilities) == True;
	}

	actions
	{
		Press Button(Event Player, Ability 1);
		Set Player Variable(Event Player, botAI_UseTime_Ability1, Total Time Elapsed);
	}
}

rule("AI Pharah Concussive Blast")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Pharah;
	}

	conditions
	{
		Player Variable(Event Player, botAI_Enabled) == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Total Time Elapsed >= Add(Player Variable(Event Player, botAI_UseTime_Ability2), Player Variable(Event Player,
			botAI_Cooldown_Ability2));
		Player Variable(Event Player, botAI_CanUseAbilities) == True;
	}

	actions
	{
		Wait(0.500, Abort When False);
		Press Button(Event Player, Ability 2);
		Set Player Variable(Event Player, botAI_UseTime_Ability2, Total Time Elapsed);
	}
}

rule("AI Pharah Barrage")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Pharah;
	}

	conditions
	{
		Player Variable(Event Player, botAI_Enabled) == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Ultimate Charge Percent(Event Player) == 100;
		Player Variable(Event Player, botAI_CanUseAbilities) == True;
		Y Component Of(Position Of(Event Player)) >= 4;
		Y Component Of(Position Of(Event Player)) <= 12;
		Health(Players In Slot(Slot Of(Event Player), Team 1)) >= 125;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 12;
	}

	actions
	{
		Press Button(Event Player, Ultimate);
	}
}

rule("AI Winston General")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Winston;
	}

	conditions
	{
		Is Game In Progress == True;
		Is Alive(Event Player) == True;
		Player Variable(Event Player, botAI_Enabled) == True;
	}

	actions
	{
		Set Player Variable(Event Player, botAI_OptimalDistance, Random Real(3, 6));
		Set Player Variable(Event Player, botAI_Cooldown_Ability1, 6);
		Set Player Variable(Event Player, botAI_Cooldown_Ability2, 13);
		Call Subroutine(botAI_FacingReset);
	}
}

rule("AI Winston Attack")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Winston;
	}

	conditions
	{
		Player Variable(Event Player, botAI_Enabled) == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 8;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 15) == True;
		Player Variable(Event Player, botAI_CanAttack) == True;
	}

	actions
	{
		Skip If(Is Button Held(Event Player, Primary Fire), 1);
		Start Holding Button(Event Player, Primary Fire);
		Wait(0.750, Ignore Condition);
		Loop If Condition Is True;
		Stop Holding Button(Event Player, Primary Fire);
	}
}

rule("AI Winston Jump Pack")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Winston;
	}

	conditions
	{
		Player Variable(Event Player, botAI_Enabled) == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) > Player Variable(Event Player,
			botAI_OptimalDistance);
		Total Time Elapsed >= Add(Player Variable(Event Player, botAI_UseTime_Ability1), Player Variable(Event Player,
			botAI_Cooldown_Ability1));
		Player Variable(Event Player, botAI_CanUseAbilities) == True;
	}

	actions
	{
		Set Player Variable(Event Player, botAI_MoveWASD_Enabled, False);
		Start Throttle In Direction(Event Player, Direction Towards(Event Player, Players In Slot(Slot Of(Event Player), Team 1)), 1,
			To World, Replace existing throttle, Direction and Magnitude);
		Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Add(Position Of(Players In Slot(Slot Of(Event Player),
			Team 1)), Vector(0, Multiply(Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)), 0.200), 0))),
			Random Integer(270, 360), To World, Direction and Turn Rate);
		Wait(0.100, Ignore Condition);
		Press Button(Event Player, Ability 1);
		Set Player Variable(Event Player, botAI_UseTime_Ability1, Total Time Elapsed);
		Wait(0.250, Ignore Condition);
		Call Subroutine(botAI_FacingReset);
		Set Player Variable(Event Player, botAI_MoveWASD_Enabled, True);
	}
}

rule("AI Winston Barrier Projector")
{
	event
	{
		Player Took Damage;
		Team 2;
		Winston;
	}

	conditions
	{
		Player Variable(Event Player, botAI_Enabled) == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 8;
		Total Time Elapsed >= Add(Player Variable(Event Player, botAI_UseTime_Ability2), Player Variable(Event Player,
			botAI_Cooldown_Ability2));
		Player Variable(Event Player, botAI_CanUseAbilities) == True;
	}

	actions
	{
		Skip If(Compare(Random Real(0, 1), >=, 0.500), 2);
		Press Button(Event Player, Ability 2);
		Set Player Variable(Event Player, botAI_UseTime_Ability2, Total Time Elapsed);
	}
}

rule("AI Winston Primal Rage")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Winston;
	}

	conditions
	{
		Player Variable(Event Player, botAI_Enabled) == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Ultimate Charge Percent(Event Player) == 100;
		Health(Players In Slot(Slot Of(Event Player), Team 1)) >= 125;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 20;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 15) == True;
		Player Variable(Event Player, botAI_CanUseAbilities) == True;
	}

	actions
	{
		Press Button(Event Player, Ultimate);
		Set Player Variable(Event Player, botAI_OptimalDistance, Random Real(1.500, 3));
		Set Player Variable(Event Player, botAI_Cooldown_Ability1, 2);
		Set Player Variable(Event Player, botAI_UseTime_Ability1, 0);
		Wait(10, Ignore Condition);
		Set Player Variable(Event Player, botAI_OptimalDistance, Random Real(3, 6));
		Set Player Variable(Event Player, botAI_Cooldown_Ability1, 6);
		Set Player Variable(Event Player, botAI_UseTime_Ability1, 0);
	}
}

rule("AI Widowmaker General")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Widowmaker;
	}

	conditions
	{
		Is Game In Progress == True;
		Is Alive(Event Player) == True;
		Player Variable(Event Player, botAI_Enabled) == True;
	}

	actions
	{
		Set Player Variable(Event Player, botAI_OptimalDistance, Random Integer(30, 40));
		Call Subroutine(botAI_FacingReset);
	}
}

rule("AI Widowmaker Aim Down Sights")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Widowmaker;
	}

	conditions
	{
		Player Variable(Event Player, botAI_Enabled) == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) >= 12;
		Player Variable(Event Player, botAI_CanAttack) == True;
	}

	actions
	{
		Skip If(Is Button Held(Event Player, Secondary Fire), 3);
		Set Player Variable(Event Player, botAI_MoveJump_Enabled, False);
		Start Holding Button(Event Player, Secondary Fire);
		Call Subroutine(botAI_FacingEyePosition);
		Wait(0.750, Ignore Condition);
		Loop If Condition Is True;
		Stop Holding Button(Event Player, Secondary Fire);
		Call Subroutine(botAI_FacingReset);
		Set Player Variable(Event Player, botAI_MoveJump_Enabled, True);
	}
}

rule("AI Widowmaker Charge And Fire")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Widowmaker;
	}

	conditions
	{
		Player Variable(Event Player, botAI_Enabled) == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Is Button Held(Event Player, Secondary Fire) == True;
		Is In View Angle(Event Player, Eye Position(Players In Slot(Slot Of(Event Player), Team 1)), 6) == True;
	}

	actions
	{
		Wait(Random Real(1.300, 1.600), Abort When False);
		Press Button(Event Player, Primary Fire);
		Loop If Condition Is True;
	}
}

rule("AI Widowmaker Attack SMG")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Widowmaker;
	}

	conditions
	{
		Player Variable(Event Player, botAI_Enabled) == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) < 12;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 15) == True;
		Player Variable(Event Player, botAI_CanAttack) == True;
	}

	actions
	{
		Skip If(Is Button Held(Event Player, Primary Fire), 1);
		Start Holding Button(Event Player, Primary Fire);
		Wait(0.500, Ignore Condition);
		Loop If Condition Is True;
		Stop Holding Button(Event Player, Primary Fire);
	}
}

rule("AI Bastion General")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Bastion;
	}

	conditions
	{
		Is Game In Progress == True;
		Is Alive(Event Player) == True;
		Player Variable(Event Player, botAI_Enabled) == True;
	}

	actions
	{
		Set Player Variable(Event Player, botAI_OptimalDistance, Random Real(18, 22));
		Set Player Variable(Event Player, botAI_Cooldown_Ability1, 1);
		Set Player Variable(Event Player, botAI_Cooldown_Ability3, 1.500);
		Call Subroutine(botAI_FacingReset);
	}
}

rule("AI Bastion Attack")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Bastion;
	}

	conditions
	{
		Player Variable(Event Player, botAI_Enabled) == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 35;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 15) == True;
		Player Variable(Event Player, botAI_CanAttack) == True;
		Is Using Ability 1(Event Player) == False;
		Is Firing Secondary(Event Player) == False;
	}

	actions
	{
		Start Holding Button(Event Player, Primary Fire);
		Wait(1, Ignore Condition);
		Loop If Condition Is True;
		Stop Holding Button(Event Player, Primary Fire);
	}
}

rule("AI Bastion Reconfigure")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Bastion;
	}

	conditions
	{
		Player Variable(Event Player, botAI_Enabled) == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= Player Variable(Event Player,
			botAI_OptimalDistance);
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 15) == True;
		Total Time Elapsed >= Add(Player Variable(Event Player, botAI_UseTime_Ability1), Player Variable(Event Player,
			botAI_Cooldown_Ability1));
		Player Variable(Event Player, botAI_CanUseAbilities) == True;
		Is Moving(Event Player) == True;
	}

	actions
	{
		Press Button(Event Player, Ability 1);
		Set Player Variable(Event Player, botAI_UseTime_Ability1, Total Time Elapsed);
	}
}

rule("AI Bastion Self-Repair")
{
	event
	{
		Player Took Damage;
		Team 2;
		Bastion;
	}

	conditions
	{
		Player Variable(Event Player, botAI_Enabled) == True;
		Is Alive(Event Player) == True;
		Total Time Elapsed >= Add(Player Variable(Event Player, botAI_UseTime_Ability3), Player Variable(Event Player,
			botAI_Cooldown_Ability3));
		Player Variable(Event Player, botAI_CanUseAbilities) == True;
	}

	actions
	{
		Start Holding Button(Event Player, Secondary Fire);
		Wait(Divide(Subtract(Max Health(Event Player), Health(Event Player)), 75), Ignore Condition);
		Stop Holding Button(Event Player, Secondary Fire);
		Set Player Variable(Event Player, botAI_UseTime_Ability3, Total Time Elapsed);
	}
}

rule("AI Bastion Configuration: Tank")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Bastion;
	}

	conditions
	{
		Player Variable(Event Player, botAI_Enabled) == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Ultimate Charge Percent(Event Player) == 100;
		Health(Event Player) >= 100;
		Player Variable(Event Player, botAI_CanUseAbilities) == True;
	}

	actions
	{
		Press Button(Event Player, Ultimate);
		Call Subroutine(botAI_FacingAbsolute);
		Wait(8, Ignore Condition);
		Call Subroutine(botAI_FacingReset);
	}
}

rule("AI Symmetra General")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Symmetra;
	}

	conditions
	{
		Is Game In Progress == True;
		Is Alive(Event Player) == True;
		Player Variable(Event Player, botAI_Enabled) == True;
	}

	actions
	{
		Set Player Variable(Event Player, botAI_OptimalDistance, Random Real(6, 10));
		Set Player Variable(Event Player, botAI_Cooldown_Ability1, 11.500);
		Set Player Variable(Event Player, botAI_Cooldown_Ability2, 14);
		Set Player Variable(Event Player, botAI_Resource_2, 3);
		Call Subroutine(botAI_FacingReset);
	}
}

rule("AI Symmetra Attack Primary")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Symmetra;
	}

	conditions
	{
		Player Variable(Event Player, botAI_Enabled) == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 12;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 15) == True;
		Player Variable(Event Player, botAI_CanAttack) == True;
	}

	actions
	{
		Wait(0.250, Ignore Condition);
		Skip If(Is Button Held(Event Player, Primary Fire), 1);
		Start Holding Button(Event Player, Primary Fire);
		Wait(0.500, Ignore Condition);
		Loop If Condition Is True;
		Stop Holding Button(Event Player, Primary Fire);
	}
}

rule("AI Symmetra Attack Secondary")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Symmetra;
	}

	conditions
	{
		Player Variable(Event Player, botAI_Enabled) == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 40;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) > 12;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 15) == True;
		Player Variable(Event Player, botAI_CanAttack) == True;
	}

	actions
	{
		Skip If(Is Button Held(Event Player, Secondary Fire), 1);
		Start Holding Button(Event Player, Secondary Fire);
		Wait(Random Real(0.500, 1), Ignore Condition);
		Stop Holding Button(Event Player, Primary Fire);
		Loop If Condition Is True;
	}
}

rule("AI Symmetra Photon Barrier")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Symmetra;
	}

	conditions
	{
		Player Variable(Event Player, botAI_Enabled) == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Ultimate Charge Percent(Event Player) == 100;
		Health(Event Player) >= 100;
		Player Variable(Event Player, botAI_CanUseAbilities) == True;
	}

	actions
	{
		Press Button(Event Player, Ultimate);
		Wait(0.200, Ignore Condition);
		Press Button(Event Player, Ultimate);
		Wait(0.100, Ignore Condition);
		Press Button(Event Player, Primary Fire);
	}
}

rule("AI Zenyatta General")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Zenyatta;
	}

	conditions
	{
		Is Game In Progress == True;
		Is Alive(Event Player) == True;
		Player Variable(Event Player, botAI_Enabled) == True;
	}

	actions
	{
		Set Player Variable(Event Player, botAI_OptimalDistance, Random Real(12, 16));
	}
}

rule("AI Zenyatta Attack Primary")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Zenyatta;
	}

	conditions
	{
		Player Variable(Event Player, botAI_Enabled) == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Is Button Held(Event Player, Secondary Fire) == False;
		Is Using Ultimate(Event Player) == False;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 35;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 15) == True;
		Player Variable(Event Player, botAI_CanAttack) == True;
	}

	actions
	{
		Skip If(Is Button Held(Event Player, Primary Fire), 1);
		Start Holding Button(Event Player, Primary Fire);
		Wait(0.400, Ignore Condition);
		Loop If Condition Is True;
		Stop Holding Button(Event Player, Primary Fire);
	}
}

rule("AI Zenyatta Attack Secondary")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Zenyatta;
	}

	conditions
	{
		Player Variable(Event Player, botAI_Enabled) == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Is Using Ultimate(Event Player) == False;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 12;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 15) == True;
		Player Variable(Event Player, botAI_CanAttack) == True;
	}

	actions
	{
		Stop Holding Button(Event Player, Primary Fire);
		Skip If(Is Button Held(Event Player, Secondary Fire), 1);
		Start Holding Button(Event Player, Secondary Fire);
		Wait(2.500, Ignore Condition);
		Stop Holding Button(Event Player, Secondary Fire);
	}
}

rule("AI Zenyatta Orb of Discord")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Zenyatta;
	}

	conditions
	{
		Player Variable(Event Player, botAI_Enabled) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Opposite Team Of(Team Of(Event Player)))) == True;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Opposite Team Of(Team Of(Event Player))), 15) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Opposite Team Of(Team Of(Event Player)))) <= 75;
		Player Variable(Event Player, botAI_UsingAbility) == False;
	}

	actions
	{
		Skip If(Is Using Ability 2(Event Player), 1);
		Press Button(Event Player, Ability 2);
		Wait(1, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("AI Zenyatta Transcendence")
{
	event
	{
		Player Took Damage;
		Team 2;
		Zenyatta;
	}

	conditions
	{
		Player Variable(Event Player, botAI_Enabled) == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Player Variable(Event Player, botAI_CanUseAbilities) == True;
		Ultimate Charge Percent(Event Player) == 100;
		Health(Event Player) < 50;
	}

	actions
	{
		Press Button(Event Player, Ultimate);
	}
}

rule("AI Genji General")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Genji;
	}

	conditions
	{
		Is Game In Progress == True;
		Is Alive(Event Player) == True;
		Player Variable(Event Player, botAI_Enabled) == True;
	}

	actions
	{
		Set Player Variable(Event Player, botAI_OptimalDistance, Random Real(7, 14));
		Set Player Variable(Event Player, botAI_Cooldown_Ability1, 8.300);
		Set Player Variable(Event Player, botAI_Cooldown_Ability2, 10);
	}
}

rule("AI Genji Attack Primary")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Genji;
	}

	conditions
	{
		Player Variable(Event Player, botAI_Enabled) == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 25;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 15) == True;
		Player Variable(Event Player, botAI_CanAttack) == True;
		Is Using Ability 1(Event Player) == False;
		Is Using Ability 2(Event Player) == False;
		Is Using Ultimate(Event Player) == False;
	}

	actions
	{
		Skip If(Is Button Held(Event Player, Primary Fire), 1);
		Start Holding Button(Event Player, Primary Fire);
		Wait(1, Ignore Condition);
		Loop If Condition Is True;
		Stop Holding Button(Event Player, Primary Fire);
	}
}

rule("AI Genji Attack Secondary")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Genji;
	}

	conditions
	{
		Player Variable(Event Player, botAI_Enabled) == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 5;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 15) == True;
		Player Variable(Event Player, botAI_CanAttack) == True;
		Is Using Ability 1(Event Player) == False;
		Is Using Ability 2(Event Player) == False;
		Is Using Ultimate(Event Player) == False;
		Health(Players In Slot(Slot Of(Event Player), Team 1)) < 50;
	}

	actions
	{
		Skip If(Is Button Held(Event Player, Secondary Fire), 1);
		Start Holding Button(Event Player, Secondary Fire);
		Wait(0.750, Ignore Condition);
		Loop If Condition Is True;
		Stop Holding Button(Event Player, Secondary Fire);
	}
}

rule("AI Genji Deflect")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Genji;
	}

	conditions
	{
		Player Variable(Event Player, botAI_Enabled) == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 25;
		Is In View Angle(Players In Slot(Slot Of(Event Player), Team 1), Event Player, 7.500) == True;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 15) == True;
		Total Time Elapsed >= Add(Player Variable(Event Player, botAI_UseTime_Ability2), Player Variable(Event Player,
			botAI_Cooldown_Ability2));
		Player Variable(Event Player, botAI_CanUseAbilities) == True;
		Is Using Ability 1(Event Player) == False;
		Array Contains(Global Variable(projectileHeroes), Hero Of(Players In Slot(Slot Of(Event Player), Team 1))) == True;
		Is Button Held(Players In Slot(Slot Of(Event Player), Team 1), Primary Fire) == True;
	}

	actions
	{
		Skip If(Compare(Random Real(0, 1), >, 0.500), 2);
		Press Button(Event Player, Ability 2);
		Set Player Variable(Event Player, botAI_UseTime_Ability2, Total Time Elapsed);
	}
}

rule("AI Genji Swift Strike Movement")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Genji;
	}

	conditions
	{
		Player Variable(Event Player, botAI_Enabled) == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 12.500;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 15) == True;
		Total Time Elapsed >= Add(Player Variable(Event Player, botAI_UseTime_Ability1), Player Variable(Event Player,
			botAI_Cooldown_Ability1));
		Player Variable(Event Player, botAI_CanUseAbilities) == True;
		Is Using Ability 2(Event Player) == False;
	}

	actions
	{
		Skip If(Compare(Random Real(0, 1), >, 0.500), 2);
		Press Button(Event Player, Ability 1);
		Set Player Variable(Event Player, botAI_UseTime_Ability1, Total Time Elapsed);
	}
}

rule("AI Genji Swift Strike Final")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Genji;
	}

	conditions
	{
		Player Variable(Event Player, botAI_Enabled) == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 12.500;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 15) == True;
		Total Time Elapsed >= Add(Player Variable(Event Player, botAI_UseTime_Ability1), Player Variable(Event Player,
			botAI_Cooldown_Ability1));
		Player Variable(Event Player, botAI_CanUseAbilities) == True;
		Is Using Ability 2(Event Player) == False;
		Health(Players In Slot(Slot Of(Event Player), Team 1)) <= 50;
	}

	actions
	{
		Press Button(Event Player, Ability 1);
		Set Player Variable(Event Player, botAI_UseTime_Ability1, Total Time Elapsed);
	}
}

rule("AI Genji Swift Strike Reset")
{
	event
	{
		Player Earned Elimination;
		Team 2;
		Genji;
	}

	conditions
	{
		Player Variable(Event Player, botAI_Enabled) == True;
		Is Alive(Event Player) == True;
		Total Time Elapsed >= Add(Player Variable(Event Player, botAI_UseTime_Ability1), Player Variable(Event Player,
			botAI_Cooldown_Ability1));
	}

	actions
	{
		Set Player Variable(Event Player, botAI_UseTime_Ability1, 0);
	}
}

rule("AI Genji Swift Dragonblade")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Genji;
	}

	conditions
	{
		Player Variable(Event Player, botAI_Enabled) == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Ultimate Charge Percent(Event Player) == 100;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 12.500;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 15) == True;
		Player Variable(Event Player, botAI_CanUseAbilities) == True;
		Is Using Ability 2(Event Player) == False;
		Health(Players In Slot(Slot Of(Event Player), Team 1)) > 75;
	}

	actions
	{
		Press Button(Event Player, Ultimate);
		Set Player Variable(Event Player, botAI_Cooldown_Ability1, 0);
		Set Player Variable(Event Player, botAI_OptimalDistance, Random Real(1.500, 4.500));
		Skip If(Compare(Random Real(0, 1), >=, 0.900), 1);
		Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Add(Position Of(Players In Slot(Slot Of(Event Player),
			Team 1)), Vector(0, Random Real(5, 10), 0))), Random Real(400, 800), To World, Direction and Turn Rate);
		Wait(1, Ignore Condition);
		Press Button(Event Player, Ability 1);
		Call Subroutine(botAI_FacingReset);
		Wait(6, Ignore Condition);
		Set Player Variable(Event Player, botAI_OptimalDistance, Random Real(7, 14));
	}
}

rule("AI Genji Swift Dragonblade Swing")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Genji;
	}

	conditions
	{
		Player Variable(Event Player, botAI_Enabled) == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 6;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 15) == True;
		Player Variable(Event Player, botAI_CanAttack) == True;
		Is Using Ability 2(Event Player) == False;
		Is Using Ultimate(Event Player) == True;
	}

	actions
	{
		Skip If(Is Button Held(Event Player, Primary Fire), 1);
		Start Holding Button(Event Player, Primary Fire);
		Wait(0.900, Ignore Condition);
		Loop If Condition Is True;
		Stop Holding Button(Event Player, Primary Fire);
	}
}

rule("AI Genji Double Jump")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Genji;
	}

	conditions
	{
		Player Variable(Event Player, botAI_Enabled) == True;
		Is Alive(Event Player) == True;
		Is Button Held(Event Player, Jump) == True;
	}

	actions
	{
		Skip If(Compare(Random Real(0, 1), >=, 0.750), 2);
		Wait(Random Real(0.200, 0.350), Ignore Condition);
		Press Button(Event Player, Jump);
	}
}

rule("AI Roadhog General")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Roadhog;
	}

	conditions
	{
		Is Game In Progress == True;
		Is Alive(Event Player) == True;
		Player Variable(Event Player, botAI_Enabled) == True;
	}

	actions
	{
		Set Player Variable(Event Player, botAI_OptimalDistance, Random Real(9, 12));
		Set Player Variable(Event Player, botAI_Cooldown_Ability1, 8.300);
		Set Player Variable(Event Player, botAI_Cooldown_Ability2, 8.500);
	}
}

rule("AI Roadhog Attack Primary")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Roadhog;
	}

	conditions
	{
		Player Variable(Event Player, botAI_Enabled) == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 15;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 20) == True;
		Player Variable(Event Player, botAI_CanAttack) == True;
		Is Using Ability 1(Event Player) == False;
		Is Using Ability 2(Event Player) == False;
	}

	actions
	{
		Skip If(Is Button Held(Event Player, Primary Fire), 1);
		Start Holding Button(Event Player, Primary Fire);
		Wait(0.700, Ignore Condition);
		Loop If Condition Is True;
		Stop Holding Button(Event Player, Primary Fire);
	}
}

rule("AI Roadhog Attack Secondary")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Roadhog;
	}

	conditions
	{
		Player Variable(Event Player, botAI_Enabled) == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) > 15;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 38;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 20) == True;
		Player Variable(Event Player, botAI_CanAttack) == True;
		Is Using Ability 1(Event Player) == False;
		Is Using Ability 2(Event Player) == False;
	}

	actions
	{
		Skip If(Is Button Held(Event Player, Secondary Fire), 1);
		Start Holding Button(Event Player, Secondary Fire);
		Wait(0.700, Ignore Condition);
		Loop If Condition Is True;
		Stop Holding Button(Event Player, Secondary Fire);
	}
}

rule("AI Roadhog Chain Hook")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Roadhog;
	}

	conditions
	{
		Player Variable(Event Player, botAI_Enabled) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Opposite Team Of(Team Of(Event Player))), 10) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 20;
		Total Time Elapsed >= Add(Player Variable(Event Player, botAI_UseTime_Ability1), Player Variable(Event Player,
			botAI_Cooldown_Ability1));
		Player Variable(Event Player, botAI_CanUseAbilities) == True;
	}

	actions
	{
		Skip If(Compare(Random Real(0, 1), >, 0.750), 9);
		Press Button(Event Player, Ability 1);
		Wait(0.300, Ignore Condition);
		Set Player Variable(Event Player, botAI_UseTime_Ability1, Total Time Elapsed);
		Press Button(Event Player, Primary Fire);
		Wait(0.100, Ignore Condition);
		Press Button(Event Player, Melee);
	}
}

rule("AI Roadhog Take A Breather")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Roadhog;
	}

	conditions
	{
		Player Variable(Event Player, botAI_Enabled) == True;
		Health(Event Player) < 100;
		Total Time Elapsed >= Add(Player Variable(Event Player, botAI_UseTime_Ability2), Player Variable(Event Player,
			botAI_Cooldown_Ability2));
		Player Variable(Event Player, botAI_CanUseAbilities) == True;
	}

	actions
	{
		Press Button(Event Player, Ability 2);
		Set Player Variable(Event Player, botAI_UseTime_Ability2, Total Time Elapsed);
	}
}

rule("AI Roadhog Whole Hog")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Roadhog;
	}

	conditions
	{
		Player Variable(Event Player, botAI_Enabled) == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Ultimate Charge Percent(Event Player) == 100;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 15;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 20) == True;
		Player Variable(Event Player, botAI_CanUseAbilities) == True;
		Is Using Ability 1(Event Player) == False;
		Is Using Ability 2(Event Player) == False;
	}

	actions
	{
		Press Button(Event Player, Ultimate);
	}
}

rule("AI McCree General")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		McCree;
	}

	conditions
	{
		Is Game In Progress == True;
		Is Alive(Event Player) == True;
		Player Variable(Event Player, botAI_Enabled) == True;
	}

	actions
	{
		Set Player Variable(Event Player, botAI_OptimalDistance, Random Real(13, 16));
		Set Player Variable(Event Player, botAI_Cooldown_Ability1, 6.400);
		Set Player Variable(Event Player, botAI_Cooldown_Ability2, 10.650);
	}
}

rule("AI McCree Attack")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		McCree;
	}

	conditions
	{
		Player Variable(Event Player, botAI_Enabled) == True;
		Player Variable(Event Player, botAI_UsingAbility) == False;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 7.500) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 40;
		Is Using Ultimate(Event Player) == False;
	}

	actions
	{
		Press Button(Event Player, Primary Fire);
		Wait(Random Real(0.420, 0.520), Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("AI McCree Combat Roll")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		McCree;
	}

	conditions
	{
		Player Variable(Event Player, botAI_Enabled) == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Is In View Angle(Players In Slot(Slot Of(Event Player), Team 1), Event Player, 10) == True;
		Total Time Elapsed >= Add(Player Variable(Event Player, botAI_UseTime_Ability1), Player Variable(Event Player,
			botAI_UseTime_Ability1));
		Player Variable(Event Player, botAI_CanUseAbilities) == True;
	}

	actions
	{
		Skip If(Is Using Ultimate(Players In Slot(Slot Of(Event Player), Team 1)), 1);
		Skip If(Compare(Random Real(0, 1), >, 0.750), 2);
		Press Button(Event Player, Ability 1);
		Set Player Variable(Event Player, botAI_UseTime_Ability1, Total Time Elapsed);
	}
}

rule("AI McCree Flashbang")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		McCree;
	}

	conditions
	{
		Player Variable(Event Player, botAI_Enabled) == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 10) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 6;
		Total Time Elapsed >= Add(Player Variable(Event Player, botAI_UseTime_Ability2), Player Variable(Event Player,
			botAI_Cooldown_Ability2));
		Player Variable(Event Player, botAI_CanUseAbilities) == True;
	}

	actions
	{
		Skip If(Is Using Ultimate(Players In Slot(Slot Of(Event Player), Team 1)), 1);
		Skip If(Compare(Random Real(0, 1), >, 0.750), 2);
		Press Button(Event Player, Ability 2);
		Set Player Variable(Event Player, botAI_UseTime_Ability2, Total Time Elapsed);
	}
}

rule("AI McCree Deadeye Start")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		McCree;
	}

	conditions
	{
		Player Variable(Event Player, botAI_Enabled) == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Ultimate Charge Percent(Event Player) == 100;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 30) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 200;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) >= 10;
		Compare(Health(Players In Slot(Slot Of(Event Player), Team 1)), >=, 115) == True;
	}

	actions
	{
		Set Player Variable(Event Player, mccreeDeadeyeUse, True);
	}
}

rule("AI McCree Deadeye Charge")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		McCree;
	}

	conditions
	{
		Player Variable(Event Player, botAI_Enabled) == True;
		Player Variable(Event Player, mccreeDeadeyeUse) == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
	}

	actions
	{
		Set Player Variable(Event Player, mccreeDeadeyeCharge, 0);
		Set Player Variable(Event Player, mccreeDeadeyeRate, 100);
		Stop Holding Button(Event Player, Primary Fire);
		Press Button(Event Player, Ultimate);
		Wait(0.200, Ignore Condition);
		Chase Player Variable At Rate(Event Player, mccreeDeadeyeCharge, 2802.500, Player Variable(Event Player, mccreeDeadeyeRate),
			Destination and Rate);
		Wait(0.800, Abort When False);
		Set Player Variable(Event Player, mccreeDeadeyeRate, 275);
		Wait(0.500, Abort When False);
		Set Player Variable(Event Player, mccreeDeadeyeRate, 550);
		Wait(4.600, Abort When False);
		Press Button(Event Player, Primary Fire);
		Set Player Variable(Event Player, mccreeDeadeyeCharge, 0);
		Set Player Variable(Event Player, mccreeDeadeyeUse, False);
	}
}

rule("AI McCree Deadeye Fire")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		McCree;
	}

	conditions
	{
		Player Variable(Event Player, botAI_Enabled) == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Player Variable(Event Player, mccreeDeadeyeCharge) >= Health(Players In Slot(Slot Of(Event Player), Team 1));
		Is Using Ultimate(Event Player) == True;
	}

	actions
	{
		Wait(Random Real(0.100, 0.150), Ignore Condition);
		Stop Chasing Player Variable(Event Player, mccreeDeadeyeCharge);
		Press Button(Event Player, Primary Fire);
		Set Player Variable(Event Player, mccreeDeadeyeUse, False);
	}
}

rule("AI Junkrat General")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Junkrat;
	}

	conditions
	{
		Is Game In Progress == True;
		Is Alive(Event Player) == True;
		Player Variable(Event Player, botAI_Enabled) == True;
	}

	actions
	{
		Set Player Variable(Event Player, botAI_OptimalDistance, Random Real(9, 12));
		Set Player Variable(Event Player, botAI_Cooldown_Ability1, 8);
		Set Player Variable(Event Player, botAI_Cooldown_Ability2, 10);
		Set Player Variable(Event Player, botAI_Resource_2, 2);
		Call Subroutine(botAI_FacingEyePosition);
	}
}

rule("AI Junkrat Attack")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Junkrat;
	}

	conditions
	{
		Player Variable(Event Player, botAI_Enabled) == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 25;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 15) == True;
		Player Variable(Event Player, botAI_CanAttack) == True;
	}

	actions
	{
		Skip If(Is Button Held(Event Player, Primary Fire), 1);
		Start Holding Button(Event Player, Primary Fire);
		Wait(0.700, Ignore Condition);
		Loop If Condition Is True;
		Stop Holding Button(Event Player, Primary Fire);
	}
}

rule("AI Zarya General")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Zarya;
	}

	conditions
	{
		Is Game In Progress == True;
		Is Alive(Event Player) == True;
		Player Variable(Event Player, botAI_Enabled) == True;
	}

	actions
	{
		Set Player Variable(Event Player, botAI_OptimalDistance, Random Real(5, 10));
		Set Player Variable(Event Player, botAI_Cooldown_Ability1, 12);
	}
}

rule("AI Zarya Attack")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Zarya;
	}

	conditions
	{
		Player Variable(Event Player, botAI_Enabled) == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 15;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 15) == True;
		Player Variable(Event Player, botAI_CanAttack) == True;
	}

	actions
	{
		Skip If(Is Button Held(Event Player, Primary Fire), 1);
		Start Holding Button(Event Player, Primary Fire);
		Wait(1, Ignore Condition);
		Loop If Condition Is True;
		Stop Holding Button(Event Player, Primary Fire);
	}
}

rule("AI Zarya Use Bubble")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Zarya;
	}

	conditions
	{
		Player Variable(Event Player, botAI_Enabled) == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Is In View Angle(Players In Slot(Slot Of(Event Player), Team 1), Event Player, 10) == True;
		Is Firing Primary(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Total Time Elapsed >= Add(Player Variable(Event Player, botAI_UseTime_Ability3), Player Variable(Event Player,
			botAI_Cooldown_Ability3));
		Player Variable(Event Player, botAI_CanUseAbilities) == True;
	}

	actions
	{
		Skip If(Compare(Random Real(0, 1), >=, 0.500), 2);
		Press Button(Event Player, Ability 1);
		Set Player Variable(Event Player, botAI_UseTime_Ability1, Total Time Elapsed);
	}
}

rule("AI Zarya Graviton Surge")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Zarya;
	}

	conditions
	{
		Player Variable(Event Player, botAI_Enabled) == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Ultimate Charge Percent(Event Player) == 100;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 15;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 10) == True;
		Player Variable(Event Player, botAI_CanAttack) == True;
		Health(Players In Slot(Slot Of(Event Player), Team 1)) > 100;
	}

	actions
	{
		Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Position Of(Players In Slot(Slot Of(Event Player),
			Team 1))), 360, To World, Direction and Turn Rate);
		Wait(0.250, Ignore Condition);
		Press Button(Event Player, Ultimate);
		Wait(0.200, Ignore Condition);
		Call Subroutine(botAI_FacingReset);
	}
}

rule("AI Soldier: 76 General")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Soldier: 76;
	}

	conditions
	{
		Is Game In Progress == True;
		Is Alive(Event Player) == True;
		Player Variable(Event Player, botAI_Enabled) == True;
	}

	actions
	{
		Set Player Variable(Event Player, botAI_OptimalDistance, Random Real(15, 20));
		Set Player Variable(Event Player, botAI_Cooldown_Ability1, 0.300);
		Set Player Variable(Event Player, botAI_Cooldown_Ability2, 15);
		Set Player Variable(Event Player, botAI_Cooldown_Ability3, 8);
		Call Subroutine(botAI_FacingReset);
	}
}

rule("AI Soldier: 76 Attack")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Soldier: 76;
	}

	conditions
	{
		Player Variable(Event Player, botAI_Enabled) == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 40;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 10) == True;
		Player Variable(Event Player, botAI_CanAttack) == True;
		Is Using Ability 1(Event Player) == False;
		Is Firing Secondary(Event Player) == False;
	}

	actions
	{
		Skip If(Is Button Held(Event Player, Primary Fire), 1);
		Start Holding Button(Event Player, Primary Fire);
		Wait(0.750, Ignore Condition);
		Loop If Condition Is True;
		Stop Holding Button(Event Player, Primary Fire);
	}
}

rule("AI Soldier: 76 Helix Rockets")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Soldier: 76;
	}

	conditions
	{
		Player Variable(Event Player, botAI_Enabled) == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 15) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 12;
		Total Time Elapsed >= Add(Player Variable(Event Player, botAI_UseTime_Ability3), Player Variable(Event Player,
			botAI_Cooldown_Ability3));
		Player Variable(Event Player, botAI_CanUseAbilities) == True;
	}

	actions
	{
		Call Subroutine(botAI_FacingAbsolute);
		Wait(0.150, Ignore Condition);
		Press Button(Event Player, Secondary Fire);
		Set Player Variable(Event Player, botAI_UseTime_Ability3, Total Time Elapsed);
		Wait(0.150, Ignore Condition);
		Call Subroutine(botAI_FacingReset);
	}
}

rule("AI Soldier: 76 Sprint")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Soldier: 76;
	}

	conditions
	{
		Player Variable(Event Player, botAI_Enabled) == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) >= Player Variable(Event Player,
			botAI_OptimalDistance);
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 15) == True;
		Total Time Elapsed >= Add(Player Variable(Event Player, botAI_UseTime_Ability1), Player Variable(Event Player,
			botAI_Cooldown_Ability1));
		Player Variable(Event Player, botAI_CanUseAbilities) == True;
	}

	actions
	{
		Start Holding Button(Event Player, Ability 1);
		Wait(0.600, Ignore Condition);
		Loop If Condition Is True;
		Stop Holding Button(Event Player, Ability 1);
		Set Player Variable(Event Player, botAI_UseTime_Ability1, Total Time Elapsed);
	}
}

rule("AI Soldier: 76 Biotic Field")
{
	event
	{
		Player Took Damage;
		Team 2;
		Soldier: 76;
	}

	conditions
	{
		Player Variable(Event Player, botAI_Enabled) == True;
		Is Alive(Event Player) == True;
		Health(Event Player) <= 80;
		Total Time Elapsed >= Add(Player Variable(Event Player, botAI_UseTime_Ability2), Player Variable(Event Player,
			botAI_Cooldown_Ability2));
		Player Variable(Event Player, botAI_CanUseAbilities) == True;
	}

	actions
	{
		Press Button(Event Player, Ability 2);
		Set Player Variable(Event Player, botAI_UseTime_Ability2, Total Time Elapsed);
	}
}

rule("AI Soldier: 76 Tactical Visor")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Soldier: 76;
	}

	conditions
	{
		Player Variable(Event Player, botAI_Enabled) == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Ultimate Charge Percent(Event Player) == 100;
		Health(Event Player) >= 100;
		Player Variable(Event Player, botAI_CanUseAbilities) == True;
	}

	actions
	{
		Press Button(Event Player, Ultimate);
	}
}

rule("AI Lucio General")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Lúcio;
	}

	conditions
	{
		Is Game In Progress == True;
		Is Alive(Event Player) == True;
		Player Variable(Event Player, botAI_Enabled) == True;
	}

	actions
	{
		Set Player Variable(Event Player, botAI_OptimalDistance, Random Real(4, 6));
		Set Player Variable(Event Player, botAI_Cooldown_Ability1, 0.800);
		Set Player Variable(Event Player, botAI_Cooldown_Ability2, 15);
		Set Player Variable(Event Player, botAI_Cooldown_Ability3, 4);
		Call Subroutine(botAI_FacingReset);
	}
}

rule("AI Lucio Attack")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Lúcio;
	}

	conditions
	{
		Player Variable(Event Player, botAI_Enabled) == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 30;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 10) == True;
		Player Variable(Event Player, botAI_CanAttack) == True;
	}

	actions
	{
		Press Button(Event Player, Primary Fire);
		Wait(1, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("AI Lucio Crossfade Heal Self")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Lúcio;
	}

	conditions
	{
		Player Variable(Event Player, botAI_Enabled) == True;
		Is Alive(Event Player) == True;
		Total Time Elapsed >= Add(Player Variable(Event Player, botAI_UseTime_Ability1), Player Variable(Event Player,
			botAI_Cooldown_Ability1));
		Player Variable(Event Player, botAI_CanUseAbilities) == True;
		Health(Event Player) <= 100;
	}

	actions
	{
		Press Button(Event Player, Ability 1);
		Set Player Variable(Event Player, botAI_UseTime_Ability1, Total Time Elapsed);
	}
}

rule("AI Lucio Crossfade Speed Self")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Lúcio;
	}

	conditions
	{
		Player Variable(Event Player, botAI_Enabled) == True;
		Is Alive(Event Player) == True;
		Total Time Elapsed >= Add(Player Variable(Event Player, botAI_UseTime_Ability1), Player Variable(Event Player,
			botAI_Cooldown_Ability1));
		Player Variable(Event Player, botAI_CanUseAbilities) == True;
		Health(Event Player) > 100;
	}

	actions
	{
		Press Button(Event Player, Ability 1);
		Set Player Variable(Event Player, botAI_UseTime_Ability1, Total Time Elapsed);
	}
}

rule("AI Lucio Amp It Up")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Lúcio;
	}

	conditions
	{
		Player Variable(Event Player, botAI_Enabled) == True;
		Is Alive(Event Player) == True;
		Or(Compare(Health(Event Player), <=, 75), Compare(Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)),
			>, 15)) == True;
		Total Time Elapsed >= Add(Player Variable(Event Player, botAI_UseTime_Ability2), Player Variable(Event Player,
			botAI_Cooldown_Ability2));
		Player Variable(Event Player, botAI_CanUseAbilities) == True;
	}

	actions
	{
		Press Button(Event Player, Ability 2);
		Set Player Variable(Event Player, botAI_UseTime_Ability2, Total Time Elapsed);
	}
}

rule("AI Lucio Soundwave Boop")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Lúcio;
	}

	conditions
	{
		Player Variable(Event Player, botAI_Enabled) == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Health(Event Player) <= 75;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 20) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 8;
		Total Time Elapsed >= Add(Player Variable(Event Player, botAI_UseTime_Ability3), Player Variable(Event Player,
			botAI_Cooldown_Ability3));
		Player Variable(Event Player, botAI_CanUseAbilities) == True;
	}

	actions
	{
		Press Button(Event Player, Secondary Fire);
		Set Player Variable(Event Player, botAI_UseTime_Ability3, Total Time Elapsed);
	}
}

rule("AI Lucio Soundwave Final")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Lúcio;
	}

	conditions
	{
		Player Variable(Event Player, botAI_Enabled) == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Health(Players In Slot(Slot Of(Event Player), Team 1)) <= 25;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 20) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 8;
		Total Time Elapsed >= Add(Player Variable(Event Player, botAI_UseTime_Ability3), Player Variable(Event Player,
			botAI_Cooldown_Ability3));
		Player Variable(Event Player, botAI_CanUseAbilities) == True;
	}

	actions
	{
		Press Button(Event Player, Secondary Fire);
		Set Player Variable(Event Player, botAI_UseTime_Ability3, Total Time Elapsed);
	}
}

rule("AI Lucio Sound Barrier")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Lúcio;
	}

	conditions
	{
		Player Variable(Event Player, botAI_Enabled) == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Ultimate Charge Percent(Event Player) == 100;
		Is Using Ultimate(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Player Variable(Event Player, botAI_CanUseAbilities) == True;
	}

	actions
	{
		Press Button(Event Player, Ultimate);
	}
}

rule("AI D.Va General")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		D.Va;
	}

	conditions
	{
		Is Game In Progress == True;
		Is Alive(Event Player) == True;
		Player Variable(Event Player, botAI_Enabled) == True;
	}

	actions
	{
		Set Player Variable(Event Player, botAI_OptimalDistance, Random Real(4, 8));
		Set Player Variable(Event Player, botAI_Cooldown_Ability1, 5);
		Set Player Variable(Event Player, botAI_Cooldown_Ability2, 8);
		Set Player Variable(Event Player, botAI_Cooldown_Ability3, 1.500);
	}
}

rule("AI D.Va Attack")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		D.Va;
	}

	conditions
	{
		Player Variable(Event Player, botAI_Enabled) == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 15;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 15) == True;
		Player Variable(Event Player, botAI_CanAttack) == True;
	}

	actions
	{
		Skip If(Is Button Held(Event Player, Primary Fire), 1);
		Start Holding Button(Event Player, Primary Fire);
		Wait(0.750, Ignore Condition);
		Loop If Condition Is True;
		Stop Holding Button(Event Player, Primary Fire);
	}
}

rule("AI D.Va Boosters")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		D.Va;
	}

	conditions
	{
		Player Variable(Event Player, botAI_Enabled) == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) > 6;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 20) == True;
		Total Time Elapsed >= Add(Player Variable(Event Player, botAI_UseTime_Ability1), Player Variable(Event Player,
			botAI_Cooldown_Ability1));
		Player Variable(Event Player, botAI_CanUseAbilities) == True;
	}

	actions
	{
		Press Button(Event Player, Ability 1);
		Set Player Variable(Event Player, botAI_UseTime_Ability1, Total Time Elapsed);
	}
}

rule("AI D.Va Micro Missiles")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		D.Va;
	}

	conditions
	{
		Player Variable(Event Player, botAI_Enabled) == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 10;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 15) == True;
		Total Time Elapsed >= Add(Player Variable(Event Player, botAI_UseTime_Ability2), Player Variable(Event Player,
			botAI_Cooldown_Ability2));
		Player Variable(Event Player, botAI_CanUseAbilities) == True;
	}

	actions
	{
		Press Button(Event Player, Ability 2);
		Set Player Variable(Event Player, botAI_UseTime_Ability2, Total Time Elapsed);
	}
}

rule("AI D.Va Defense Matrix")
{
	event
	{
		Player Took Damage;
		Team 2;
		D.Va;
	}

	conditions
	{
		Player Variable(Event Player, botAI_Enabled) == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Array Contains(Global Variable(projectileHeroes), Hero Of(Attacker)) == True;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 30) == True;
		Total Time Elapsed >= Add(Player Variable(Event Player, botAI_UseTime_Ability3), Player Variable(Event Player,
			botAI_Cooldown_Ability3));
		Player Variable(Event Player, botAI_CanUseAbilities) == True;
	}

	actions
	{
		Skip If(Compare(Random Real(0, 1), >=, 0.750), 4);
		Start Holding Button(Event Player, Secondary Fire);
		Wait(Random Real(0.250, 0.750), Ignore Condition);
		Stop Holding Button(Event Player, Secondary Fire);
		Set Player Variable(Event Player, botAI_UseTime_Ability3, Total Time Elapsed);
	}
}

rule("AI D.Va Self-Destruct")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		D.Va;
	}

	conditions
	{
		Player Variable(Event Player, botAI_Enabled) == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Ultimate Charge Percent(Event Player) == 100;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 15;
		Player Variable(Event Player, botAI_CanUseAbilities) == True;
		Max Health(Event Player) > 150;
	}

	actions
	{
		Press Button(Event Player, Ability 1);
		Set Player Variable(Event Player, botAI_UseTime_Ability1, Total Time Elapsed);
		If(Compare(Total Time Elapsed, >=, Add(Player Variable(Event Player, botAI_UseTime_Ability1), Player Variable(Event Player,
			botAI_Cooldown_Ability1))));
			Press Button(Event Player, Ability 1);
			Start Facing(Event Player, World Vector Of(Vector(0, 10, 0), Players In Slot(Slot Of(Event Player), Team 1), Rotation), 360,
				To World, Direction and Turn Rate);
			Wait(Random Real(0.750, 1.250), Ignore Condition);
			Press Button(Event Player, Ultimate);
			Wait(0.250, Ignore Condition);
			Call Subroutine(botAI_FacingReset);
		Else;
			Press Button(Event Player, Ultimate);
		End;
	}
}

rule("AI Mei General")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Mei;
	}

	conditions
	{
		Is Game In Progress == True;
		Is Alive(Event Player) == True;
		Player Variable(Event Player, botAI_Enabled) == True;
	}

	actions
	{
		Set Player Variable(Event Player, botAI_OptimalDistance, Random Real(6, 10));
		Set Player Variable(Event Player, botAI_Cooldown_Ability1, 16);
		Set Player Variable(Event Player, botAI_Cooldown_Ability2, 15);
		Call Subroutine(botAI_FacingReset);
	}
}

rule("AI Mei Attack Secondary")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Mei;
	}

	conditions
	{
		Player Variable(Event Player, botAI_Enabled) == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 50;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) > 10;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 10) == True;
		Is Using Ability 1(Event Player) == False;
		Player Variable(Event Player, botAI_CanAttack) == True;
		Has Status(Players In Slot(Slot Of(Event Player), Team 1), Frozen) == False;
	}

	actions
	{
		Skip If(Is Button Held(Event Player, Secondary Fire), 1);
		Start Holding Button(Event Player, Secondary Fire);
		Wait(0.800, Ignore Condition);
		Loop If Condition Is True;
		Stop Holding Button(Event Player, Secondary Fire);
	}
}

rule("AI Mei Attack Primary Start")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Mei;
	}

	conditions
	{
		Player Variable(Event Player, botAI_Enabled) == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 10;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 15) == True;
		Is Using Ability 1(Event Player) == False;
		Has Status(Players In Slot(Slot Of(Event Player), Team 1), Frozen) == False;
		Player Variable(Event Player, botAI_CanAttack) == True;
	}

	actions
	{
		Skip If(Is Button Held(Event Player, Primary Fire), 1);
		Start Holding Button(Event Player, Primary Fire);
		Wait(0.500, Ignore Condition);
		Loop If Condition Is True;
		Stop Holding Button(Event Player, Primary Fire);
	}
}

rule("AI Mei Attack Primary Stop")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Mei;
	}

	conditions
	{
		Player Variable(Event Player, botAI_Enabled) == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 20;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 15) == True;
		Is Using Ability 1(Event Player) == False;
		Has Status(Players In Slot(Slot Of(Event Player), Team 1), Frozen) == True;
		Player Variable(Event Player, botAI_CanAttack) == True;
	}

	actions
	{
		Stop Holding Button(Event Player, Primary Fire);
		Call Subroutine(botAI_FacingEyePosition);
		Press Button(Event Player, Secondary Fire);
		Wait(1, Ignore Condition);
		Call Subroutine(botAI_FacingReset);
	}
}

rule("AI Mei Cryo-Freeze")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Mei;
	}

	conditions
	{
		Player Variable(Event Player, botAI_Enabled) == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Health(Event Player) <= 50;
		Total Time Elapsed >= Add(Player Variable(Event Player, botAI_UseTime_Ability1), Player Variable(Event Player,
			botAI_Cooldown_Ability1));
		Player Variable(Event Player, botAI_CanUseAbilities) == True;
	}

	actions
	{
		Press Button(Event Player, Ability 1);
		Wait(4, Ignore Condition);
		Set Player Variable(Event Player, botAI_UseTime_Ability1, Total Time Elapsed);
	}
}

rule("AI Mei Ice Wall")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Mei;
	}

	conditions
	{
		Player Variable(Event Player, botAI_Enabled) == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 15;
		Total Time Elapsed >= Add(Player Variable(Event Player, botAI_UseTime_Ability2), Player Variable(Event Player,
			botAI_Cooldown_Ability2));
		Player Variable(Event Player, botAI_CanUseAbilities) == True;
	}

	actions
	{
		Press Button(Event Player, Ability 2);
		Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Add(Position Of(Players In Slot(Slot Of(Event Player),
			Team 1)), Vector(0, 1, 0))), 360, To World, None);
		Wait(0.300, Ignore Condition);
		Press Button(Event Player, Primary Fire);
		Set Player Variable(Event Player, botAI_UseTime_Ability2, Total Time Elapsed);
		Call Subroutine(botAI_FacingReset);
	}
}

rule("AI Sombra General")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Sombra;
	}

	conditions
	{
		Is Game In Progress == True;
		Is Alive(Event Player) == True;
		Player Variable(Event Player, botAI_Enabled) == True;
	}

	actions
	{
		Set Player Variable(Event Player, botAI_OptimalDistance, Random Real(5, 8));
		Set Player Variable(Event Player, botAI_Cooldown_Ability1, 6);
		Set Player Variable(Event Player, botAI_Cooldown_Ability2, 6);
		Set Player Variable(Event Player, botAI_Cooldown_Ability3, 8);
		Call Subroutine(botAI_RealisticMode_Enable);
		Call Subroutine(botAI_FacingReset);
		Press Button(Event Player, Ability 1);
	}
}

rule("AI Sombra Attack")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Sombra;
	}

	conditions
	{
		Player Variable(Event Player, botAI_Enabled) == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 15;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 15) == True;
		Player Variable(Event Player, botAI_CanAttack) == True;
		Is Using Ability 1(Event Player) == False;
		Is Button Held(Event Player, Secondary Fire) == False;
	}

	actions
	{
		Skip If(Is Button Held(Event Player, Primary Fire), 1);
		Start Holding Button(Event Player, Primary Fire);
		Wait(0.750, Ignore Condition);
		Loop If Condition Is True;
		Stop Holding Button(Event Player, Primary Fire);
	}
}

rule("AI Sombra Decloak & Hack")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Sombra;
	}

	conditions
	{
		Player Variable(Event Player, botAI_Enabled) == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 10;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 15) == True;
		Is In View Angle(Players In Slot(Slot Of(Event Player), Team 1), Event Player, 45) == False;
		Player Variable(Event Player, botAI_CanAttack) == True;
		Is Using Ability 1(Event Player) == True;
	}

	actions
	{
		Press Button(Event Player, Secondary Fire);
		Wait(0.800, Ignore Condition);
		Start Holding Button(Event Player, Secondary Fire);
		Wait(0.700, Ignore Condition);
		Stop Holding Button(Event Player, Secondary Fire);
	}
}

rule("AI Sombra Translocator Place")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Sombra;
	}

	conditions
	{
		Player Variable(Event Player, botAI_Enabled) == True;
		Is Alive(Event Player) == True;
		Total Time Elapsed >= Add(Player Variable(Event Player, botAI_UseTime_Ability2), Player Variable(Event Player,
			botAI_Cooldown_Ability2));
		Player Variable(Event Player, botAI_CanUseAbilities) == True;
		Is Using Ability 1(Event Player) == False;
		Is Button Held(Event Player, Secondary Fire) == False;
	}

	actions
	{
		Start Facing(Event Player, Vector(X Component Of(Player Variable(Players In Slot(Slot Of(Event Player), Team 1), thisPlayerHome)),
			30, Add(Z Component Of(Player Variable(Players In Slot(Slot Of(Event Player), Team 1), thisPlayerHome)), Player Variable(
			Players In Slot(Slot Of(Event Player), Team 1), enemyDistanceMax))), 540, To World, None);
		Wait(0.250, Ignore Condition);
		Press Button(Event Player, Ability 2);
		Set Player Variable(Event Player, botAI_UseTime_Ability2, Total Time Elapsed);
		Wait(0.250, Ignore Condition);
		Call Subroutine(botAI_FacingReset);
	}
}

rule("AI Sombra Translocator Use")
{
	event
	{
		Player Took Damage;
		Team 2;
		Sombra;
	}

	conditions
	{
		Player Variable(Event Player, botAI_Enabled) == True;
		Is Alive(Event Player) == True;
		Total Time Elapsed >= Add(Player Variable(Event Player, botAI_UseTime_Ability2), Player Variable(Event Player,
			botAI_Cooldown_Ability2));
		Player Variable(Event Player, botAI_CanUseAbilities) == True;
		Health(Event Player) < 75;
		Is Button Held(Event Player, Secondary Fire) == False;
	}

	actions
	{
		Press Button(Event Player, Ability 1);
		Wait(0.016, Ignore Condition);
		Press Button(Event Player, Ability 2);
		Set Player Variable(Event Player, botAI_UseTime_Ability2, 0);
		Wait(0.250, Ignore Condition);
		Heal(Event Player, Null, 75);
	}
}

rule("AI Sombra EMP")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Sombra;
	}

	conditions
	{
		Player Variable(Event Player, botAI_Enabled) == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Ultimate Charge Percent(Event Player) == 100;
		Health(Players In Slot(Slot Of(Event Player), Team 1)) > 100;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 15;
		Player Variable(Event Player, botAI_CanUseAbilities) == True;
	}

	actions
	{
		Press Button(Event Player, Ultimate);
	}
}

rule("AI Sombra Stealth")
{
	event
	{
		Player Dealt Final Blow;
		Team 2;
		Sombra;
	}

	conditions
	{
		Player Variable(Event Player, botAI_Enabled) == True;
		Is Alive(Event Player) == True;
		Player Variable(Event Player, botAI_CanUseAbilities) == True;
		Total Time Elapsed >= Add(Player Variable(Event Player, botAI_UseTime_Ability1), Player Variable(Event Player,
			botAI_Cooldown_Ability1));
	}

	actions
	{
		Press Button(Event Player, Ability 1);
	}
}

rule("AI Sombra Stealth Cooldown Start")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Sombra;
	}

	conditions
	{
		Player Variable(Event Player, botAI_Enabled) == True;
		Is Alive(Event Player) == True;
		Player Variable(Event Player, botAI_CanUseAbilities) == True;
		Is Using Ability 1(Event Player) == False;
	}

	actions
	{
		Set Player Variable(Event Player, botAI_UseTime_Ability1, Total Time Elapsed);
	}
}

rule("AI Sombra Hack Cooldown Start")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Sombra;
	}

	conditions
	{
		Player Variable(Event Player, botAI_Enabled) == True;
		Is Alive(Event Player) == True;
		Player Variable(Event Player, botAI_CanUseAbilities) == True;
		Has Status(Players In Slot(Slot Of(Event Player), Team 1), Hacked) == True;
		Or(Compare(Ultimate Charge Percent(Event Player), !=, 0), Compare(Ultimate Charge Percent(Event Player), !=, 100)) == True;
	}

	actions
	{
		Set Player Variable(Event Player, botAI_UseTime_Ability3, Total Time Elapsed);
	}
}

rule("AI Doomfist General")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Doomfist;
	}

	conditions
	{
		Is Game In Progress == True;
		Is Alive(Event Player) == True;
		Player Variable(Event Player, botAI_Enabled) == True;
	}

	actions
	{
		Set Player Variable(Event Player, botAI_OptimalDistance, Random Real(3, 6));
		Set Player Variable(Event Player, botAI_Cooldown_Ability1, 6.600);
		Set Player Variable(Event Player, botAI_Cooldown_Ability2, 6);
		Set Player Variable(Event Player, botAI_Cooldown_Ability3, 6);
	}
}

rule("AI Doomfist Attack")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Doomfist;
	}

	conditions
	{
		Player Variable(Event Player, botAI_Enabled) == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 10;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 7.500) == True;
		Player Variable(Event Player, botAI_CanAttack) == True;
		Is Button Held(Event Player, Secondary Fire) == False;
	}

	actions
	{
		Skip If(Compare(Random Real(0, 1), >=, 0.500), 1);
		Press Button(Event Player, Primary Fire);
		Wait(0.400, Ignore Condition);
		Loop If Condition Is True;
		Stop Holding Button(Event Player, Primary Fire);
	}
}

rule("AI Doomfist Uppercut")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Doomfist;
	}

	conditions
	{
		Player Variable(Event Player, botAI_Enabled) == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 5;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 15) == True;
		Total Time Elapsed >= Add(Player Variable(Event Player, botAI_UseTime_Ability1), Player Variable(Event Player,
			botAI_Cooldown_Ability1));
		Player Variable(Event Player, botAI_CanUseAbilities) == True;
		Is Button Held(Event Player, Secondary Fire) == False;
	}

	actions
	{
		Press Button(Event Player, Primary Fire);
		Wait(0.100, Ignore Condition);
		Press Button(Event Player, Ability 1);
		Set Player Variable(Event Player, botAI_UseTime_Ability1, Total Time Elapsed);
		Wait(0.400, Ignore Condition);
		Press Button(Event Player, Primary Fire);
	}
}

rule("AI Doomfist Seismic Slam")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Doomfist;
	}

	conditions
	{
		Player Variable(Event Player, botAI_Enabled) == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Or(Compare(Distance Between(Event Player, Players In Slot(Slot Of(Event Player), All Teams)), >=, 2), Is In Air(Event Player))
			== True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 14;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 15) == True;
		Total Time Elapsed >= Add(Player Variable(Event Player, botAI_UseTime_Ability2), Player Variable(Event Player,
			botAI_Cooldown_Ability2));
		Player Variable(Event Player, botAI_CanUseAbilities) == True;
	}

	actions
	{
		Press Button(Event Player, Jump);
		Start Facing(Event Player, Direction From Angles(Horizontal Angle Towards(Event Player, Players In Slot(Slot Of(Event Player),
			Team 1)), Add(Vertical Angle Towards(Event Player, Players In Slot(Slot Of(Event Player), Team 1)), Random Real(20, 30))), 400,
			To Player, Direction and Turn Rate);
		Wait(0.250, Ignore Condition);
		Press Button(Event Player, Ability 2);
		Set Player Variable(Event Player, botAI_UseTime_Ability2, Total Time Elapsed);
		Call Subroutine(botAI_FacingReset);
	}
}

rule("AI Doomfist Rocket Punch")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Doomfist;
	}

	conditions
	{
		Player Variable(Event Player, botAI_Enabled) == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 15;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 15) == True;
		Total Time Elapsed >= Add(Player Variable(Event Player, botAI_UseTime_Ability3), Player Variable(Event Player,
			botAI_Cooldown_Ability3));
		Player Variable(Event Player, botAI_CanUseAbilities) == True;
	}

	actions
	{
		Start Holding Button(Event Player, Secondary Fire);
		Wait(Random Real(0.900, 1.800), Ignore Condition);
		Stop Holding Button(Event Player, Secondary Fire);
	}
}

rule("AI Doomfist Meteor Strike")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Doomfist;
	}

	conditions
	{
		Player Variable(Event Player, botAI_Enabled) == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Ultimate Charge Percent(Event Player) == 100;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 20;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 15) == True;
		Player Variable(Event Player, botAI_CanUseAbilities) == True;
		Health(Players In Slot(Slot Of(Event Player), Team 1)) > 100;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) > 1.500;
		Is Button Held(Event Player, Secondary Fire) == False;
	}

	actions
	{
		Press Button(Event Player, Ultimate);
		Set Player Variable(Event Player, botAI_MoveWASD_Enabled, False);
		Start Throttle In Direction(Event Player, Direction Towards(Event Player, Position Of(Players In Slot(Slot Of(Event Player),
			Team 1))), 1, To Player, Replace existing throttle, Direction and Magnitude);
		Wait(0.200, Ignore Condition);
		Loop If Condition Is True;
		Press Button(Event Player, Primary Fire);
		Set Player Variable(Event Player, botAI_MoveWASD_Enabled, True);
	}
}

rule("AI Ana General")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Ana;
	}

	conditions
	{
		Is Game In Progress == True;
		Is Alive(Event Player) == True;
		Player Variable(Event Player, botAI_Enabled) == True;
	}

	actions
	{
		Set Player Variable(Event Player, botAI_OptimalDistance, Random Real(15, 20));
		Set Player Variable(Event Player, botAI_Cooldown_Ability1, 12.300);
		Set Player Variable(Event Player, botAI_Cooldown_Ability2, 10);
		Set Player Variable(Event Player, botAI_Resource_2, 2);
		Call Subroutine(botAI_FacingReset);
	}
}

rule("AI Ana Attack Scope In")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Ana;
	}

	conditions
	{
		Player Variable(Event Player, botAI_Enabled) == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 50;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) > 10;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 15) == True;
		Player Variable(Event Player, botAI_CanAttack) == True;
	}

	actions
	{
		Skip If(Is Button Held(Event Player, Secondary Fire), 1);
		Start Holding Button(Event Player, Secondary Fire);
		Wait(0.800, Ignore Condition);
		Loop If Condition Is True;
		Stop Holding Button(Event Player, Secondary Fire);
	}
}

rule("AI Ana Attack")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Ana;
	}

	conditions
	{
		Player Variable(Event Player, botAI_Enabled) == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 50;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 7.500) == True;
		Player Variable(Event Player, botAI_CanAttack) == True;
	}

	actions
	{
		Press Button(Event Player, Primary Fire);
		Wait(0.800, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("AI Ana Sleep Dart")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Ana;
	}

	conditions
	{
		Player Variable(Event Player, botAI_Enabled) == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) < 12;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 5) == True;
		Total Time Elapsed >= Add(Player Variable(Event Player, botAI_UseTime_Ability1), Player Variable(Event Player,
			botAI_Cooldown_Ability1));
		Player Variable(Event Player, botAI_CanUseAbilities) == True;
	}

	actions
	{
		Press Button(Event Player, Ability 1);
		Set Player Variable(Event Player, botAI_UseTime_Ability1, Total Time Elapsed);
	}
}

rule("AI Ana Sleep Dart Face Enemy Asleep")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Ana;
	}

	conditions
	{
		Player Variable(Event Player, botAI_Enabled) == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Player Variable(Event Player, botAI_CanAttack) == True;
		Has Status(Players In Slot(Slot Of(Event Player), Team 1), Asleep) == True;
	}

	actions
	{
		Call Subroutine(botAI_FacingAbsolute);
		Wait(1, Ignore Condition);
		Loop If Condition Is True;
		Call Subroutine(botAI_FacingReset);
	}
}

rule("AI Ana Biotic Grenade")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Ana;
	}

	conditions
	{
		Player Variable(Event Player, botAI_Enabled) == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 30;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 10) == True;
		Total Time Elapsed >= Add(Player Variable(Event Player, botAI_UseTime_Ability2), Player Variable(Event Player,
			botAI_Cooldown_Ability2));
		Player Variable(Event Player, botAI_CanUseAbilities) == True;
		Health(Event Player) > 100;
	}

	actions
	{
		Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Add(Position Of(Players In Slot(Slot Of(Event Player),
			Team 1)), Vector(0, Multiply(Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)), 0.110), 0))),
			Random Integer(270, 360), To World, Direction and Turn Rate);
		Wait(Random Real(0.300, 0.400), Ignore Condition);
		Press Button(Event Player, Ability 2);
		Set Player Variable(Event Player, botAI_UseTime_Ability2, Total Time Elapsed);
		Wait(0.250, Ignore Condition);
		Call Subroutine(botAI_FacingReset);
	}
}

rule("AI Ana Biotic Grenade Self")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Ana;
	}

	conditions
	{
		Player Variable(Event Player, botAI_Enabled) == True;
		Is Alive(Event Player) == True;
		Health(Event Player) <= 100;
		Total Time Elapsed >= Add(Player Variable(Event Player, botAI_UseTime_Ability2), Player Variable(Event Player,
			botAI_Cooldown_Ability2));
		Player Variable(Event Player, botAI_CanUseAbilities) == True;
	}

	actions
	{
		Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Position Of(Event Player)), Random Integer(360, 540),
			To World, Direction and Turn Rate);
		Wait(Random Real(0.150, 0.200), Ignore Condition);
		Press Button(Event Player, Ability 2);
		Set Player Variable(Event Player, botAI_UseTime_Ability2, Total Time Elapsed);
		Wait(0.150, Ignore Condition);
		Call Subroutine(botAI_FacingReset);
	}
}

rule("AI Orisa General")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Orisa;
	}

	conditions
	{
		Is Game In Progress == True;
		Is Alive(Event Player) == True;
		Player Variable(Event Player, botAI_Enabled) == True;
	}

	actions
	{
		Set Player Variable(Event Player, botAI_OptimalDistance, Random Real(12, 16));
		Set Player Variable(Event Player, botAI_Cooldown_Ability1, 14);
		Set Player Variable(Event Player, botAI_Cooldown_Ability2, 10);
		Set Player Variable(Event Player, botAI_Cooldown_Ability3, 8);
		Set Player Variable(Event Player, botAI_Anchor_Enabled, False);
	}
}

rule("AI Orisa Attack")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Orisa;
	}

	conditions
	{
		Player Variable(Event Player, botAI_Enabled) == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 30;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 15) == True;
		Player Variable(Event Player, botAI_CanAttack) == True;
	}

	actions
	{
		Skip If(Is Button Held(Event Player, Primary Fire), 1);
		Start Holding Button(Event Player, Primary Fire);
		Wait(1, Ignore Condition);
		Loop If Condition Is True;
		Stop Holding Button(Event Player, Primary Fire);
	}
}

rule("AI Orisa Protective Barrier")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Orisa;
	}

	conditions
	{
		Player Variable(Event Player, botAI_Enabled) == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= Player Variable(Event Player,
			botAI_OptimalDistance);
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 15) == True;
		Total Time Elapsed >= Add(Player Variable(Event Player, botAI_UseTime_Ability2), Player Variable(Event Player,
			botAI_Cooldown_Ability2));
		Player Variable(Event Player, botAI_CanUseAbilities) == True;
	}

	actions
	{
		Start Facing(Event Player, Direction From Angles(Horizontal Facing Angle Of(Event Player), 30), Random Real(400, 700), To World,
			None);
		Wait(0.200, Ignore Condition);
		Press Button(Event Player, Ability 2);
		Set Player Variable(Event Player, botAI_UseTime_Ability2, Total Time Elapsed);
		Set Player Variable(Event Player, botAI_Anchor_Position, Position Of(Event Player));
		Set Player Variable(Event Player, botAI_Anchor_DriftMax, 1.500);
		Set Player Variable(Event Player, botAI_Anchor_Enabled, True);
		Wait(0.200, Ignore Condition);
		Call Subroutine(botAI_FacingReset);
	}
}

rule("AI Brigitte General")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Brigitte;
	}

	conditions
	{
		Is Game In Progress == True;
		Is Alive(Event Player) == True;
		Player Variable(Event Player, botAI_Enabled) == True;
	}

	actions
	{
		Set Player Variable(Event Player, botAI_OptimalDistance, Random Real(4, 6));
		Set Player Variable(Event Player, botAI_Cooldown_Ability1, 4);
		Set Player Variable(Event Player, botAI_Cooldown_Ability3, 7);
	}
}

rule("AI Brigitte Attack")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Brigitte;
	}

	conditions
	{
		Player Variable(Event Player, botAI_Enabled) == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 6;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 45) == True;
	}

	actions
	{
		Skip If(Is Button Held(Event Player, Primary Fire), 1);
		Start Holding Button(Event Player, Primary Fire);
		Wait(0.800, Ignore Condition);
		Loop If Condition Is True;
		Stop Holding Button(Event Player, Primary Fire);
	}
}

rule("AI Brigitte Use Shield")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Brigitte;
	}

	conditions
	{
		Player Variable(Event Player, botAI_Enabled) == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Is In View Angle(Players In Slot(Slot Of(Event Player), Team 1), Event Player, 10) == True;
	}

	actions
	{
		Skip If(Compare(Random Real(0, 1), >, 0.500), 4);
		Skip If(Is Button Held(Event Player, Secondary Fire), 1);
		Start Holding Button(Event Player, Secondary Fire);
		Wait(Random Real(0.500, 2), Ignore Condition);
		Stop Holding Button(Event Player, Secondary Fire);
		Wait(0.500, Ignore Condition);
		Loop If Condition Is True;
		Stop Holding Button(Event Player, Secondary Fire);
	}
}

rule("AI Brigitte Shield Bash")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Brigitte;
	}

	conditions
	{
		Player Variable(Event Player, botAI_Enabled) == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 40) == True;
		Y Component Of(Position Of(Players In Slot(Slot Of(Event Player), Team 1))) < 3;
		Y Component Of(Position Of(Event Player)) < 3;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 6.800;
		Total Time Elapsed >= Add(Player Variable(Event Player, botAI_UseTime_Ability3), Player Variable(Event Player,
			botAI_Cooldown_Ability3));
	}

	actions
	{
		Skip If(Compare(Random Real(0, 1), >, 0.750), 9);
		Set Player Variable(Event Player, botAI_UsingAbility, True);
		Wait(0.200, Ignore Condition);
		Stop Holding Button(Event Player, Primary Fire);
		Start Holding Button(Event Player, Secondary Fire);
		Wait(0.150, Ignore Condition);
		Press Button(Event Player, Primary Fire);
		Set Player Variable(Event Player, botAI_UseTime_Ability3, Total Time Elapsed);
		Wait(0.100, Ignore Condition);
		Stop Holding Button(Event Player, Secondary Fire);
		Set Player Variable(Event Player, botAI_UsingAbility, False);
	}
}

rule("AI Brigitte Shield Bash Gap Closer")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Brigitte;
	}

	conditions
	{
		Player Variable(Event Player, botAI_Enabled) == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) >= 12.500;
		Health(Event Player) >= 125;
		Total Time Elapsed >= Add(Player Variable(Event Player, botAI_UseTime_Ability3), Player Variable(Event Player,
			botAI_Cooldown_Ability3));
	}

	actions
	{
		Set Player Variable(Event Player, botAI_MoveJump_Enabled, False);
		Set Player Variable(Event Player, botAI_MoveCrouch_Enabled, False);
		Set Player Variable(Event Player, botAI_MoveWASD_Enabled, False);
		Start Throttle In Direction(Event Player, Forward, 1, To Player, Replace existing throttle, Direction and Magnitude);
		Start Holding Button(Event Player, Secondary Fire);
		Wait(0.250, Ignore Condition);
		Press Button(Event Player, Primary Fire);
		Set Player Variable(Event Player, botAI_UseTime_Ability3, Total Time Elapsed);
		Wait(0.150, Ignore Condition);
		Start Holding Button(Event Player, Jump);
		Wait(0.500, Ignore Condition);
		Stop Holding Button(Event Player, Secondary Fire);
		Stop Holding Button(Event Player, Jump);
		Stop Throttle In Direction(Event Player);
		Set Player Variable(Event Player, botAI_MoveWASD_Enabled, True);
		Set Player Variable(Event Player, botAI_MoveJump_Enabled, True);
		Set Player Variable(Event Player, botAI_MoveCrouch_Enabled, True);
	}
}

rule("AI Brigitte Whip Shot Final")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Brigitte;
	}

	conditions
	{
		Player Variable(Event Player, botAI_Enabled) == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 10) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 18;
		Health(Players In Slot(Slot Of(Event Player), Team 1)) <= 70;
		Total Time Elapsed >= Add(Player Variable(Event Player, botAI_UseTime_Ability1), Player Variable(Event Player,
			botAI_Cooldown_Ability1));
	}

	actions
	{
		Press Button(Event Player, Ability 1);
		Set Player Variable(Event Player, botAI_UseTime_Ability1, Total Time Elapsed);
	}
}

rule("AI Brigitte Whip Shot Boop")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Brigitte;
	}

	conditions
	{
		Player Variable(Event Player, botAI_Enabled) == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 10) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 4;
		Health(Players In Slot(Slot Of(Event Player), Team 1)) > 100;
		Health(Event Player) <= 100;
		Total Time Elapsed >= Add(Player Variable(Event Player, botAI_UseTime_Ability1), Player Variable(Event Player,
			botAI_Cooldown_Ability1));
	}

	actions
	{
		Press Button(Event Player, Ability 1);
		Set Player Variable(Event Player, botAI_UseTime_Ability1, Total Time Elapsed);
	}
}

rule("AI Brigitte Rally")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Brigitte;
	}

	conditions
	{
		Player Variable(Event Player, botAI_Enabled) == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 45) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 15;
		Health(Event Player) >= 75;
		Ultimate Charge Percent(Event Player) == 100;
	}

	actions
	{
		Press Button(Event Player, Ultimate);
	}
}

rule("AI Moira General")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Moira;
	}

	conditions
	{
		Is Game In Progress == True;
		Is Alive(Event Player) == True;
		Player Variable(Event Player, botAI_Enabled) == True;
	}

	actions
	{
		Set Player Variable(Event Player, botAI_OptimalDistance, Random Real(10, 15));
		Set Player Variable(Event Player, botAI_Cooldown_Ability1, 6);
		Set Player Variable(Event Player, botAI_Cooldown_Ability2, 10);
	}
}

rule("AI Moira Biotic Grasp")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Moira;
	}

	conditions
	{
		Player Variable(Event Player, botAI_Enabled) == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 15) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 20;
		Is Using Ability 2(Event Player) == False;
	}

	actions
	{
		Skip If(Is Button Held(Event Player, Secondary Fire), 1);
		Start Holding Button(Event Player, Secondary Fire);
		Wait(0.700, Ignore Condition);
		Loop If Condition Is True;
		Stop Holding Button(Event Player, Secondary Fire);
	}
}

rule("AI Moira Fade")
{
	event
	{
		Player Took Damage;
		Team 2;
		Moira;
	}

	conditions
	{
		Player Variable(Event Player, botAI_Enabled) == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Health(Event Player) < 100;
		Total Time Elapsed >= Add(Player Variable(Event Player, botAI_UseTime_Ability1), Player Variable(Event Player,
			botAI_Cooldown_Ability1));
	}

	actions
	{
		Press Button(Event Player, Jump);
		Wait(0.300, Ignore Condition);
		Press Button(Event Player, Ability 1);
		Set Player Variable(Event Player, botAI_UseTime_Ability1, Total Time Elapsed);
		Wait(0.500, Ignore Condition);
		Press Button(Event Player, Jump);
	}
}

rule("AI Moira Biotic Orb Damage")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Moira;
	}

	conditions
	{
		Player Variable(Event Player, botAI_Enabled) == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 15) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 15;
		Ultimate Charge Percent(Event Player) < 80;
		Health(Event Player) >= 100;
		Health(Players In Slot(Slot Of(Event Player), Team 1)) > 75;
		Is Using Ability 1(Event Player) == False;
		Total Time Elapsed >= Add(Player Variable(Event Player, botAI_UseTime_Ability2), Player Variable(Event Player,
			botAI_Cooldown_Ability2));
	}

	actions
	{
		Stop Holding Button(Event Player, Secondary Fire);
		Wait(0.100, Ignore Condition);
		Press Button(Event Player, Ability 2);
		Wait(0.200, Ignore Condition);
		Press Button(Event Player, Secondary Fire);
		Set Player Variable(Event Player, botAI_UseTime_Ability2, Total Time Elapsed);
	}
}

rule("AI Moira Biotic Orb Healing")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Moira;
	}

	conditions
	{
		Player Variable(Event Player, botAI_Enabled) == True;
		Is Alive(Event Player) == True;
		Health(Event Player) < 100;
		Total Time Elapsed >= Add(Player Variable(Event Player, botAI_UseTime_Ability2), Player Variable(Event Player,
			botAI_Cooldown_Ability2));
	}

	actions
	{
		Stop Holding Button(Event Player, Secondary Fire);
		Wait(0.100, Ignore Condition);
		Press Button(Event Player, Ability 2);
		Wait(0.200, Ignore Condition);
		Press Button(Event Player, Primary Fire);
		Set Player Variable(Event Player, botAI_UseTime_Ability2, Total Time Elapsed);
		Set Player Variable(Event Player, botAI_MoveWASD_Enabled, False);
		Start Throttle In Direction(Event Player, Forward, 1, To Player, Replace existing throttle, Direction and Magnitude);
		Wait(Random Real(1.200, 1.600), Ignore Condition);
		Set Player Variable(Event Player, botAI_MoveWASD_Enabled, True);
	}
}

rule("AI Moira Coalescence")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Moira;
	}

	conditions
	{
		Player Variable(Event Player, botAI_Enabled) == True;
		Ultimate Charge Percent(Event Player) == 100;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 30) == True;
	}

	actions
	{
		Stop Holding Button(Event Player, Secondary Fire);
		Press Button(Event Player, Ability 2);
		Wait(0.200, Ignore Condition);
		Press Button(Event Player, Secondary Fire);
		Wait(0.100, Ignore Condition);
		Press Button(Event Player, Ultimate);
	}
}

rule("AI Wrecking Ball General")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Wrecking Ball;
	}

	conditions
	{
		Is Game In Progress == True;
		Is Alive(Event Player) == True;
		Player Variable(Event Player, botAI_Enabled) == True;
	}

	actions
	{
		Set Player Variable(Event Player, botAI_OptimalDistance, Random Real(5, 10));
		Set Player Variable(Event Player, botAI_Cooldown_Ability1, 0);
		Set Player Variable(Event Player, botAI_Cooldown_Ability2, 15.200);
		Set Player Variable(Event Player, botAI_Cooldown_Ability3, 10);
		Call Subroutine(botAI_FacingReset);
		Set Player Variable(Event Player, botAI_MoveJump_Enabled, False);
	}
}

rule("AI Wrecking Ball Attack")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Wrecking Ball;
	}

	conditions
	{
		Player Variable(Event Player, botAI_Enabled) == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= Add(Player Variable(Event Player,
			botAI_OptimalDistance), 4);
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 10) == True;
		Player Variable(Event Player, botAI_CanAttack) == True;
	}

	actions
	{
		Skip If(Is Button Held(Event Player, Primary Fire), 1);
		Start Holding Button(Event Player, Primary Fire);
		Wait(0.500, Ignore Condition);
		Loop If Condition Is True;
		Stop Holding Button(Event Player, Primary Fire);
	}
}

rule("AI Wrecking Ball Roll")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Wrecking Ball;
	}

	conditions
	{
		Player Variable(Event Player, botAI_Enabled) == True;
		Is Alive(Event Player) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) >= 15;
		Total Time Elapsed >= Add(Player Variable(Event Player, botAI_UseTime_Ability1), Player Variable(Event Player,
			botAI_Cooldown_Ability1));
		Player Variable(Event Player, botAI_CanUseAbilities) == True;
	}

	actions
	{
		Press Button(Event Player, Ability 1);
		Set Player Variable(Event Player, botAI_UseTime_Ability1, Total Time Elapsed);
	}
}

rule("AI Wrecking Ball Adaptive Shield")
{
	event
	{
		Player Took Damage;
		Team 2;
		Wrecking Ball;
	}

	conditions
	{
		Player Variable(Event Player, botAI_Enabled) == True;
		Is Alive(Event Player) == True;
		Health(Event Player) <= 250;
		Total Time Elapsed >= Add(Player Variable(Event Player, botAI_UseTime_Ability2), Player Variable(Event Player,
			botAI_Cooldown_Ability2));
		Player Variable(Event Player, botAI_CanUseAbilities) == True;
	}

	actions
	{
		Press Button(Event Player, Ability 2);
		Set Player Variable(Event Player, botAI_UseTime_Ability2, Total Time Elapsed);
	}
}

rule("AI Wrecking Ball Piledriver")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Wrecking Ball;
	}

	conditions
	{
		Player Variable(Event Player, botAI_Enabled) == True;
		Is Alive(Event Player) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 8;
		Total Time Elapsed >= Add(Player Variable(Event Player, botAI_UseTime_Ability3), Player Variable(Event Player,
			botAI_Cooldown_Ability3));
		Player Variable(Event Player, botAI_CanUseAbilities) == True;
	}

	actions
	{
		Set Player Variable(Event Player, botAI_MoveCrouch_Enabled, False);
		Press Button(Event Player, Jump);
		Wait(0.200, Ignore Condition);
		Press Button(Event Player, Crouch);
		Set Player Variable(Event Player, botAI_UseTime_Ability3, Total Time Elapsed);
		Set Player Variable(Event Player, botAI_MoveCrouch_Enabled, True);
	}
}

rule("AI Wrecking Ball Minefield")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Wrecking Ball;
	}

	conditions
	{
		Player Variable(Event Player, botAI_Enabled) == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Ultimate Charge Percent(Event Player) == 100;
		Health(Players In Slot(Slot Of(Event Player), Team 1)) >= 100;
		Player Variable(Event Player, botAI_CanUseAbilities) == True;
	}

	actions
	{
		Press Button(Event Player, Ultimate);
	}
}

rule("AI Ashe General")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Ashe;
	}

	conditions
	{
		Is Game In Progress == True;
		Is Alive(Event Player) == True;
	}

	actions
	{
		Set Player Variable(Event Player, botAI_OptimalDistance, Random Real(15, 30));
	}
}

rule("AI Ashe Attack Scoped")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Ashe);
		Is Dummy Bot(Event Player) == True;
		Player Variable(Event Player, botAI_Enabled) == True;
		Player Variable(Event Player, botAI_UsingAbility) == False;
		Is Alive(Players In Slot(Slot Of(Event Player), Opposite Team Of(Team Of(Event Player)))) == True;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Opposite Team Of(Team Of(Event Player))), 7.500) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Opposite Team Of(Team Of(Event Player)))) <= 50;
		Is Alive(Event Player) == True;
	}

	actions
	{
		Skip If(Is Button Held(Event Player, Secondary Fire), 1);
		Start Holding Button(Event Player, Secondary Fire);
		Wait(Random Real(0.800, 1.250), Ignore Condition);
		Press Button(Event Player, Primary Fire);
		Modify Player Variable(Event Player, botAI_HeroAshe_ShotsFired, Add, 1);
		Loop If Condition Is True;
		Stop Holding Button(Event Player, Secondary Fire);
	}
}

rule("AI Ashe Attack Unscoped")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Player Variable(Event Player, botAI_Enabled) == True;
		Hero Of(Event Player) == Hero(Ashe);
		Is Alive(Players In Slot(Slot Of(Event Player), Opposite Team Of(Team Of(Event Player)))) == True;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Opposite Team Of(Team Of(Event Player))), 10) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Opposite Team Of(Team Of(Event Player)))) <= 12.500;
		Player Variable(Event Player, botAI_UsingAbility) == False;
		Health(Players In Slot(Slot Of(Event Player), Opposite Team Of(Team Of(Event Player)))) < 60;
	}

	actions
	{
		Skip If(Compare(Is Button Held(Event Player, Secondary Fire), ==, False), 1);
		Skip If(Compare(Random Real(0, 1), >, 0.250), 4);
		Stop Holding Button(Event Player, Secondary Fire);
		Press Button(Event Player, Primary Fire);
		Wait(Random Real(0.250, 0.500), Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("AI Ashe Reload")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Ashe);
		Is Dummy Bot(Event Player) == True;
		Player Variable(Event Player, botAI_Enabled) == True;
		Is Alive(Event Player) == True;
		Player Variable(Event Player, botAI_HeroAshe_ShotsFired) >= 8;
	}

	actions
	{
		Set Player Variable(Event Player, botAI_UsingAbility, True);
		Press Button(Event Player, Reload);
		Wait(Add(0.650, Multiply(Player Variable(Event Player, botAI_HeroAshe_ShotsFired), 0.250)), Ignore Condition);
		Set Player Variable(Event Player, botAI_HeroAshe_ShotsFired, 0);
		Set Player Variable(Event Player, botAI_UsingAbility, False);
	}
}

rule("AI Ashe Reload After Kill")
{
	event
	{
		Player Dealt Final Blow;
		All;
		All;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Ashe);
		Is Dummy Bot(Event Player) == True;
		Player Variable(Event Player, botAI_Enabled) == True;
		Is Alive(Event Player) == True;
	}

	actions
	{
		Set Player Variable(Event Player, botAI_UsingAbility, True);
		Press Button(Event Player, Reload);
		Wait(Add(0.650, Multiply(Player Variable(Event Player, botAI_HeroAshe_ShotsFired), 0.250)), Ignore Condition);
		Set Player Variable(Event Player, botAI_HeroAshe_ShotsFired, 0);
		Set Player Variable(Event Player, botAI_UsingAbility, False);
	}
}

rule("AI Baptiste General")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Baptiste;
	}

	conditions
	{
		Is Game In Progress == True;
		Is Alive(Event Player) == True;
		Player Variable(Event Player, botAI_Enabled) == True;
	}

	actions
	{
		Set Player Variable(Event Player, botAI_OptimalDistance, Random Real(14, 18));
		Set Player Variable(Event Player, botAI_Cooldown_Ability1, 15.300);
		Set Player Variable(Event Player, botAI_Cooldown_Ability2, 25);
		Call Subroutine(botAI_FacingReset);
	}
}

rule("AI Baptiste Attack")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Baptiste;
	}

	conditions
	{
		Player Variable(Event Player, botAI_Enabled) == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 40;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 10) == True;
		Player Variable(Event Player, botAI_CanAttack) == True;
	}

	actions
	{
		Press Button(Event Player, Primary Fire);
		Wait(0.750, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("AI Baptiste Regenerative Burst")
{
	event
	{
		Player Took Damage;
		Team 2;
		Baptiste;
	}

	conditions
	{
		Player Variable(Event Player, botAI_Enabled) == True;
		Is Alive(Event Player) == True;
		Total Time Elapsed >= Add(Player Variable(Event Player, botAI_UseTime_Ability1), Player Variable(Event Player,
			botAI_Cooldown_Ability1));
		Player Variable(Event Player, botAI_CanUseAbilities) == True;
		Health(Event Player) <= 80;
	}

	actions
	{
		Press Button(Event Player, Ability 1);
		Set Player Variable(Event Player, botAI_UseTime_Ability1, Total Time Elapsed);
	}
}

rule("AI Baptiste Immortality Field")
{
	event
	{
		Player Took Damage;
		Team 2;
		Baptiste;
	}

	conditions
	{
		Player Variable(Event Player, botAI_Enabled) == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Total Time Elapsed >= Add(Player Variable(Event Player, botAI_UseTime_Ability2), Player Variable(Event Player,
			botAI_Cooldown_Ability2));
		Player Variable(Event Player, botAI_CanUseAbilities) == True;
		Health(Event Player) <= 50;
	}

	actions
	{
		Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Position Of(Event Player)), Random Integer(180, 270),
			To World, Direction and Turn Rate);
		Wait(0.250, Ignore Condition);
		Press Button(Event Player, Ability 2);
		Set Player Variable(Event Player, botAI_UseTime_Ability2, Total Time Elapsed);
		Call Subroutine(botAI_FacingReset);
	}
}

rule("AI Sigma General")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Sigma;
	}

	conditions
	{
		Is Game In Progress == True;
		Is Alive(Event Player) == True;
		Player Variable(Event Player, botAI_Enabled) == True;
	}

	actions
	{
		Set Player Variable(Event Player, botAI_OptimalDistance, Random Real(12, 15));
		Set Player Variable(Event Player, botAI_Cooldown_Ability1, 12);
		Set Player Variable(Event Player, botAI_Cooldown_Ability2, 10.800);
		Call Subroutine(botAI_FacingAbsolute);
	}
}

rule("AI Sigma Attack")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Sigma;
	}

	conditions
	{
		Player Variable(Event Player, botAI_Enabled) == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 22;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 15) == True;
		Is Using Ultimate(Event Player) == False;
		Is Using Ability 1(Event Player) == False;
		Is Using Ability 2(Event Player) == False;
		Player Variable(Event Player, botAI_CanAttack) == True;
	}

	actions
	{
		Press Button(Event Player, Primary Fire);
		Wait(1.500, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("AI Sigma Kinetic Grasp")
{
	event
	{
		Player Took Damage;
		Team 2;
		Sigma;
	}

	conditions
	{
		Player Variable(Event Player, botAI_Enabled) == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Total Time Elapsed >= Add(Player Variable(Event Player, botAI_UseTime_Ability1), Player Variable(Event Player,
			botAI_Cooldown_Ability1));
		Player Variable(Event Player, botAI_CanUseAbilities) == True;
		Is Firing Primary(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 15) == True;
		Is In View Angle(Players In Slot(Slot Of(Event Player), Team 1), Event Player, 15) == True;
		Array Contains(Global Variable(projectileHeroes), Hero Of(Players In Slot(Slot Of(Event Player), Team 1))) == True;
	}

	actions
	{
		Wait(Random Real(0.200, 0.400), Ignore Condition);
		Skip If(Compare(Random Real(0, 1), >=, 0.333), 2);
		Press Button(Event Player, Ability 1);
		Set Player Variable(Event Player, botAI_UseTime_Ability1, Total Time Elapsed);
	}
}

rule("AI Sigma Accretion")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Sigma;
	}

	conditions
	{
		Player Variable(Event Player, botAI_Enabled) == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 20;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 15) == True;
		Is Moving(Players In Slot(Slot Of(Event Player), Team 1)) == False;
		Total Time Elapsed >= Add(Player Variable(Event Player, botAI_UseTime_Ability2), Player Variable(Event Player,
			botAI_Cooldown_Ability2));
		Player Variable(Event Player, botAI_CanUseAbilities) == True;
	}

	actions
	{
		Skip If(Compare(Random Real(0, 1), >=, 0.333), 4);
		Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Add(Position Of(Players In Slot(Slot Of(Event Player),
			Team 1)), Vector(0, Multiply(Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)), 0.100), 0))),
			Random Integer(270, 360), To World, Direction and Turn Rate);
		Wait(0.250, Ignore Condition);
		Press Button(Event Player, Ability 2);
		Set Player Variable(Event Player, botAI_UseTime_Ability2, Total Time Elapsed);
		Wait(0.800, Ignore Condition);
		Call Subroutine(botAI_FacingAbsolute);
	}
}

rule("AI Sigma Experimental Barrier")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Sigma;
	}

	conditions
	{
		Player Variable(Event Player, botAI_Enabled) == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 15) == True;
		Player Variable(Event Player, botAI_CanUseAbilities) == True;
	}

	actions
	{
		Skip If(Is Button Held(Event Player, Secondary Fire), 1);
		Start Holding Button(Event Player, Secondary Fire);
		Wait(Random Real(0.200, 0.300), Ignore Condition);
		Stop Holding Button(Event Player, Secondary Fire);
		Wait(4.800, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("AI Sigma Gravitic Flux")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Sigma;
	}

	conditions
	{
		Player Variable(Event Player, botAI_Enabled) == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Ultimate Charge Percent(Event Player) == 100;
		Health(Players In Slot(Slot Of(Event Player), Team 1)) >= 125;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 20;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 15) == True;
		Player Variable(Event Player, botAI_CanUseAbilities) == True;
	}

	actions
	{
		Press Button(Event Player, Ultimate);
		Start Holding Button(Event Player, Jump);
		Wait(Random Real(1.750, 3), Ignore Condition);
		Press Button(Event Player, Primary Fire);
		Wait(1.500, Ignore Condition);
		Call Subroutine(botAI_FacingReset);
		Start Holding Button(Event Player, Primary Fire);
		Wait(1.100, Ignore Condition);
		Stop Holding Button(Event Player, Primary Fire);
	}
}

rule("Player Respawn Invulnerability")
{
	event
	{
		Player Died;
		Team 1;
		All;
	}

	conditions
	{
		Player Variable(Event Player, playerDifficulty) == Global Variable(difficultyRealistic);
	}

	actions
	{
		Set Status(Event Player, Null, Invincible, 2.250);
	}
}

rule("Debug Toggle")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is Game In Progress == True;
		Is Button Held(Event Player, Interact) == True;
		Is Button Held(Event Player, Reload) == True;
		Is Button Held(Event Player, Jump) == True;
		Is Dummy Bot(Event Player) == False;
	}

	actions
	{
		If(Compare(Player Variable(Event Player, debugHUD_enabled), ==, True));
			For Player Variable(Event Player, debugHUD_i, 0, Count Of(Player Variable(Event Player, debugHUD)), 1);
				Destroy HUD Text(Value In Array(Player Variable(Event Player, debugHUD), Player Variable(Event Player, debugHUD_i)));
			End;
			Set Player Variable(Event Player, debugHUD_enabled, False);
		Else;
			Set Player Variable(Event Player, debugHUD, Empty Array);
			Set Player Variable(Event Player, debugHUD_enabled, True);
			Create HUD Text(Event Player, Custom String("Server Load: {0}", Server Load, Null, Null), Custom String("Average: {0}",
				Server Load Average, Null, Null), Custom String("Peak: {0}", Server Load Peak, Null, Null), Top, 3, Orange, Yellow, Red,
				Visible To and String, Default Visibility);
			Modify Player Variable(Event Player, debugHUD, Append To Array, Last Text ID);
			Create HUD Text(Event Player, Custom String("", Null, Null, Null), Custom String("Enemy Pos: {0}", Position Of(Players In Slot(
				Slot Of(Event Player), Team 2)), Null, Null), Custom String("Player Pos: {0}", Position Of(Event Player), Null, Null), Left, 4,
				Yellow, Red, Sky Blue, Visible To and String, Default Visibility);
			Modify Player Variable(Event Player, debugHUD, Append To Array, Last Text ID);
			Create HUD Text(Event Player, Custom String("Player Dist From Home: {0}", Distance Between(Event Player, Player Variable(
				Event Player, thisPlayerHome)), Null, Null), Null, Custom String("Enemy Dist From Home: {0}", Distance Between(Players In Slot(
				Slot Of(Event Player), Team 2), Player Variable(Event Player, thisPlayerHome)), Null, Null), Left, 5, Yellow, White, White,
				Visible To and String, Default Visibility);
			Modify Player Variable(Event Player, debugHUD, Append To Array, Last Text ID);
			Create HUD Text(Event Player, Custom String("Enemy Dist From Player: {0}", Distance Between(Event Player, Players In Slot(Slot Of(
				Event Player), Team 2)), Null, Null), Null, Null, Left, 5.200, Yellow, White, Yellow, Visible To and String,
				Default Visibility);
			Modify Player Variable(Event Player, debugHUD, Append To Array, Last Text ID);
			Create HUD Text(Event Player, Custom String("Enemy Ult Charge: {0}", Ultimate Charge Percent(Players In Slot(Slot Of(Event Player),
				Team 2)), Null, Null), Null, Null, Right, 6, Turquoise, White, White, Visible To and String, Default Visibility);
			Modify Player Variable(Event Player, debugHUD, Append To Array, Last Text ID);
			Create HUD Text(Event Player, Custom String("Player Facing Dir: {0}", Facing Direction Of(Event Player), Null, Null), Null,
				Custom String("Enemy Facing Dir: {0}", Facing Direction Of(Players In Slot(Slot Of(Event Player), Team 2)), Null, Null), Left,
				6.100, White, White, White, Visible To and String, Default Visibility);
			Modify Player Variable(Event Player, debugHUD, Append To Array, Last Text ID);
			Wait(2, Ignore Condition);
		End;
	}
}

rule("Subroutine: infoToggle")
{
	event
	{
		Subroutine;
		infoToggle;
	}

	actions
	{
		If(Compare(Player Variable(Event Player, showingInfoText), ==, True));
			For Player Variable(Event Player, hudTextInfo_i, 0, Count Of(Player Variable(Event Player, hudTextInfo)), 1);
				Destroy HUD Text(Value In Array(Player Variable(Event Player, hudTextInfo), Player Variable(Event Player, hudTextInfo_i)));
			End;
			Set Player Variable(Event Player, showingInfoText, False);
		Else;
			Set Player Variable(Event Player, hudTextInfo, Empty Array);
			Set Player Variable(Event Player, showingInfoText, True);
			Create HUD Text(Event Player, Custom String("Welcome to Practice Field: Expanse!", Null, Null, Null), Custom String(
				"twitch.tv/thewanderingsnow", Null, Null, Null), Custom String("Created by Snow#15707", Null, Null, Null), Top, 3, Yellow,
				Purple, Sky Blue, Visible To and String, Default Visibility);
			Modify Player Variable(Event Player, hudTextInfo, Append To Array, Last Text ID);
			Create HUD Text(Event Player, Custom String("", Null, Null, Null), Null, Custom String(
				"This workshop mode was designed initially as an aim and reaction time practice for Widowmaker.", Null, Null, Null), Top, 4,
				Yellow, White, White, Visible To and String, Default Visibility);
			Modify Player Variable(Event Player, hudTextInfo, Append To Array, Last Text ID);
			Create HUD Text(Event Player, Custom String("", Null, Null, Null), Null, Custom String(
				"I have since expanded it so that it can be used to warmup on ALL heroes.", Null, Null, Null), Top, 5, Yellow, White, White,
				Visible To and String, Default Visibility);
			Modify Player Variable(Event Player, hudTextInfo, Append To Array, Last Text ID);
			Create HUD Text(Event Player, Custom String("", Null, Null, Null), Custom String("It is currently in Alpha, so please be kind.",
				Null, Null, Null), Custom String("I have also been creating custom AI for ALL heroes for the Realistic Mode.", Null, Null,
				Null), Top, 5.100, Yellow, White, White, Visible To and String, Default Visibility);
			Modify Player Variable(Event Player, hudTextInfo, Append To Array, Last Text ID);
			Create HUD Text(Event Player, Custom String("", Null, Null, Null), Null, Custom String(
				"Look above you for more options! Press [INTERACT] while looking at an option.", Null, Null, Null), Top, 5.200, Yellow, White,
				Yellow, Visible To and String, Default Visibility);
			Modify Player Variable(Event Player, hudTextInfo, Append To Array, Last Text ID);
			Create HUD Text(Event Player, Custom String("", Null, Null, Null), Null, Custom String("See the top left corner for controls.",
				Null, Null, Null), Top, 6, Yellow, White, Green, Visible To and String, Default Visibility);
			Modify Player Variable(Event Player, hudTextInfo, Append To Array, Last Text ID);
			Create HUD Text(Event Player, Custom String("", Null, Null, Null), Custom String(
				"For More Information & The Most Recent Version go to: ", Null, Null, Null), Custom String(
				"https://github.com/SnowRoberge/Practice-Field-Expanse", Null, Null, Null), Top, 7, Yellow, White, Sky Blue,
				Visible To and String, Default Visibility);
			Modify Player Variable(Event Player, hudTextInfo, Append To Array, Last Text ID);
			Create HUD Text(Event Player, Custom String("", Null, Null, Null), Custom String("Press [CROUCH] and [INTERACT] to hide this text",
				Null, Null, Null), Null, Top, 8, Yellow, White, Sky Blue, Visible To and String, Default Visibility);
			Modify Player Variable(Event Player, hudTextInfo, Append To Array, Last Text ID);
		End;
	}
}

rule("Help Skip Message")
{
	event
	{
		Player Died;
		Team 1;
		All;
	}

	conditions
	{
		Is Game In Progress == True;
		Player Variable(Players In Slot(Slot Of(Event Player), Team 2), currentKillNumber) >= 8;
		Modulo(Player Variable(Players In Slot(Slot Of(Event Player), Team 2), currentKillNumber), 4) == 0;
		Player Variable(Event Player, playerDifficulty) == Global Variable(difficultyRealistic);
	}

	actions
	{
		Small Message(Event Player, Custom String("To skip {0} hold [INTERACT] and press [PRIMARY FIRE]", Hero Icon String(Hero Of(
			Players In Slot(Slot Of(Event Player), Team 2))), Null, Null));
	}
}

rule("Reset Player Changing Hero")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Has Spawned(Event Player) == True;
		Player Variable(Event Player, changingHero) == True;
	}

	actions
	{
		Teleport(Event Player, Player Variable(Event Player, thisPlayerHome));
		Set Player Variable(Event Player, changingHero, False);
		Set Player Variable(Players In Slot(Slot Of(Event Player), Team 2), botAI_Enabled, False);
		Wait(0.250, Ignore Condition);
		Call Subroutine(teleportEnemy);
	}
}

rule("Hard Mode WASD")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Player Variable(Event Player, playerDifficulty) == Global Variable(difficultyHard);
		Is Alive(Players In Slot(Slot Of(Event Player), Team 2)) == True;
	}

	actions
	{
		Set Player Variable(Players In Slot(Slot Of(Event Player), Team 2), botAI_ThrottleDir, Random Value In Array(Global Variable(
			moveDirAll)));
		Start Rule(botAI_WASD, Do Nothing);
		Start Rule(botAI_Crouch, Do Nothing);
		Start Rule(botAI_Jump, Do Nothing);
		Wait(0.250, Ignore Condition);
		Loop If Condition Is True;
		Stop Throttle In Direction(Players In Slot(Slot Of(Event Player), Team 2));
		Stop Holding Button(Players In Slot(Slot Of(Event Player), Team 2), Crouch);
		Stop Holding Button(Players In Slot(Slot Of(Event Player), Team 2), Jump);
	}
}

rule("Normal Mode WASD")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Player Variable(Event Player, playerDifficulty) == Global Variable(difficultyNormal);
		Is Alive(Players In Slot(Slot Of(Event Player), Team 2)) == True;
		Player Variable(Event Player, currentKillNumber) >= Divide(Player Variable(Event Player, playerMaxKills), 2);
	}

	actions
	{
		Set Player Variable(Players In Slot(Slot Of(Event Player), Team 2), botAI_ThrottleDir, Random Value In Array(Global Variable(
			moveDirForwards)));
		Start Rule(botAI_WASD, Do Nothing);
		Start Rule(botAI_Crouch, Do Nothing);
		Start Rule(botAI_Jump, Do Nothing);
		Wait(0.250, Ignore Condition);
		Loop If Condition Is True;
		Stop Throttle In Direction(Players In Slot(Slot Of(Event Player), Team 2));
		Stop Holding Button(Players In Slot(Slot Of(Event Player), Team 2), Crouch);
		Stop Holding Button(Players In Slot(Slot Of(Event Player), Team 2), Jump);
	}
}

rule("Easy Mode WASD")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Player Variable(Event Player, playerDifficulty) == Global Variable(difficultyEasy);
		Is Alive(Players In Slot(Slot Of(Event Player), Team 2)) == True;
		Player Variable(Event Player, currentKillNumber) >= Divide(Player Variable(Event Player, playerMaxKills), 2);
	}

	actions
	{
		Start Throttle In Direction(Players In Slot(Slot Of(Event Player), Team 2), Forward, 1, To Player, Replace existing throttle,
			Direction and Magnitude);
		Wait(1, Ignore Condition);
		Loop If Condition Is True;
		Stop Throttle In Direction(Players In Slot(Slot Of(Event Player), Team 2));
	}
}

rule("AI Subroutine: Movement Crouch")
{
	event
	{
		Subroutine;
		botAI_Crouch;
	}

	actions
	{
		Wait(0.250, Ignore Condition);
		Skip If(Compare(Random Real(0, 1), >, 0.200), 3);
		Stop Holding Button(Players In Slot(Slot Of(Event Player), Team 2), Crouch);
		Start Holding Button(Players In Slot(Slot Of(Event Player), Team 2), Crouch);
		Wait(Random Real(0.100, 0.500), Ignore Condition);
		Stop Holding Button(Players In Slot(Slot Of(Event Player), Team 2), Crouch);
	}
}

rule("AI Subroutine: Movement Jump")
{
	event
	{
		Subroutine;
		botAI_Jump;
	}

	actions
	{
		Skip If(Compare(Random Real(0, 1), >, 0.200), 1);
		Press Button(Players In Slot(Slot Of(Event Player), Team 2), Jump);
		Wait(Random Real(0.100, 1.250), Ignore Condition);
	}
}

rule("Special Rule: Doomfist Rocket Punch Damage")
{
	event
	{
		Ongoing - Each Player;
		All;
		Doomfist;
	}

	conditions
	{
		Has Status(Players In Slot(Slot Of(Event Player), Opposite Team Of(Team Of(Event Player))), Stunned) == True;
		Distance Between(Players In Slot(Slot Of(Event Player), Opposite Team Of(Team Of(Event Player))), Player Variable(Players In Slot(
			Slot Of(Event Player), Team 1), thisPlayerHome)) >= Subtract(Player Variable(Players In Slot(Slot Of(Event Player), Team 1),
			playerZoneRadius), 1);
	}

	actions
	{
		Apply Impulse(Players In Slot(Slot Of(Event Player), Opposite Team Of(Team Of(Event Player))), Direction Towards(Players In Slot(
			Slot Of(Event Player), Opposite Team Of(Team Of(Event Player))), Event Player), 1, To World, Cancel Contrary Motion);
		Damage(Players In Slot(Slot Of(Event Player), Opposite Team Of(Team Of(Event Player))), Event Player, Player Variable(Event Player,
			doomfistPunchDamage));
		Set Player Variable(Event Player, doomfistPunchCharge, 0);
		Set Player Variable(Event Player, doomfistPunchDamage, 0);
	}
}

rule("AI Subroutine: botAI_MoveTowardsAnchor")
{
	event
	{
		Subroutine;
		botAI_MoveTowardsAnchor;
	}

	actions
	{
		Set Player Variable(Players In Slot(Slot Of(Event Player), Team 2), botAI_MoveWASD_Enabled, False);
		Start Throttle In Direction(Players In Slot(Slot Of(Event Player), Team 2), Direction Towards(Players In Slot(Slot Of(
			Event Player), Team 2), Player Variable(Players In Slot(Slot Of(Event Player), Team 2), botAI_Anchor_Position)), 1, To World,
			Replace existing throttle, Direction and Magnitude);
		While(Compare(Distance Between(Players In Slot(Slot Of(Event Player), Team 2), Player Variable(Players In Slot(Slot Of(
			Event Player), Team 2), botAI_Anchor_Position)), >, 0.500));
			Wait(0.500, Ignore Condition);
		End;
		Set Player Variable(Players In Slot(Slot Of(Event Player), Team 2), botAI_MoveWASD_Enabled, True);
	}
}

rule("AI Move Towards Anchor")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Player Variable(Event Player, botAI_Anchor_Enabled) == True;
		Distance Between(Event Player, Player Variable(Event Player, botAI_Anchor_Position)) > Player Variable(Event Player,
			botAI_Anchor_DriftMax);
	}

	actions
	{
		Start Rule(botAI_MoveTowardsAnchor, Do Nothing);
	}
}

rule("AI Move Around Anchor")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Player Variable(Event Player, botAI_Anchor_Enabled) == True;
		Distance Between(Event Player, Player Variable(Event Player, botAI_Anchor_Position)) <= Player Variable(Event Player,
			botAI_Anchor_DriftMax);
		Player Variable(Event Player, botAI_MoveWASD_Enabled) == True;
	}

	actions
	{
		Set Player Variable(Event Player, botAI_ThrottleDir, Random Value In Array(Global Variable(moveDirAll)));
		Call Subroutine(botAI_WASD);
		Loop If Condition Is True;
	}
}
